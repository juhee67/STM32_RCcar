
77.STM32_RTOS_MANUAL_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abf4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800ad94  0800ad94  0001ad94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b074  0800b074  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b07c  0800b07c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b07c  0800b07c  0001b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b080  0800b080  0001b080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052c4  2000007c  0800b100  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005340  0800b100  00025340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cc9  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004876  00000000  00000000  00041d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  000465f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  000481a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005fea  00000000  00000000  00049ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020131  00000000  00000000  0004fb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3253  00000000  00000000  0006fcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112f0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b64  00000000  00000000  00112f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad7c 	.word	0x0800ad7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800ad7c 	.word	0x0800ad7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_UART_RxCpltCallback>:
extern int dht11time;
// copy from HAL_UART_RxCpltCallback of stm32f4xx_hal_uart to here
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a30      	ldr	r2, [pc, #192]	; (8000650 <HAL_UART_RxCpltCallback+0xcc>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d148      	bne.n	8000626 <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 8000594:	f000 f86e 	bl	8000674 <is_full>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d13e      	bne.n	800061c <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <HAL_UART_RxCpltCallback+0xd0>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b0a      	cmp	r3, #10
 80005a8:	d002      	beq.n	80005b0 <HAL_UART_RxCpltCallback+0x2c>
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	2b0d      	cmp	r3, #13
 80005ae:	d123      	bne.n	80005f8 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <HAL_UART_RxCpltCallback+0xd4>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <HAL_UART_RxCpltCallback+0xd8>)
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	4829      	ldr	r0, [pc, #164]	; (8000660 <HAL_UART_RxCpltCallback+0xdc>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	011b      	lsls	r3, r3, #4
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4403      	add	r3, r0
 80005c4:	440b      	add	r3, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <HAL_UART_RxCpltCallback+0xd8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <HAL_UART_RxCpltCallback+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a20      	ldr	r2, [pc, #128]	; (8000658 <HAL_UART_RxCpltCallback+0xd4>)
 80005d8:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <HAL_UART_RxCpltCallback+0xd4>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <HAL_UART_RxCpltCallback+0xe0>)
 80005e0:	fb83 1302 	smull	r1, r3, r3, r2
 80005e4:	1119      	asrs	r1, r3, #4
 80005e6:	17d3      	asrs	r3, r2, #31
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	2132      	movs	r1, #50	; 0x32
 80005ec:	fb01 f303 	mul.w	r3, r1, r3
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a19      	ldr	r2, [pc, #100]	; (8000658 <HAL_UART_RxCpltCallback+0xd4>)
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e011      	b.n	800061c <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_UART_RxCpltCallback+0xd4>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_UART_RxCpltCallback+0xd8>)
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	4817      	ldr	r0, [pc, #92]	; (8000660 <HAL_UART_RxCpltCallback+0xdc>)
 8000602:	4613      	mov	r3, r2
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4403      	add	r3, r0
 800060c:	440b      	add	r3, r1
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_UART_RxCpltCallback+0xd8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <HAL_UART_RxCpltCallback+0xd8>)
 800061a:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	490d      	ldr	r1, [pc, #52]	; (8000654 <HAL_UART_RxCpltCallback+0xd0>)
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <HAL_UART_RxCpltCallback+0xcc>)
 8000622:	f005 f974 	bl	800590e <HAL_UART_Receive_IT>
	}
	if (huart == &huart1)   // BT
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <HAL_UART_RxCpltCallback+0xe4>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d10b      	bne.n	8000646 <HAL_UART_RxCpltCallback+0xc2>
	{
printf("%c\n", bt_data);
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_UART_RxCpltCallback+0xe8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <HAL_UART_RxCpltCallback+0xec>)
 8000638:	f009 fcbe 	bl	8009fb8 <iprintf>
//				rx_buff[input_pointer][rx_index] = data;
//				rx_index++;
//			}
//		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		HAL_UART_Receive_IT(&huart1, &bt_data, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	490b      	ldr	r1, [pc, #44]	; (800066c <HAL_UART_RxCpltCallback+0xe8>)
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_UART_RxCpltCallback+0xe4>)
 8000642:	f005 f964 	bl	800590e <HAL_UART_Receive_IT>
	}
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000860 	.word	0x20000860
 8000654:	2000067c 	.word	0x2000067c
 8000658:	20000098 	.word	0x20000098
 800065c:	20000680 	.word	0x20000680
 8000660:	200000a0 	.word	0x200000a0
 8000664:	51eb851f 	.word	0x51eb851f
 8000668:	2000081c 	.word	0x2000081c
 800066c:	2000067d 	.word	0x2000067d
 8000670:	0800ad94 	.word	0x0800ad94

08000674 <is_full>:
	else
		return 0;
}

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <is_full+0x40>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <is_full+0x44>)
 8000682:	fb82 1203 	smull	r1, r2, r2, r3
 8000686:	1111      	asrs	r1, r2, #4
 8000688:	17da      	asrs	r2, r3, #31
 800068a:	1a8a      	subs	r2, r1, r2
 800068c:	2132      	movs	r1, #50	; 0x32
 800068e:	fb01 f202 	mul.w	r2, r1, r2
 8000692:	1a9b      	subs	r3, r3, r2
 8000694:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <is_full+0x48>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	d101      	bne.n	80006a4 <is_full+0x30>
		return 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e000      	b.n	80006a6 <is_full+0x32>
	else
		return 0;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000098 	.word	0x20000098
 80006b8:	51eb851f 	.word	0x51eb851f
 80006bc:	2000009c 	.word	0x2000009c

080006c0 <get_button>:


// 1. GPIO 2. GPIO PIN 3. 이전의 버튼

int get_button( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
 80006cc:	4613      	mov	r3, r2
 80006ce:	707b      	strb	r3, [r7, #1]
	unsigned char current_state;

	current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80006d0:	887b      	ldrh	r3, [r7, #2]
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f001 ff33 	bl	8002540 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]

	if (current_state == BUTTON_PRESS && previous_button_status[button_number] == BUTTON_RELEASE)  // 처음 누른상태
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d10d      	bne.n	8000700 <get_button+0x40>
 80006e4:	787b      	ldrb	r3, [r7, #1]
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <get_button+0x68>)
 80006e8:	5cd3      	ldrb	r3, [r2, r3]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d108      	bne.n	8000700 <get_button+0x40>
	{
		HAL_Delay(100);   // noise가 지나가기를 기다린다.
 80006ee:	2064      	movs	r0, #100	; 0x64
 80006f0:	f001 fc0a 	bl	8001f08 <HAL_Delay>
		previous_button_status[button_number] = current_state;
 80006f4:	787b      	ldrb	r3, [r7, #1]
 80006f6:	490c      	ldr	r1, [pc, #48]	; (8000728 <get_button+0x68>)
 80006f8:	7bfa      	ldrb	r2, [r7, #15]
 80006fa:	54ca      	strb	r2, [r1, r3]
		return BUTTON_RELEASE;    // 아직 버튼이 눌러 지지 않는것으로 처리 0을 리턴
 80006fc:	2301      	movs	r3, #1
 80006fe:	e00e      	b.n	800071e <get_button+0x5e>
	}
	else if (current_state == BUTTON_RELEASE && previous_button_status[button_number] == BUTTON_PRESS)
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10a      	bne.n	800071c <get_button+0x5c>
 8000706:	787b      	ldrb	r3, [r7, #1]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <get_button+0x68>)
 800070a:	5cd3      	ldrb	r3, [r2, r3]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d105      	bne.n	800071c <get_button+0x5c>
	{
		previous_button_status[button_number] = BUTTON_RELEASE;   // 릴리즈 상태
 8000710:	787b      	ldrb	r3, [r7, #1]
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <get_button+0x68>)
 8000714:	2101      	movs	r1, #1
 8000716:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 버튼이 완전히 눌렀다 뗀 상태로 판단 하고 1을 리턴 한다.
 8000718:	2300      	movs	r3, #0
 800071a:	e000      	b.n	800071e <get_button+0x5e>
	}

	return BUTTON_RELEASE;    // 버튼이 눌렀다 떼어진 상태가 아니다.
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <mode_check>:
    }

}

void mode_check()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, BUTTON0) == BUTTON_PRESS)
 8000730:	2200      	movs	r2, #0
 8000732:	2102      	movs	r1, #2
 8000734:	481b      	ldr	r0, [pc, #108]	; (80007a4 <mode_check+0x78>)
 8000736:	f7ff ffc3 	bl	80006c0 <get_button>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d12e      	bne.n	800079e <mode_check+0x72>
	{
		auto_mode_state = !auto_mode_state;
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <mode_check+0x7c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf0c      	ite	eq
 8000748:	2301      	moveq	r3, #1
 800074a:	2300      	movne	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	461a      	mov	r2, r3
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <mode_check+0x7c>)
 8000752:	701a      	strb	r2, [r3, #0]

		if (osMutexWait(myMutex01Handle, 1000) == osOK) {
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <mode_check+0x80>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800075c:	4618      	mov	r0, r3
 800075e:	f006 fa30 	bl	8006bc2 <osMutexAcquire>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d11a      	bne.n	800079e <mode_check+0x72>
			move_cursor(0,0);
 8000768:	2100      	movs	r1, #0
 800076a:	2000      	movs	r0, #0
 800076c:	f000 fa70 	bl	8000c50 <move_cursor>
			if (auto_mode_state)
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <mode_check+0x7c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d003      	beq.n	8000780 <mode_check+0x54>
			{
				lcd_string("AUTO Mode       ");
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <mode_check+0x84>)
 800077a:	f000 fa54 	bl	8000c26 <lcd_string>
 800077e:	e002      	b.n	8000786 <mode_check+0x5a>
			}
			else
			{
				lcd_string("Manual Mode    ");
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <mode_check+0x88>)
 8000782:	f000 fa50 	bl	8000c26 <lcd_string>
			}
			move_cursor(1,0);
 8000786:	2100      	movs	r1, #0
 8000788:	2001      	movs	r0, #1
 800078a:	f000 fa61 	bl	8000c50 <move_cursor>
			lcd_string("                ");
 800078e:	480a      	ldr	r0, [pc, #40]	; (80007b8 <mode_check+0x8c>)
 8000790:	f000 fa49 	bl	8000c26 <lcd_string>
			osMutexRelease(myMutex01Handle);
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <mode_check+0x80>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f006 fa5d 	bl	8006c58 <osMutexRelease>
		}
	}
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020800 	.word	0x40020800
 80007a8:	20000684 	.word	0x20000684
 80007ac:	200008b4 	.word	0x200008b4
 80007b0:	0800ae34 	.word	0x0800ae34
 80007b4:	0800ae48 	.word	0x0800ae48
 80007b8:	0800ae58 	.word	0x0800ae58

080007bc <auto_drive>:

// 자율주행 프로그램을 이곳에 programming 한다.
void auto_drive(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <manual_mode_run>:

extern volatile uint8_t bt_data;   // 2. BT로 부터 1byte의 INT가 들어오면 저장 하는 변수

void manual_mode_run(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	if (osMutexWait(myMutex01Handle, 1000) == osOK) {
 80007d0:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <manual_mode_run+0xf8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007d8:	4618      	mov	r0, r3
 80007da:	f006 f9f2 	bl	8006bc2 <osMutexAcquire>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d12b      	bne.n	800083c <manual_mode_run+0x70>
		move_cursor(1,0);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fa32 	bl	8000c50 <move_cursor>
		if (bt_data == 'F')
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <manual_mode_run+0xfc>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b46      	cmp	r3, #70	; 0x46
 80007f4:	d103      	bne.n	80007fe <manual_mode_run+0x32>
		{
			lcd_string("Forward    ");
 80007f6:	4835      	ldr	r0, [pc, #212]	; (80008cc <manual_mode_run+0x100>)
 80007f8:	f000 fa15 	bl	8000c26 <lcd_string>
 80007fc:	e019      	b.n	8000832 <manual_mode_run+0x66>
		}
		else if (bt_data == 'B')
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <manual_mode_run+0xfc>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b42      	cmp	r3, #66	; 0x42
 8000806:	d103      	bne.n	8000810 <manual_mode_run+0x44>
		{
			lcd_string("Backward    ");
 8000808:	4831      	ldr	r0, [pc, #196]	; (80008d0 <manual_mode_run+0x104>)
 800080a:	f000 fa0c 	bl	8000c26 <lcd_string>
 800080e:	e010      	b.n	8000832 <manual_mode_run+0x66>
		}
		else if (bt_data == 'L')
 8000810:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <manual_mode_run+0xfc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b4c      	cmp	r3, #76	; 0x4c
 8000818:	d103      	bne.n	8000822 <manual_mode_run+0x56>
		{
			lcd_string("Turn Left    ");
 800081a:	482e      	ldr	r0, [pc, #184]	; (80008d4 <manual_mode_run+0x108>)
 800081c:	f000 fa03 	bl	8000c26 <lcd_string>
 8000820:	e007      	b.n	8000832 <manual_mode_run+0x66>
		}
		else if (bt_data == 'R')
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <manual_mode_run+0xfc>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b52      	cmp	r3, #82	; 0x52
 800082a:	d102      	bne.n	8000832 <manual_mode_run+0x66>
		{
			lcd_string("Turn Right   ");
 800082c:	482a      	ldr	r0, [pc, #168]	; (80008d8 <manual_mode_run+0x10c>)
 800082e:	f000 f9fa 	bl	8000c26 <lcd_string>
		}
//		else
//		{
//			lcd_string("                ");
//		}
		osMutexRelease(myMutex01Handle);
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <manual_mode_run+0xf8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f006 fa0e 	bl	8006c58 <osMutexRelease>
	}


	switch(bt_data)
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <manual_mode_run+0xfc>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	3b42      	subs	r3, #66	; 0x42
 8000844:	2b11      	cmp	r3, #17
 8000846:	d83a      	bhi.n	80008be <manual_mode_run+0xf2>
 8000848:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <manual_mode_run+0x84>)
 800084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084e:	bf00      	nop
 8000850:	080008a1 	.word	0x080008a1
 8000854:	080008bf 	.word	0x080008bf
 8000858:	080008bf 	.word	0x080008bf
 800085c:	080008bf 	.word	0x080008bf
 8000860:	08000899 	.word	0x08000899
 8000864:	080008bf 	.word	0x080008bf
 8000868:	080008bf 	.word	0x080008bf
 800086c:	080008bf 	.word	0x080008bf
 8000870:	080008bf 	.word	0x080008bf
 8000874:	080008bf 	.word	0x080008bf
 8000878:	080008a9 	.word	0x080008a9
 800087c:	080008bf 	.word	0x080008bf
 8000880:	080008bf 	.word	0x080008bf
 8000884:	080008bf 	.word	0x080008bf
 8000888:	080008bf 	.word	0x080008bf
 800088c:	080008bf 	.word	0x080008bf
 8000890:	080008b1 	.word	0x080008b1
 8000894:	080008b9 	.word	0x080008b9
	{
		case 'F':
		forward(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f000 f81f 	bl	80008dc <forward>
		break;
 800089e:	e00f      	b.n	80008c0 <manual_mode_run+0xf4>
		case 'B':
		backward(100);
 80008a0:	2064      	movs	r0, #100	; 0x64
 80008a2:	f000 f837 	bl	8000914 <backward>
		break;
 80008a6:	e00b      	b.n	80008c0 <manual_mode_run+0xf4>
		case 'L':
		turn_left(100);
 80008a8:	2064      	movs	r0, #100	; 0x64
 80008aa:	f000 f84f 	bl	800094c <turn_left>
		break;
 80008ae:	e007      	b.n	80008c0 <manual_mode_run+0xf4>
		case 'R':
		turn_right(100);
 80008b0:	2064      	movs	r0, #100	; 0x64
 80008b2:	f000 f85d 	bl	8000970 <turn_right>
		break;
 80008b6:	e003      	b.n	80008c0 <manual_mode_run+0xf4>
		case 'S':
		stop();
 80008b8:	f000 f86c 	bl	8000994 <stop>
		break;
 80008bc:	e000      	b.n	80008c0 <manual_mode_run+0xf4>
		default:
		break;
 80008be:	bf00      	nop
	}
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200008b4 	.word	0x200008b4
 80008c8:	2000067d 	.word	0x2000067d
 80008cc:	0800ae6c 	.word	0x0800ae6c
 80008d0:	0800ae78 	.word	0x0800ae78
 80008d4:	0800ae88 	.word	0x0800ae88
 80008d8:	0800ae98 	.word	0x0800ae98

080008dc <forward>:

void forward(int speed)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	all_foward();
 80008e4:	f000 f8d6 	bl	8000a94 <all_foward>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <forward+0x34>)
 80008ec:	f003 fbae 	bl	800404c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);   // left speed
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <forward+0x34>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80008f8:	2104      	movs	r1, #4
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <forward+0x34>)
 80008fc:	f003 fba6 	bl	800404c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);   //  right speed
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <forward+0x34>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000078c 	.word	0x2000078c

08000914 <backward>:

void backward(int speed)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	all_backward();
 800091c:	f000 f8e4 	bl	8000ae8 <all_backward>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000920:	2100      	movs	r1, #0
 8000922:	4809      	ldr	r0, [pc, #36]	; (8000948 <backward+0x34>)
 8000924:	f003 fb92 	bl	800404c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);   // left speed
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <backward+0x34>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000930:	2104      	movs	r1, #4
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <backward+0x34>)
 8000934:	f003 fb8a 	bl	800404c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);   //  right speed
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <backward+0x34>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000078c 	.word	0x2000078c

0800094c <turn_left>:

void turn_left(int speed)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	all_foward();
 8000954:	f000 f89e 	bl	8000a94 <all_foward>

	left_speed(speed);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	b29b      	uxth	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f837 	bl	80009d0 <left_speed>
	right_speed(0);   //  PWM 출력 right
 8000962:	2000      	movs	r0, #0
 8000964:	f000 f854 	bl	8000a10 <right_speed>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <turn_right>:

void turn_right(int speed)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	all_foward();
 8000978:	f000 f88c 	bl	8000a94 <all_foward>

	left_speed(0); //  PWM 출력	  left
 800097c:	2000      	movs	r0, #0
 800097e:	f000 f827 	bl	80009d0 <left_speed>
	right_speed(speed);    //  PWM 출력 right
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	b29b      	uxth	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f842 	bl	8000a10 <right_speed>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <stop>:

void stop()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	all_stop();
 8000998:	f000 f8bc 	bl	8000b14 <all_stop>

	HAL_GPIO_WritePin(LEFT_WHEEL_IN1_PORT, LEFT_WHEEL_IN1_PIN, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <stop+0x38>)
 80009a2:	f001 fde5 	bl	8002570 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_IN2_PORT, LEFT_WHEEL_IN2_PIN, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	4808      	ldr	r0, [pc, #32]	; (80009cc <stop+0x38>)
 80009ac:	f001 fde0 	bl	8002570 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RIGHT_WHEEL_IN3_PORT, RIGHT_WHEEL_IN3_PIN, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <stop+0x38>)
 80009b8:	f001 fdda 	bl	8002570 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN4_PORT, RIGHT_WHEEL_IN4_PIN, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c2:	4802      	ldr	r0, [pc, #8]	; (80009cc <stop+0x38>)
 80009c4:	f001 fdd4 	bl	8002570 <HAL_GPIO_WritePin>

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40020800 	.word	0x40020800

080009d0 <left_speed>:


void left_speed(uint16_t speed)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	80fb      	strh	r3, [r7, #6]
	if (speed >= 100) speed = 100;
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	2b63      	cmp	r3, #99	; 0x63
 80009de:	d901      	bls.n	80009e4 <left_speed+0x14>
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	80fb      	strh	r3, [r7, #6]
	else if (speed < 0) speed = 0;

	if (speed == 0)
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d104      	bne.n	80009f4 <left_speed+0x24>
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80009ea:	2100      	movs	r1, #0
 80009ec:	4807      	ldr	r0, [pc, #28]	; (8000a0c <left_speed+0x3c>)
 80009ee:	f003 fbdd 	bl	80041ac <HAL_TIM_PWM_Stop>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
	}

}
 80009f2:	e007      	b.n	8000a04 <left_speed+0x34>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009f4:	2100      	movs	r1, #0
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <left_speed+0x3c>)
 80009f8:	f003 fb28 	bl	800404c <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <left_speed+0x3c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	88fa      	ldrh	r2, [r7, #6]
 8000a02:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000078c 	.word	0x2000078c

08000a10 <right_speed>:

void right_speed(uint16_t speed)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
	if (speed >= 100) speed = 100;
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	2b63      	cmp	r3, #99	; 0x63
 8000a1e:	d901      	bls.n	8000a24 <right_speed+0x14>
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	80fb      	strh	r3, [r7, #6]
	else if (speed < 0) speed = 0;

	if (speed == 0)
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d104      	bne.n	8000a34 <right_speed+0x24>
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <right_speed+0x3c>)
 8000a2e:	f003 fbbd 	bl	80041ac <HAL_TIM_PWM_Stop>
	else
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
	}
}
 8000a32:	e007      	b.n	8000a44 <right_speed+0x34>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a34:	2104      	movs	r1, #4
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <right_speed+0x3c>)
 8000a38:	f003 fb08 	bl	800404c <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <right_speed+0x3c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	88fa      	ldrh	r2, [r7, #6]
 8000a42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000078c 	.word	0x2000078c

08000a50 <left_forward>:

void left_forward()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEFT_WHEEL_IN1_PORT, LEFT_WHEEL_IN1_PIN, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <left_forward+0x1c>)
 8000a5a:	f001 fd89 	bl	8002570 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_IN2_PORT, LEFT_WHEEL_IN2_PIN, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	4802      	ldr	r0, [pc, #8]	; (8000a6c <left_forward+0x1c>)
 8000a64:	f001 fd84 	bl	8002570 <HAL_GPIO_WritePin>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40020800 	.word	0x40020800

08000a70 <right_forward>:

void right_forward()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN3_PORT, RIGHT_WHEEL_IN3_PIN, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <right_forward+0x20>)
 8000a7c:	f001 fd78 	bl	8002570 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN4_PORT, RIGHT_WHEEL_IN4_PIN, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a86:	4802      	ldr	r0, [pc, #8]	; (8000a90 <right_forward+0x20>)
 8000a88:	f001 fd72 	bl	8002570 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40020800 	.word	0x40020800

08000a94 <all_foward>:

void all_foward()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	 left_forward();
 8000a98:	f7ff ffda 	bl	8000a50 <left_forward>
	 right_forward();
 8000a9c:	f7ff ffe8 	bl	8000a70 <right_forward>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <left_backward>:

void left_backward()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEFT_WHEEL_IN1_PORT, LEFT_WHEEL_IN1_PIN, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <left_backward+0x1c>)
 8000aae:	f001 fd5f 	bl	8002570 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_IN2_PORT, LEFT_WHEEL_IN2_PIN, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <left_backward+0x1c>)
 8000ab8:	f001 fd5a 	bl	8002570 <HAL_GPIO_WritePin>

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <right_backward>:

void right_backward()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN3_PORT, RIGHT_WHEEL_IN3_PIN, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <right_backward+0x20>)
 8000ad0:	f001 fd4e 	bl	8002570 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN4_PORT, RIGHT_WHEEL_IN4_PIN, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <right_backward+0x20>)
 8000adc:	f001 fd48 	bl	8002570 <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40020800 	.word	0x40020800

08000ae8 <all_backward>:

void all_backward()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	left_backward();
 8000aec:	f7ff ffda 	bl	8000aa4 <left_backward>
	right_backward();
 8000af0:	f7ff ffe8 	bl	8000ac4 <right_backward>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <left_stop>:

void left_stop()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	left_speed(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff67 	bl	80009d0 <left_speed>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <right_stop>:

void right_stop()
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
	right_speed(0);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff ff80 	bl	8000a10 <right_speed>
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <all_stop>:

void all_stop()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	 left_stop();
 8000b18:	f7ff ffee 	bl	8000af8 <left_stop>
	 right_stop();
 8000b1c:	f7ff fff3 	bl	8000b06 <right_stop>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f023 030f 	bic.w	r3, r3, #15
 8000b34:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	f043 030c 	orr.w	r3, r3, #12
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000b50:	7bbb      	ldrb	r3, [r7, #14]
 8000b52:	f043 030c 	orr.w	r3, r3, #12
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000b5a:	7bbb      	ldrb	r3, [r7, #14]
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000b64:	bf00      	nop
 8000b66:	f107 0208 	add.w	r2, r7, #8
 8000b6a:	2364      	movs	r3, #100	; 0x64
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2304      	movs	r3, #4
 8000b70:	214e      	movs	r1, #78	; 0x4e
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <lcd_command+0x64>)
 8000b74:	f001 fe72 	bl	800285c <HAL_I2C_Master_Transmit>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f3      	bne.n	8000b66 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000b7e:	bf00      	nop
}
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000688 	.word	0x20000688

08000b8c <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f023 030f 	bic.w	r3, r3, #15
 8000b9c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	f043 030d 	orr.w	r3, r3, #13
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	f043 0309 	orr.w	r3, r3, #9
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000bb8:	7bbb      	ldrb	r3, [r7, #14]
 8000bba:	f043 030d 	orr.w	r3, r3, #13
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	f043 0309 	orr.w	r3, r3, #9
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000bcc:	bf00      	nop
 8000bce:	f107 0208 	add.w	r2, r7, #8
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	214e      	movs	r1, #78	; 0x4e
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <lcd_data+0x64>)
 8000bdc:	f001 fe3e 	bl	800285c <HAL_I2C_Master_Transmit>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f3      	bne.n	8000bce <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000be6:	bf00      	nop
}
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000688 	.word	0x20000688

08000bf4 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000bf8:	2033      	movs	r0, #51	; 0x33
 8000bfa:	f7ff ff93 	bl	8000b24 <lcd_command>
	lcd_command(0x32);
 8000bfe:	2032      	movs	r0, #50	; 0x32
 8000c00:	f7ff ff90 	bl	8000b24 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000c04:	2028      	movs	r0, #40	; 0x28
 8000c06:	f7ff ff8d 	bl	8000b24 <lcd_command>
	lcd_command(DISPLAY_ON);
 8000c0a:	200c      	movs	r0, #12
 8000c0c:	f7ff ff8a 	bl	8000b24 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000c10:	2006      	movs	r0, #6
 8000c12:	f7ff ff87 	bl	8000b24 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff ff84 	bl	8000b24 <lcd_command>
	HAL_Delay(2);
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f001 f973 	bl	8001f08 <HAL_Delay>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	while(*str)lcd_data(*str++);
 8000c2e:	e006      	b.n	8000c3e <lcd_string+0x18>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ffa7 	bl	8000b8c <lcd_data>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f4      	bne.n	8000c30 <lcd_string+0xa>
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	460a      	mov	r2, r1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	019b      	lsls	r3, r3, #6
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff56 	bl	8000b24 <lcd_command>
	return;
 8000c78:	bf00      	nop
}
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <led_all_off>:
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
}

void led_all_off()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	21ff      	movs	r1, #255	; 0xff
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <led_all_off+0x14>)
 8000c8a:	f001 fc71 	bl	8002570 <HAL_GPIO_WritePin>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40020400 	.word	0x40020400

08000c98 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ca0:	1d39      	adds	r1, r7, #4
 8000ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <__io_putchar+0x20>)
 8000caa:	f004 fd9e 	bl	80057ea <HAL_UART_Transmit>

  return ch;
 8000cae:	687b      	ldr	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000860 	.word	0x20000860

08000cbc <HAL_GPIO_EXTI_Callback>:

// copy from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_gpio.c to here
// every EXTERNAL INTERRUPT callBack function
int ext_int_no = -1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d002      	beq.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x16>
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d00b      	beq.n	8000ce8 <HAL_GPIO_EXTI_Callback+0x2c>
			HAL_GPIO_WritePin(GPIOB, 0x01 << 1, GPIO_PIN_SET);
//printf("EXT INT 1\n");
			ext_int_no = GPIO_PIN_1;
			break;
	}
}
 8000cd0:	e013      	b.n	8000cfa <HAL_GPIO_EXTI_Callback+0x3e>
			led_all_off();
 8000cd2:	f7ff ffd5 	bl	8000c80 <led_all_off>
			HAL_GPIO_WritePin(GPIOB, 0x01 << 0, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2101      	movs	r1, #1
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x48>)
 8000cdc:	f001 fc48 	bl	8002570 <HAL_GPIO_WritePin>
			ext_int_no = GPIO_PIN_0;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
			break;
 8000ce6:	e008      	b.n	8000cfa <HAL_GPIO_EXTI_Callback+0x3e>
			HAL_GPIO_WritePin(GPIOB, 0x01 << 1, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2102      	movs	r1, #2
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_GPIO_EXTI_Callback+0x48>)
 8000cee:	f001 fc3f 	bl	8002570 <HAL_GPIO_WritePin>
			ext_int_no = GPIO_PIN_1;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	601a      	str	r2, [r3, #0]
			break;
 8000cf8:	bf00      	nop
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40020400 	.word	0x40020400
 8000d08:	20000004 	.word	0x20000004

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f001 f8b8 	bl	8001e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f898 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 fb72 	bl	8001400 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d1c:	f000 fb46 	bl	80013ac <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000d20:	f000 faf6 	bl	8001310 <MX_TIM11_Init>
  MX_TIM1_Init();
 8000d24:	f000 f98e 	bl	8001044 <MX_TIM1_Init>
  MX_RTC_Init();
 8000d28:	f000 f932 	bl	8000f90 <MX_RTC_Init>
  MX_I2C1_Init();
 8000d2c:	f000 f902 	bl	8000f34 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d30:	f000 fa14 	bl	800115c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d34:	f000 fa88 	bl	8001248 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000d38:	f000 fb0e 	bl	8001358 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d3c:	f000 f8ee 	bl	8000f1c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);   // add_SIKWON_0826 for TIM11 every 10ms
 8000d40:	4829      	ldr	r0, [pc, #164]	; (8000de8 <main+0xdc>)
 8000d42:	f003 f8d1 	bl	8003ee8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);  // add_SIKWON_0826 for us_delay, ultrasonic
 8000d46:	2100      	movs	r1, #0
 8000d48:	4828      	ldr	r0, [pc, #160]	; (8000dec <main+0xe0>)
 8000d4a:	f003 fbeb 	bl	8004524 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // PC UART enable
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4927      	ldr	r1, [pc, #156]	; (8000df0 <main+0xe4>)
 8000d52:	4828      	ldr	r0, [pc, #160]	; (8000df4 <main+0xe8>)
 8000d54:	f004 fddb 	bl	800590e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &bt_data, 1);  // BT enable
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4927      	ldr	r1, [pc, #156]	; (8000df8 <main+0xec>)
 8000d5c:	4827      	ldr	r0, [pc, #156]	; (8000dfc <main+0xf0>)
 8000d5e:	f004 fdd6 	bl	800590e <HAL_UART_Receive_IT>
  // 주의: PC?? BT�??? ?��?��?�� ?��?��?��?��?�� rx_data�??? 별도?�� �????���??? �????�� ?��?�� �???�??? ?��?��
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);   // PWM control for servo motor
 8000d62:	2108      	movs	r1, #8
 8000d64:	4826      	ldr	r0, [pc, #152]	; (8000e00 <main+0xf4>)
 8000d66:	f003 fa85 	bl	8004274 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   // TIM3 CH1 : DC motor PWM ch PA6
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4825      	ldr	r0, [pc, #148]	; (8000e04 <main+0xf8>)
 8000d6e:	f003 f96d 	bl	800404c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // TIM3 CH2 : DC motor PWM ch PA7
 8000d72:	2104      	movs	r1, #4
 8000d74:	4823      	ldr	r0, [pc, #140]	; (8000e04 <main+0xf8>)
 8000d76:	f003 f969 	bl	800404c <HAL_TIM_PWM_Start>

  i2c_lcd_init();
 8000d7a:	f7ff ff3b 	bl	8000bf4 <i2c_lcd_init>
  printf("Hello---STM32!!!\n");
 8000d7e:	4822      	ldr	r0, [pc, #136]	; (8000e08 <main+0xfc>)
 8000d80:	f009 f9a0 	bl	800a0c4 <puts>
//  stepmotor_main_test();
//  buzzer_main();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d84:	f005 fda0 	bl	80068c8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000d88:	4820      	ldr	r0, [pc, #128]	; (8000e0c <main+0x100>)
 8000d8a:	f005 fe94 	bl	8006ab6 <osMutexNew>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <main+0x104>)
 8000d92:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d94:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <main+0x108>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	481f      	ldr	r0, [pc, #124]	; (8000e18 <main+0x10c>)
 8000d9a:	f005 fddf 	bl	800695c <osThreadNew>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <main+0x110>)
 8000da2:	6013      	str	r3, [r2, #0]

  /* creation of AutoModeTask */
  AutoModeTaskHandle = osThreadNew(StartAutoModeTask, NULL, &AutoModeTask_attributes);
 8000da4:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <main+0x114>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	481e      	ldr	r0, [pc, #120]	; (8000e24 <main+0x118>)
 8000daa:	f005 fdd7 	bl	800695c <osThreadNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <main+0x11c>)
 8000db2:	6013      	str	r3, [r2, #0]

  /* creation of ManualModeTask */
  ManualModeTaskHandle = osThreadNew(StartManualModeTask, NULL, &ManualModeTask_attributes);
 8000db4:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <main+0x120>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	481d      	ldr	r0, [pc, #116]	; (8000e30 <main+0x124>)
 8000dba:	f005 fdcf 	bl	800695c <osThreadNew>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <main+0x128>)
 8000dc2:	6013      	str	r3, [r2, #0]

  /* creation of MonitorTask */
  MonitorTaskHandle = osThreadNew(StartMonitorTask, NULL, &MonitorTask_attributes);
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <main+0x12c>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	481c      	ldr	r0, [pc, #112]	; (8000e3c <main+0x130>)
 8000dca:	f005 fdc7 	bl	800695c <osThreadNew>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <main+0x134>)
 8000dd2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
	move_cursor(0,0);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff ff3a 	bl	8000c50 <move_cursor>
	lcd_string("Manul Mode");
 8000ddc:	4819      	ldr	r0, [pc, #100]	; (8000e44 <main+0x138>)
 8000dde:	f7ff ff22 	bl	8000c26 <lcd_string>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000de2:	f005 fd95 	bl	8006910 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <main+0xda>
 8000de8:	200007d4 	.word	0x200007d4
 8000dec:	200006fc 	.word	0x200006fc
 8000df0:	2000067c 	.word	0x2000067c
 8000df4:	20000860 	.word	0x20000860
 8000df8:	2000067d 	.word	0x2000067d
 8000dfc:	2000081c 	.word	0x2000081c
 8000e00:	20000744 	.word	0x20000744
 8000e04:	2000078c 	.word	0x2000078c
 8000e08:	0800aeec 	.word	0x0800aeec
 8000e0c:	0800afb4 	.word	0x0800afb4
 8000e10:	200008b4 	.word	0x200008b4
 8000e14:	0800af24 	.word	0x0800af24
 8000e18:	08001541 	.word	0x08001541
 8000e1c:	200008a4 	.word	0x200008a4
 8000e20:	0800af48 	.word	0x0800af48
 8000e24:	08001551 	.word	0x08001551
 8000e28:	200008a8 	.word	0x200008a8
 8000e2c:	0800af6c 	.word	0x0800af6c
 8000e30:	08001565 	.word	0x08001565
 8000e34:	200008ac 	.word	0x200008ac
 8000e38:	0800af90 	.word	0x0800af90
 8000e3c:	08001579 	.word	0x08001579
 8000e40:	200008b0 	.word	0x200008b0
 8000e44:	0800af00 	.word	0x0800af00

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f009 f811 	bl	8009e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eac:	2310      	movs	r3, #16
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ec0:	2354      	movs	r3, #84	; 0x54
 8000ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f107 0320 	add.w	r3, r7, #32
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 ffcb 	bl	8002e6c <HAL_RCC_OscConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000edc:	f000 fb84 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2102      	movs	r1, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 fa2d 	bl	800335c <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f08:	f000 fb6e 	bl	80015e8 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3750      	adds	r7, #80	; 0x50
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2105      	movs	r1, #5
 8000f24:	201a      	movs	r0, #26
 8000f26:	f001 f8cb 	bl	80020c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f2a:	201a      	movs	r0, #26
 8000f2c:	f001 f8e4 	bl	80020f8 <HAL_NVIC_EnableIRQ>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <MX_I2C1_Init+0x54>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_I2C1_Init+0x58>)
 8000f42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f72:	f001 fb2f 	bl	80025d4 <HAL_I2C_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f7c:	f000 fb34 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000688 	.word	0x20000688
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	000186a0 	.word	0x000186a0

08000f90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <MX_RTC_Init+0xac>)
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <MX_RTC_Init+0xb0>)
 8000fac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_RTC_Init+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_RTC_Init+0xac>)
 8000fb6:	227f      	movs	r2, #127	; 0x7f
 8000fb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_RTC_Init+0xac>)
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_RTC_Init+0xac>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_RTC_Init+0xac>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_RTC_Init+0xac>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <MX_RTC_Init+0xac>)
 8000fd4:	f002 fd04 	bl	80039e0 <HAL_RTC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000fde:	f000 fb03 	bl	80015e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000fe2:	2309      	movs	r3, #9
 8000fe4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x31;
 8000fe6:	2331      	movs	r3, #49	; 0x31
 8000fe8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480f      	ldr	r0, [pc, #60]	; (800103c <MX_RTC_Init+0xac>)
 8000ffe:	f002 fd65 	bl	8003acc <HAL_RTC_SetTime>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001008:	f000 faee 	bl	80015e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800100c:	2302      	movs	r3, #2
 800100e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8001010:	2308      	movs	r3, #8
 8001012:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 8001014:	2330      	movs	r3, #48	; 0x30
 8001016:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001018:	2322      	movs	r3, #34	; 0x22
 800101a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_RTC_Init+0xac>)
 8001024:	f002 fdec 	bl	8003c00 <HAL_RTC_SetDate>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800102e:	f000 fadb 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200006dc 	.word	0x200006dc
 8001040:	40002800 	.word	0x40002800

08001044 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <MX_TIM1_Init+0x110>)
 8001070:	4a39      	ldr	r2, [pc, #228]	; (8001158 <MX_TIM1_Init+0x114>)
 8001072:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <MX_TIM1_Init+0x110>)
 8001076:	2253      	movs	r2, #83	; 0x53
 8001078:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <MX_TIM1_Init+0x110>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <MX_TIM1_Init+0x110>)
 8001082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001086:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <MX_TIM1_Init+0x110>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_TIM1_Init+0x110>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <MX_TIM1_Init+0x110>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800109a:	482e      	ldr	r0, [pc, #184]	; (8001154 <MX_TIM1_Init+0x110>)
 800109c:	f002 fed5 	bl	8003e4a <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80010a6:	f000 fa9f 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4827      	ldr	r0, [pc, #156]	; (8001154 <MX_TIM1_Init+0x110>)
 80010b8:	f003 fdb4 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010c2:	f000 fa91 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80010c6:	4823      	ldr	r0, [pc, #140]	; (8001154 <MX_TIM1_Init+0x110>)
 80010c8:	f003 f9d2 	bl	8004470 <HAL_TIM_IC_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80010d2:	f000 fa89 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_TIM1_Init+0x110>)
 80010e6:	f004 fab1 	bl	800564c <HAL_TIMEx_MasterConfigSynchronization>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80010f0:	f000 fa7a 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010f4:	230a      	movs	r3, #10
 80010f6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	4812      	ldr	r0, [pc, #72]	; (8001154 <MX_TIM1_Init+0x110>)
 800110c:	f003 fc2c 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001116:	f000 fa67 	bl	80015e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2204      	movs	r2, #4
 8001122:	4619      	mov	r1, r3
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <MX_TIM1_Init+0x110>)
 8001126:	f003 fc1f 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001130:	f000 fa5a 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	220c      	movs	r2, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_TIM1_Init+0x110>)
 800113c:	f003 fc14 	bl	8004968 <HAL_TIM_IC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001146:	f000 fa4f 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200006fc 	.word	0x200006fc
 8001158:	40010000 	.word	0x40010000

0800115c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <MX_TIM2_Init+0xe8>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_TIM2_Init+0xe8>)
 8001196:	f240 628f 	movw	r2, #1679	; 0x68f
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <MX_TIM2_Init+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_TIM2_Init+0xe8>)
 80011a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_TIM2_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <MX_TIM2_Init+0xe8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4823      	ldr	r0, [pc, #140]	; (8001244 <MX_TIM2_Init+0xe8>)
 80011b8:	f002 fe47 	bl	8003e4a <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011c2:	f000 fa11 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d0:	4619      	mov	r1, r3
 80011d2:	481c      	ldr	r0, [pc, #112]	; (8001244 <MX_TIM2_Init+0xe8>)
 80011d4:	f003 fd26 	bl	8004c24 <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011de:	f000 fa03 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e2:	4818      	ldr	r0, [pc, #96]	; (8001244 <MX_TIM2_Init+0xe8>)
 80011e4:	f002 fee2 	bl	8003fac <HAL_TIM_PWM_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011ee:	f000 f9fb 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	4619      	mov	r1, r3
 8001200:	4810      	ldr	r0, [pc, #64]	; (8001244 <MX_TIM2_Init+0xe8>)
 8001202:	f004 fa23 	bl	800564c <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800120c:	f000 f9ec 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001210:	2360      	movs	r3, #96	; 0x60
 8001212:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2208      	movs	r2, #8
 8001224:	4619      	mov	r1, r3
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_TIM2_Init+0xe8>)
 8001228:	f003 fc3a 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001232:	f000 f9d9 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <MX_TIM2_Init+0xe8>)
 8001238:	f000 fb36 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 800123c:	bf00      	nop
 800123e:	3738      	adds	r7, #56	; 0x38
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000744 	.word	0x20000744

08001248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <MX_TIM3_Init+0xc0>)
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <MX_TIM3_Init+0xc4>)
 800126e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <MX_TIM3_Init+0xc0>)
 8001272:	f240 3247 	movw	r2, #839	; 0x347
 8001276:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <MX_TIM3_Init+0xc0>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <MX_TIM3_Init+0xc0>)
 8001280:	2263      	movs	r2, #99	; 0x63
 8001282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <MX_TIM3_Init+0xc0>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_TIM3_Init+0xc0>)
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001290:	481d      	ldr	r0, [pc, #116]	; (8001308 <MX_TIM3_Init+0xc0>)
 8001292:	f002 fe8b 	bl	8003fac <HAL_TIM_PWM_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800129c:	f000 f9a4 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	4619      	mov	r1, r3
 80012ae:	4816      	ldr	r0, [pc, #88]	; (8001308 <MX_TIM3_Init+0xc0>)
 80012b0:	f004 f9cc 	bl	800564c <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012ba:	f000 f995 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012be:	2360      	movs	r3, #96	; 0x60
 80012c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 80012c2:	2345      	movs	r3, #69	; 0x45
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80012ca:	2304      	movs	r3, #4
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_TIM3_Init+0xc0>)
 80012d6:	f003 fbe3 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80012e0:	f000 f982 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2204      	movs	r2, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_TIM3_Init+0xc0>)
 80012ec:	f003 fbd8 	bl	8004aa0 <HAL_TIM_PWM_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012f6:	f000 f977 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <MX_TIM3_Init+0xc0>)
 80012fc:	f000 fad4 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000078c 	.word	0x2000078c
 800130c:	40000400 	.word	0x40000400

08001310 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_TIM11_Init+0x40>)
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <MX_TIM11_Init+0x44>)
 8001318:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_TIM11_Init+0x40>)
 800131c:	2253      	movs	r2, #83	; 0x53
 800131e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_TIM11_Init+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_TIM11_Init+0x40>)
 8001328:	f242 720f 	movw	r2, #9999	; 0x270f
 800132c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_TIM11_Init+0x40>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_TIM11_Init+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_TIM11_Init+0x40>)
 800133c:	f002 fd85 	bl	8003e4a <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001346:	f000 f94f 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200007d4 	.word	0x200007d4
 8001354:	40014800 	.word	0x40014800

08001358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_USART1_UART_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001364:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001390:	f004 f9de 	bl	8005750 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800139a:	f000 f925 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000081c 	.word	0x2000081c
 80013a8:	40011000 	.word	0x40011000

080013ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_USART2_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f004 f9b4 	bl	8005750 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 f8fb 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000860 	.word	0x20000860
 80013fc:	40004400 	.word	0x40004400

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <MX_GPIO_Init+0x130>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a44      	ldr	r2, [pc, #272]	; (8001530 <MX_GPIO_Init+0x130>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b42      	ldr	r3, [pc, #264]	; (8001530 <MX_GPIO_Init+0x130>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <MX_GPIO_Init+0x130>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <MX_GPIO_Init+0x130>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <MX_GPIO_Init+0x130>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <MX_GPIO_Init+0x130>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a36      	ldr	r2, [pc, #216]	; (8001530 <MX_GPIO_Init+0x130>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <MX_GPIO_Init+0x130>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_GPIO_Init+0x130>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a2f      	ldr	r2, [pc, #188]	; (8001530 <MX_GPIO_Init+0x130>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <MX_GPIO_Init+0x130>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RIGHT_TRIG_Pin|LEFT_TRIG_Pin|CENTER_TRIG_Pin|IN1_Pin
 8001486:	2200      	movs	r2, #0
 8001488:	f242 31f0 	movw	r1, #9200	; 0x23f0
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <MX_GPIO_Init+0x134>)
 800148e:	f001 f86f 	bl	8002570 <HAL_GPIO_WritePin>
                          |IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|GPIO_PIN_2|LED3_Pin
 8001492:	2200      	movs	r2, #0
 8001494:	21ff      	movs	r1, #255	; 0xff
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <MX_GPIO_Init+0x138>)
 8001498:	f001 f86a 	bl	8002570 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RIGHT_TRIG_Pin LEFT_TRIG_Pin CENTER_TRIG_Pin IN1_Pin
                           IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = RIGHT_TRIG_Pin|LEFT_TRIG_Pin|CENTER_TRIG_Pin|IN1_Pin
 800149c:	f242 33f0 	movw	r3, #9200	; 0x23f0
 80014a0:	617b      	str	r3, [r7, #20]
                          |IN2_Pin|IN3_Pin|IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	481f      	ldr	r0, [pc, #124]	; (8001534 <MX_GPIO_Init+0x134>)
 80014b6:	f000 febf 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80014ba:	230f      	movs	r3, #15
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4819      	ldr	r0, [pc, #100]	; (8001534 <MX_GPIO_Init+0x134>)
 80014ce:	f000 feb3 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014d2:	2303      	movs	r3, #3
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	4815      	ldr	r0, [pc, #84]	; (800153c <MX_GPIO_Init+0x13c>)
 80014e8:	f000 fea6 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin PB2 LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|GPIO_PIN_2|LED3_Pin
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_GPIO_Init+0x138>)
 8001504:	f000 fe98 	bl	8002238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2105      	movs	r1, #5
 800150c:	2006      	movs	r0, #6
 800150e:	f000 fdd7 	bl	80020c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001512:	2006      	movs	r0, #6
 8001514:	f000 fdf0 	bl	80020f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2105      	movs	r1, #5
 800151c:	2007      	movs	r0, #7
 800151e:	f000 fdcf 	bl	80020c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001522:	2007      	movs	r0, #7
 8001524:	f000 fde8 	bl	80020f8 <HAL_NVIC_EnableIRQ>

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020400 	.word	0x40020400
 800153c:	40020000 	.word	0x40020000

08001540 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001548:	2001      	movs	r0, #1
 800154a:	f005 fa99 	bl	8006a80 <osDelay>
 800154e:	e7fb      	b.n	8001548 <StartDefaultTask+0x8>

08001550 <StartAutoModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAutoModeTask */
void StartAutoModeTask(void *argument)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAutoModeTask */
  /* Infinite loop */
  for(;;)
  {
	auto_drive();
 8001558:	f7ff f930 	bl	80007bc <auto_drive>
    osDelay(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f005 fa8f 	bl	8006a80 <osDelay>
	auto_drive();
 8001562:	e7f9      	b.n	8001558 <StartAutoModeTask+0x8>

08001564 <StartManualModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManualModeTask */
void StartManualModeTask(void *argument)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManualModeTask */
  /* Infinite loop */
  for(;;)
  {
	manual_mode_run();
 800156c:	f7ff f92e 	bl	80007cc <manual_mode_run>
    osDelay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f005 fa85 	bl	8006a80 <osDelay>
  {
 8001576:	e7f9      	b.n	800156c <StartManualModeTask+0x8>

08001578 <StartMonitorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMonitorTask */
void StartMonitorTask(void *argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMonitorTask */
  /* Infinite loop */
  for(;;)
  {
		mode_check();         // button1 check
 8001580:	f7ff f8d4 	bl	800072c <mode_check>
		osDelay(1);
 8001584:	2001      	movs	r0, #1
 8001586:	f005 fa7b 	bl	8006a80 <osDelay>
		mode_check();         // button1 check
 800158a:	e7f9      	b.n	8001580 <StartMonitorTask+0x8>

0800158c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM11)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10e      	bne.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		TIM11_10ms_counter++;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015a6:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80015b0:	6013      	str	r3, [r2, #0]
		TIM11_10ms_servomotor_counter++;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015ba:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x3e>
    HAL_IncTick();
 80015c6:	f000 fc7f 	bl	8001ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40014800 	.word	0x40014800
 80015d8:	200008b8 	.word	0x200008b8
 80015dc:	200008bc 	.word	0x200008bc
 80015e0:	200008c0 	.word	0x200008c0
 80015e4:	40014400 	.word	0x40014400

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_MspInit+0x54>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_MspInit+0x54>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_MspInit+0x54>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_MspInit+0x54>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_MspInit+0x54>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_MspInit+0x54>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f000 fd41 	bl	80020c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_I2C_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12c      	bne.n	80016c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800168a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001690:	2312      	movs	r3, #18
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800169c:	2304      	movs	r3, #4
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	480c      	ldr	r0, [pc, #48]	; (80016d8 <HAL_I2C_MspInit+0x8c>)
 80016a8:	f000 fdc6 	bl	8002238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 80016b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40005400 	.word	0x40005400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020400 	.word	0x40020400

080016dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_RTC_MspInit+0x50>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d111      	bne.n	8001724 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001700:	2302      	movs	r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001708:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f002 f876 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800171a:	f7ff ff65 	bl	80015e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_RTC_MspInit+0x54>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40002800 	.word	0x40002800
 8001730:	42470e3c 	.word	0x42470e3c

08001734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	; 0x30
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <HAL_TIM_Base_MspInit+0x114>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d145      	bne.n	80017e2 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6453      	str	r3, [r2, #68]	; 0x44
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	4b35      	ldr	r3, [pc, #212]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a34      	ldr	r2, [pc, #208]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_ECHO_Pin|CENTER_ECHO_Pin|RIGHT_ECHO_Pin;
 800178e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4829      	ldr	r0, [pc, #164]	; (8001850 <HAL_TIM_Base_MspInit+0x11c>)
 80017ac:	f000 fd44 	bl	8002238 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2105      	movs	r1, #5
 80017b4:	2018      	movs	r0, #24
 80017b6:	f000 fc83 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017ba:	2018      	movs	r0, #24
 80017bc:	f000 fc9c 	bl	80020f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	210f      	movs	r1, #15
 80017c4:	2019      	movs	r0, #25
 80017c6:	f000 fc7b 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017ca:	2019      	movs	r0, #25
 80017cc:	f000 fc94 	bl	80020f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	201b      	movs	r0, #27
 80017d6:	f000 fc73 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017da:	201b      	movs	r0, #27
 80017dc:	f000 fc8c 	bl	80020f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80017e0:	e02e      	b.n	8001840 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ea:	d116      	bne.n	800181a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a15      	ldr	r2, [pc, #84]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2105      	movs	r1, #5
 800180c:	201c      	movs	r0, #28
 800180e:	f000 fc57 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001812:	201c      	movs	r0, #28
 8001814:	f000 fc70 	bl	80020f8 <HAL_NVIC_EnableIRQ>
}
 8001818:	e012      	b.n	8001840 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_TIM_Base_MspInit+0x120>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d10d      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 800182e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001832:	6453      	str	r3, [r2, #68]	; 0x44
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_TIM_Base_MspInit+0x118>)
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	bf00      	nop
 8001842:	3730      	adds	r7, #48	; 0x30
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010000 	.word	0x40010000
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	40014800 	.word	0x40014800

08001858 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_TIM_PWM_MspInit+0x48>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d115      	bne.n	8001896 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_TIM_PWM_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	201d      	movs	r0, #29
 800188c:	f000 fc18 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001890:	201d      	movs	r0, #29
 8001892:	f000 fc31 	bl	80020f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40000400 	.word	0x40000400
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c8:	d11f      	bne.n	800190a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_TIM_MspPostInit+0xb0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <HAL_TIM_MspPostInit+0xb0>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_TIM_MspPostInit+0xb0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f8:	2301      	movs	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4816      	ldr	r0, [pc, #88]	; (800195c <HAL_TIM_MspPostInit+0xb4>)
 8001904:	f000 fc98 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001908:	e022      	b.n	8001950 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a14      	ldr	r2, [pc, #80]	; (8001960 <HAL_TIM_MspPostInit+0xb8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d11d      	bne.n	8001950 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_TIM_MspPostInit+0xb0>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_TIM_MspPostInit+0xb0>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_TIM_MspPostInit+0xb0>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001930:	23c0      	movs	r3, #192	; 0xc0
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001940:	2302      	movs	r3, #2
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <HAL_TIM_MspPostInit+0xbc>)
 800194c:	f000 fc74 	bl	8002238 <HAL_GPIO_Init>
}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40020400 	.word	0x40020400
 8001960:	40000400 	.word	0x40000400
 8001964:	40020000 	.word	0x40020000

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3a      	ldr	r2, [pc, #232]	; (8001a70 <HAL_UART_MspInit+0x108>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d135      	bne.n	80019f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a38      	ldr	r2, [pc, #224]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80019c2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d4:	2307      	movs	r3, #7
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	4826      	ldr	r0, [pc, #152]	; (8001a78 <HAL_UART_MspInit+0x110>)
 80019e0:	f000 fc2a 	bl	8002238 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2105      	movs	r1, #5
 80019e8:	2025      	movs	r0, #37	; 0x25
 80019ea:	f000 fb69 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ee:	2025      	movs	r0, #37	; 0x25
 80019f0:	f000 fb82 	bl	80020f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f4:	e038      	b.n	8001a68 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <HAL_UART_MspInit+0x114>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d133      	bne.n	8001a68 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 8001a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a10:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_UART_MspInit+0x10c>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a38:	230c      	movs	r3, #12
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a48:	2307      	movs	r3, #7
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4809      	ldr	r0, [pc, #36]	; (8001a78 <HAL_UART_MspInit+0x110>)
 8001a54:	f000 fbf0 	bl	8002238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2105      	movs	r1, #5
 8001a5c:	2026      	movs	r0, #38	; 0x26
 8001a5e:	f000 fb2f 	bl	80020c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a62:	2026      	movs	r0, #38	; 0x26
 8001a64:	f000 fb48 	bl	80020f8 <HAL_NVIC_EnableIRQ>
}
 8001a68:	bf00      	nop
 8001a6a:	3730      	adds	r7, #48	; 0x30
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40011000 	.word	0x40011000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40004400 	.word	0x40004400

08001a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_InitTick+0xd0>)
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	4a2d      	ldr	r2, [pc, #180]	; (8001b50 <HAL_InitTick+0xd0>)
 8001a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_InitTick+0xd0>)
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aac:	f107 020c 	add.w	r2, r7, #12
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 fe70 	bl	800379c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001abc:	f001 fe5a 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8001ac0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_InitTick+0xd4>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	3b01      	subs	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_InitTick+0xd8>)
 8001ad2:	4a22      	ldr	r2, [pc, #136]	; (8001b5c <HAL_InitTick+0xdc>)
 8001ad4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_InitTick+0xd8>)
 8001ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001adc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_InitTick+0xd8>)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_InitTick+0xd8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_InitTick+0xd8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_InitTick+0xd8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001af6:	4818      	ldr	r0, [pc, #96]	; (8001b58 <HAL_InitTick+0xd8>)
 8001af8:	f002 f9a7 	bl	8003e4a <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11b      	bne.n	8001b42 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001b0a:	4813      	ldr	r0, [pc, #76]	; (8001b58 <HAL_InitTick+0xd8>)
 8001b0c:	f002 f9ec 	bl	8003ee8 <HAL_TIM_Base_Start_IT>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d111      	bne.n	8001b42 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b1e:	2019      	movs	r0, #25
 8001b20:	f000 faea 	bl	80020f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d808      	bhi.n	8001b3c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	2019      	movs	r0, #25
 8001b30:	f000 fac6 	bl	80020c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_InitTick+0xe0>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e002      	b.n	8001b42 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3730      	adds	r7, #48	; 0x30
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	431bde83 	.word	0x431bde83
 8001b58:	200008c4 	.word	0x200008c4
 8001b5c:	40014400 	.word	0x40014400
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <NMI_Handler+0x4>

08001b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <MemManage_Handler+0x4>

08001b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f000 fd05 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f000 fcfe 	bl	80025a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bb2:	f002 fdd1 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200006fc 	.word	0x200006fc

08001bc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001bc6:	f002 fdc7 	bl	8004758 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001bca:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001bcc:	f002 fdc4 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200006fc 	.word	0x200006fc
 8001bd8:	200008c4 	.word	0x200008c4

08001bdc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001be2:	f002 fdb9 	bl	8004758 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001be6:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001be8:	f002 fdb6 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200006fc 	.word	0x200006fc
 8001bf4:	200007d4 	.word	0x200007d4

08001bf8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <TIM1_CC_IRQHandler+0x10>)
 8001bfe:	f002 fdab 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200006fc 	.word	0x200006fc

08001c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM2_IRQHandler+0x10>)
 8001c12:	f002 fda1 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000744 	.word	0x20000744

08001c20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM3_IRQHandler+0x10>)
 8001c26:	f002 fd97 	bl	8004758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000078c 	.word	0x2000078c

08001c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <USART1_IRQHandler+0x10>)
 8001c3a:	f003 fe99 	bl	8005970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000081c 	.word	0x2000081c

08001c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <USART2_IRQHandler+0x10>)
 8001c4e:	f003 fe8f 	bl	8005970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000860 	.word	0x20000860

08001c5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e00a      	b.n	8001c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4601      	mov	r1, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	b2ca      	uxtb	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf0      	blt.n	8001c6e <_read+0x12>
	}

return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e009      	b.n	8001cbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fff1 	bl	8000c98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf1      	blt.n	8001ca8 <_write+0x12>
	}
	return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_close>:

int _close(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_isatty>:

int _isatty(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
	return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <_sbrk+0x5c>)
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <_sbrk+0x60>)
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_sbrk+0x64>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <_sbrk+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d207      	bcs.n	8001d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d68:	f007 ff58 	bl	8009c1c <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	220c      	movs	r2, #12
 8001d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
 8001d76:	e009      	b.n	8001d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <_sbrk+0x64>)
 8001d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20020000 	.word	0x20020000
 8001d98:	00000400 	.word	0x00000400
 8001d9c:	2000090c 	.word	0x2000090c
 8001da0:	20005340 	.word	0x20005340

08001da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <SystemInit+0x20>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <SystemInit+0x20>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <HAL_TIM_IC_CaptureCallback>:
// 한글로 주석을 달아도 깨지지 않는다.
int distance;   // 거리 즉정값을 저장 하는 변수
int ic_cpt_flag;   // rising edge/falling edge를 detect 했을때 check하는 flag
// rising edge/falling edge Interrupt 가 발생 되면 이곳으로 들어 온다.
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	static uint8_t is_first_capture=0;

	if (htim->Instance == TIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11d      	bne.n	8001e16 <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if (is_first_capture == 0)   // rising edge detect !!!
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d107      	bne.n	8001df2 <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);   // clear
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;   // rising edge를 만났다는 indicator를 set
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재 까지 count
			ic_cpt_flag=1;
		}
	}
}
 8001df0:	e011      	b.n	8001e16 <HAL_TIM_IC_CaptureCallback+0x4e>
		else if (is_first_capture == 1)  // falling edge detect !!!
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10d      	bne.n	8001e16 <HAL_TIM_IC_CaptureCallback+0x4e>
			is_first_capture=0;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재 까지 count
 8001e00:	2100      	movs	r1, #0
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f002 ffd6 	bl	8004db4 <HAL_TIM_ReadCapturedValue>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001e0e:	601a      	str	r2, [r3, #0]
			ic_cpt_flag=1;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_TIM_IC_CaptureCallback+0x64>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	20000918 	.word	0x20000918
 8001e28:	20000910 	.word	0x20000910
 8001e2c:	20000914 	.word	0x20000914

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e34:	480d      	ldr	r0, [pc, #52]	; (8001e6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e36:	490e      	ldr	r1, [pc, #56]	; (8001e70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e4c:	4c0b      	ldr	r4, [pc, #44]	; (8001e7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e5a:	f7ff ffa3 	bl	8001da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f007 ffd9 	bl	8009e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7fe ff53 	bl	8000d0c <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001e74:	0800b084 	.word	0x0800b084
  ldr r2, =_sbss
 8001e78:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001e7c:	20005340 	.word	0x20005340

08001e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC_IRQHandler>
	...

08001e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <HAL_Init+0x40>)
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_Init+0x40>)
 8001e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_Init+0x40>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eac:	2003      	movs	r0, #3
 8001eae:	f000 f8fc 	bl	80020aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f7ff fde4 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eb8:	f7ff fb9c 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	2000091c 	.word	0x2000091c

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	2000091c 	.word	0x2000091c

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff ffee 	bl	8001ef0 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffde 	bl	8001ef0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000010 	.word	0x20000010

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	; (8001fec <__NVIC_EnableIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff4c 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d2:	f7ff ff61 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 80020d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68b9      	ldr	r1, [r7, #8]
 80020dc:	6978      	ldr	r0, [r7, #20]
 80020de:	f7ff ffb1 	bl	8002044 <NVIC_EncodePriority>
 80020e2:	4602      	mov	r2, r0
 80020e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff80 	bl	8001ff0 <__NVIC_SetPriority>
}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff54 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002122:	f7ff fee5 	bl	8001ef0 <HAL_GetTick>
 8002126:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d008      	beq.n	8002146 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e052      	b.n	80021ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0216 	bic.w	r2, r2, #22
 8002154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_DMA_Abort+0x62>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0208 	bic.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002196:	e013      	b.n	80021c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002198:	f7ff feaa 	bl	8001ef0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d90c      	bls.n	80021c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e015      	b.n	80021ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e4      	bne.n	8002198 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	223f      	movs	r2, #63	; 0x3f
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00c      	b.n	800222c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e159      	b.n	8002508 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8148 	bne.w	8002502 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d005      	beq.n	800228a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	2b02      	cmp	r3, #2
 8002288:	d130      	bne.n	80022ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d017      	beq.n	8002328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d123      	bne.n	800237c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	69b9      	ldr	r1, [r7, #24]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a2 	beq.w	8002502 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	4a56      	ldr	r2, [pc, #344]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	; 0x44
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_GPIO_Init+0x2e8>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023da:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_GPIO_Init+0x2ec>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a49      	ldr	r2, [pc, #292]	; (8002528 <HAL_GPIO_Init+0x2f0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x202>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a48      	ldr	r2, [pc, #288]	; (800252c <HAL_GPIO_Init+0x2f4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x1fe>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a47      	ldr	r2, [pc, #284]	; (8002530 <HAL_GPIO_Init+0x2f8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x1fa>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a46      	ldr	r2, [pc, #280]	; (8002534 <HAL_GPIO_Init+0x2fc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x1f6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a45      	ldr	r2, [pc, #276]	; (8002538 <HAL_GPIO_Init+0x300>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x1f2>
 8002426:	2304      	movs	r3, #4
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x204>
 800242a:	2307      	movs	r3, #7
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x204>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x204>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x204>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x204>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_GPIO_Init+0x2ec>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b38      	ldr	r3, [pc, #224]	; (800253c <HAL_GPIO_Init+0x304>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247e:	4a2f      	ldr	r2, [pc, #188]	; (800253c <HAL_GPIO_Init+0x304>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_GPIO_Init+0x304>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a8:	4a24      	ldr	r2, [pc, #144]	; (800253c <HAL_GPIO_Init+0x304>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_GPIO_Init+0x304>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d2:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_GPIO_Init+0x304>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_GPIO_Init+0x304>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_GPIO_Init+0x304>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f aea2 	bls.w	8002254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40013800 	.word	0x40013800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	887b      	ldrh	r3, [r7, #2]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e001      	b.n	8002562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fb7a 	bl	8000cbc <HAL_GPIO_EXTI_Callback>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40013c00 	.word	0x40013c00

080025d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e12b      	b.n	800283e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff f826 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002638:	f001 f888 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 800263c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4a81      	ldr	r2, [pc, #516]	; (8002848 <HAL_I2C_Init+0x274>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d807      	bhi.n	8002658 <HAL_I2C_Init+0x84>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a80      	ldr	r2, [pc, #512]	; (800284c <HAL_I2C_Init+0x278>)
 800264c:	4293      	cmp	r3, r2
 800264e:	bf94      	ite	ls
 8002650:	2301      	movls	r3, #1
 8002652:	2300      	movhi	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	e006      	b.n	8002666 <HAL_I2C_Init+0x92>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a7d      	ldr	r2, [pc, #500]	; (8002850 <HAL_I2C_Init+0x27c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	bf94      	ite	ls
 8002660:	2301      	movls	r3, #1
 8002662:	2300      	movhi	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0e7      	b.n	800283e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a78      	ldr	r2, [pc, #480]	; (8002854 <HAL_I2C_Init+0x280>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0c9b      	lsrs	r3, r3, #18
 8002678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a6a      	ldr	r2, [pc, #424]	; (8002848 <HAL_I2C_Init+0x274>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d802      	bhi.n	80026a8 <HAL_I2C_Init+0xd4>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3301      	adds	r3, #1
 80026a6:	e009      	b.n	80026bc <HAL_I2C_Init+0xe8>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	4a69      	ldr	r2, [pc, #420]	; (8002858 <HAL_I2C_Init+0x284>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	3301      	adds	r3, #1
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	495c      	ldr	r1, [pc, #368]	; (8002848 <HAL_I2C_Init+0x274>)
 80026d8:	428b      	cmp	r3, r1
 80026da:	d819      	bhi.n	8002710 <HAL_I2C_Init+0x13c>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e59      	subs	r1, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ea:	1c59      	adds	r1, r3, #1
 80026ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026f0:	400b      	ands	r3, r1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_I2C_Init+0x138>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1e59      	subs	r1, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fbb1 f3f3 	udiv	r3, r1, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270a:	e051      	b.n	80027b0 <HAL_I2C_Init+0x1dc>
 800270c:	2304      	movs	r3, #4
 800270e:	e04f      	b.n	80027b0 <HAL_I2C_Init+0x1dc>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <HAL_I2C_Init+0x168>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e012      	b.n	8002762 <HAL_I2C_Init+0x18e>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	0099      	lsls	r1, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Init+0x196>
 8002766:	2301      	movs	r3, #1
 8002768:	e022      	b.n	80027b0 <HAL_I2C_Init+0x1dc>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10e      	bne.n	8002790 <HAL_I2C_Init+0x1bc>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e58      	subs	r0, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	440b      	add	r3, r1
 8002780:	fbb0 f3f3 	udiv	r3, r0, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278e:	e00f      	b.n	80027b0 <HAL_I2C_Init+0x1dc>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	0099      	lsls	r1, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	6809      	ldr	r1, [r1, #0]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6911      	ldr	r1, [r2, #16]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68d2      	ldr	r2, [r2, #12]
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	000186a0 	.word	0x000186a0
 800284c:	001e847f 	.word	0x001e847f
 8002850:	003d08ff 	.word	0x003d08ff
 8002854:	431bde83 	.word	0x431bde83
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	460b      	mov	r3, r1
 800286a:	817b      	strh	r3, [r7, #10]
 800286c:	4613      	mov	r3, r2
 800286e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff fb3e 	bl	8001ef0 <HAL_GetTick>
 8002874:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b20      	cmp	r3, #32
 8002880:	f040 80e0 	bne.w	8002a44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2319      	movs	r3, #25
 800288a:	2201      	movs	r2, #1
 800288c:	4970      	ldr	r1, [pc, #448]	; (8002a50 <HAL_I2C_Master_Transmit+0x1f4>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f964 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	e0d3      	b.n	8002a46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_I2C_Master_Transmit+0x50>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e0cc      	b.n	8002a46 <HAL_I2C_Master_Transmit+0x1ea>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d007      	beq.n	80028d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2221      	movs	r2, #33	; 0x21
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2210      	movs	r2, #16
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	893a      	ldrh	r2, [r7, #8]
 8002902:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a50      	ldr	r2, [pc, #320]	; (8002a54 <HAL_I2C_Master_Transmit+0x1f8>)
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002914:	8979      	ldrh	r1, [r7, #10]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f89c 	bl	8002a58 <I2C_MasterRequestWrite>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e08d      	b.n	8002a46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002940:	e066      	b.n	8002a10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	6a39      	ldr	r1, [r7, #32]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f9de 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b04      	cmp	r3, #4
 8002958:	d107      	bne.n	800296a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06b      	b.n	8002a46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	781a      	ldrb	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d11b      	bne.n	80029e4 <HAL_I2C_Master_Transmit+0x188>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d017      	beq.n	80029e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	6a39      	ldr	r1, [r7, #32]
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f9ce 	bl	8002d8a <I2C_WaitOnBTFFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00d      	beq.n	8002a10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d107      	bne.n	8002a0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e01a      	b.n	8002a46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d194      	bne.n	8002942 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	00100002 	.word	0x00100002
 8002a54:	ffff0000 	.word	0xffff0000

08002a58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	460b      	mov	r3, r1
 8002a66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d006      	beq.n	8002a82 <I2C_MasterRequestWrite+0x2a>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d003      	beq.n	8002a82 <I2C_MasterRequestWrite+0x2a>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a80:	d108      	bne.n	8002a94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e00b      	b.n	8002aac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	2b12      	cmp	r3, #18
 8002a9a:	d107      	bne.n	8002aac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f84f 	bl	8002b5c <I2C_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad2:	d103      	bne.n	8002adc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e035      	b.n	8002b4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae8:	d108      	bne.n	8002afc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aea:	897b      	ldrh	r3, [r7, #10]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002af8:	611a      	str	r2, [r3, #16]
 8002afa:	e01b      	b.n	8002b34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002afc:	897b      	ldrh	r3, [r7, #10]
 8002afe:	11db      	asrs	r3, r3, #7
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0306 	and.w	r3, r3, #6
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	f063 030f 	orn	r3, r3, #15
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <I2C_MasterRequestWrite+0xfc>)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f875 	bl	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e010      	b.n	8002b4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b2a:	897b      	ldrh	r3, [r7, #10]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4907      	ldr	r1, [pc, #28]	; (8002b58 <I2C_MasterRequestWrite+0x100>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f865 	bl	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	00010008 	.word	0x00010008
 8002b58:	00010002 	.word	0x00010002

08002b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b6c:	e025      	b.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d021      	beq.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7ff f9bb 	bl	8001ef0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d116      	bne.n	8002bba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0220 	orr.w	r2, r3, #32
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e023      	b.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10d      	bne.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	e00c      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4013      	ands	r3, r2
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d0b6      	beq.n	8002b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c18:	e051      	b.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c28:	d123      	bne.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e046      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d021      	beq.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7ff f939 	bl	8001ef0 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d116      	bne.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e020      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10c      	bne.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	e00b      	b.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d18d      	bne.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d14:	e02d      	b.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f878 	bl	8002e0c <I2C_IsAcknowledgeFailed>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e02d      	b.n	8002d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d021      	beq.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7ff f8df 	bl	8001ef0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d116      	bne.n	8002d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0220 	orr.w	r2, r3, #32
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e007      	b.n	8002d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b80      	cmp	r3, #128	; 0x80
 8002d7e:	d1ca      	bne.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d96:	e02d      	b.n	8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f837 	bl	8002e0c <I2C_IsAcknowledgeFailed>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e02d      	b.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d021      	beq.n	8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db0:	f7ff f89e 	bl	8001ef0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d302      	bcc.n	8002dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e007      	b.n	8002e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d1ca      	bne.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e22:	d11b      	bne.n	8002e5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e267      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d075      	beq.n	8002f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8a:	4b88      	ldr	r3, [pc, #544]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4b85      	ldr	r3, [pc, #532]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d112      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea2:	4b82      	ldr	r3, [pc, #520]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	4b7e      	ldr	r3, [pc, #504]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05b      	beq.n	8002f74 <HAL_RCC_OscConfig+0x108>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d157      	bne.n	8002f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e242      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x74>
 8002ed2:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a75      	ldr	r2, [pc, #468]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x98>
 8002eea:	4b70      	ldr	r3, [pc, #448]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6f      	ldr	r2, [pc, #444]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6c      	ldr	r2, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002f04:	4b69      	ldr	r3, [pc, #420]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a68      	ldr	r2, [pc, #416]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b66      	ldr	r3, [pc, #408]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe ffe4 	bl	8001ef0 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe ffe0 	bl	8001ef0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e207      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xc0>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe ffd0 	bl	8001ef0 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe ffcc 	bl	8001ef0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1f3      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b51      	ldr	r3, [pc, #324]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0xe8>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d063      	beq.n	800304a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f82:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9a:	4b44      	ldr	r3, [pc, #272]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b41      	ldr	r3, [pc, #260]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1c7      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4937      	ldr	r1, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e03a      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCC_OscConfig+0x244>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe ff85 	bl	8001ef0 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fea:	f7fe ff81 	bl	8001ef0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e1a8      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4925      	ldr	r1, [pc, #148]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCC_OscConfig+0x244>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe ff64 	bl	8001ef0 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302c:	f7fe ff60 	bl	8001ef0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e187      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d036      	beq.n	80030c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0x248>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe ff44 	bl	8001ef0 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306c:	f7fe ff40 	bl	8001ef0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e167      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x240>)
 8003080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x200>
 800308a:	e01b      	b.n	80030c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x248>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe ff2d 	bl	8001ef0 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	e00e      	b.n	80030b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309a:	f7fe ff29 	bl	8001ef0 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d907      	bls.n	80030b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e150      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	42470000 	.word	0x42470000
 80030b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ea      	bne.n	800309a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8097 	beq.w	8003200 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d6:	4b81      	ldr	r3, [pc, #516]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b7d      	ldr	r3, [pc, #500]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a7c      	ldr	r2, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
 80030f2:	4b7a      	ldr	r3, [pc, #488]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b77      	ldr	r3, [pc, #476]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d118      	bne.n	8003140 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310e:	4b74      	ldr	r3, [pc, #464]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a73      	ldr	r2, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800311a:	f7fe fee9 	bl	8001ef0 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7fe fee5 	bl	8001ef0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e10c      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x474>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x2ea>
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a63      	ldr	r2, [pc, #396]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	e01c      	b.n	8003190 <HAL_RCC_OscConfig+0x324>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x30c>
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a5e      	ldr	r2, [pc, #376]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	4b5c      	ldr	r3, [pc, #368]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6713      	str	r3, [r2, #112]	; 0x70
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0x324>
 8003178:	4b58      	ldr	r3, [pc, #352]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a57      	ldr	r2, [pc, #348]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	4b55      	ldr	r3, [pc, #340]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a54      	ldr	r2, [pc, #336]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800318a:	f023 0304 	bic.w	r3, r3, #4
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d015      	beq.n	80031c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003198:	f7fe feaa 	bl	8001ef0 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a0:	f7fe fea6 	bl	8001ef0 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0cb      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	4b49      	ldr	r3, [pc, #292]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0ee      	beq.n	80031a0 <HAL_RCC_OscConfig+0x334>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c4:	f7fe fe94 	bl	8001ef0 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe fe90 	bl	8001ef0 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0b5      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ee      	bne.n	80031cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f4:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4a38      	ldr	r2, [pc, #224]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80031fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a1 	beq.w	800334c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b08      	cmp	r3, #8
 8003214:	d05c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d141      	bne.n	80032a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe fe64 	bl	8001ef0 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322c:	f7fe fe60 	bl	8001ef0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e087      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	4b27      	ldr	r3, [pc, #156]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	3b01      	subs	r3, #1
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	491b      	ldr	r1, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fe39 	bl	8001ef0 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe fe35 	bl	8001ef0 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e05c      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x416>
 80032a0:	e054      	b.n	800334c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_RCC_OscConfig+0x478>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fe22 	bl	8001ef0 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe fe1e 	bl	8001ef0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e045      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_OscConfig+0x470>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x444>
 80032ce:	e03d      	b.n	800334c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e038      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40007000 	.word	0x40007000
 80032e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x4ec>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d028      	beq.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d121      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d11a      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800331e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800

0800335c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0cc      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d90c      	bls.n	8003398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b63      	ldr	r3, [pc, #396]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b8      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	494d      	ldr	r1, [pc, #308]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d044      	beq.n	800347c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d119      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d003      	beq.n	800341a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003416:	2b03      	cmp	r3, #3
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e067      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 0203 	bic.w	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4934      	ldr	r1, [pc, #208]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800344c:	f7fe fd50 	bl	8001ef0 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	e00a      	b.n	800346a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003454:	f7fe fd4c 	bl	8001ef0 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e04f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 020c 	and.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	429a      	cmp	r2, r3
 800347a:	d1eb      	bne.n	8003454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d20c      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e032      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4916      	ldr	r1, [pc, #88]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034e2:	f000 f821 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	490a      	ldr	r1, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	5ccb      	ldrb	r3, [r1, r3]
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fabc 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00
 8003518:	40023800 	.word	0x40023800
 800351c:	0800afc4 	.word	0x0800afc4
 8003520:	20000008 	.word	0x20000008
 8003524:	2000000c 	.word	0x2000000c

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b094      	sub	sp, #80	; 0x50
 800352e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
 8003534:	2300      	movs	r3, #0
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003538:	2300      	movs	r3, #0
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003540:	4b79      	ldr	r3, [pc, #484]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d00d      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x40>
 800354c:	2b08      	cmp	r3, #8
 800354e:	f200 80e1 	bhi.w	8003714 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x34>
 8003556:	2b04      	cmp	r3, #4
 8003558:	d003      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x3a>
 800355a:	e0db      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b73      	ldr	r3, [pc, #460]	; (800372c <HAL_RCC_GetSysClockFreq+0x204>)
 800355e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003560:	e0db      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003562:	4b73      	ldr	r3, [pc, #460]	; (8003730 <HAL_RCC_GetSysClockFreq+0x208>)
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003566:	e0d8      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003568:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003570:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003572:	4b6d      	ldr	r3, [pc, #436]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357e:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	2200      	movs	r2, #0
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
 8003588:	63fa      	str	r2, [r7, #60]	; 0x3c
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
 8003592:	2300      	movs	r3, #0
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
 8003596:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800359a:	4622      	mov	r2, r4
 800359c:	462b      	mov	r3, r5
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	0159      	lsls	r1, r3, #5
 80035a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ac:	0150      	lsls	r0, r2, #5
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4621      	mov	r1, r4
 80035b4:	1a51      	subs	r1, r2, r1
 80035b6:	6139      	str	r1, [r7, #16]
 80035b8:	4629      	mov	r1, r5
 80035ba:	eb63 0301 	sbc.w	r3, r3, r1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035cc:	4659      	mov	r1, fp
 80035ce:	018b      	lsls	r3, r1, #6
 80035d0:	4651      	mov	r1, sl
 80035d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035d6:	4651      	mov	r1, sl
 80035d8:	018a      	lsls	r2, r1, #6
 80035da:	4651      	mov	r1, sl
 80035dc:	ebb2 0801 	subs.w	r8, r2, r1
 80035e0:	4659      	mov	r1, fp
 80035e2:	eb63 0901 	sbc.w	r9, r3, r1
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035fa:	4690      	mov	r8, r2
 80035fc:	4699      	mov	r9, r3
 80035fe:	4623      	mov	r3, r4
 8003600:	eb18 0303 	adds.w	r3, r8, r3
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	462b      	mov	r3, r5
 8003608:	eb49 0303 	adc.w	r3, r9, r3
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800361a:	4629      	mov	r1, r5
 800361c:	024b      	lsls	r3, r1, #9
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003624:	4621      	mov	r1, r4
 8003626:	024a      	lsls	r2, r1, #9
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	2200      	movs	r2, #0
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
 8003632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003638:	f7fc fe22 	bl	8000280 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	e058      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b38      	ldr	r3, [pc, #224]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	2200      	movs	r2, #0
 800364e:	4618      	mov	r0, r3
 8003650:	4611      	mov	r1, r2
 8003652:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
 800365c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003660:	4642      	mov	r2, r8
 8003662:	464b      	mov	r3, r9
 8003664:	f04f 0000 	mov.w	r0, #0
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	0159      	lsls	r1, r3, #5
 800366e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003672:	0150      	lsls	r0, r2, #5
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4641      	mov	r1, r8
 800367a:	ebb2 0a01 	subs.w	sl, r2, r1
 800367e:	4649      	mov	r1, r9
 8003680:	eb63 0b01 	sbc.w	fp, r3, r1
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003690:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003694:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003698:	ebb2 040a 	subs.w	r4, r2, sl
 800369c:	eb63 050b 	sbc.w	r5, r3, fp
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	00eb      	lsls	r3, r5, #3
 80036aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ae:	00e2      	lsls	r2, r4, #3
 80036b0:	4614      	mov	r4, r2
 80036b2:	461d      	mov	r5, r3
 80036b4:	4643      	mov	r3, r8
 80036b6:	18e3      	adds	r3, r4, r3
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	464b      	mov	r3, r9
 80036bc:	eb45 0303 	adc.w	r3, r5, r3
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ce:	4629      	mov	r1, r5
 80036d0:	028b      	lsls	r3, r1, #10
 80036d2:	4621      	mov	r1, r4
 80036d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036d8:	4621      	mov	r1, r4
 80036da:	028a      	lsls	r2, r1, #10
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e2:	2200      	movs	r2, #0
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	61fa      	str	r2, [r7, #28]
 80036e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ec:	f7fc fdc8 	bl	8000280 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003712:	e002      	b.n	800371a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetSysClockFreq+0x204>)
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800371c:	4618      	mov	r0, r3
 800371e:	3750      	adds	r7, #80	; 0x50
 8003720:	46bd      	mov	sp, r7
 8003722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	00f42400 	.word	0x00f42400
 8003730:	007a1200 	.word	0x007a1200

08003734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_RCC_GetHCLKFreq+0x14>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000008 	.word	0x20000008

0800374c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003750:	f7ff fff0 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	0800afd4 	.word	0x0800afd4

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003778:	f7ff ffdc 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0b5b      	lsrs	r3, r3, #13
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	0800afd4 	.word	0x0800afd4

0800379c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	220f      	movs	r2, #15
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	08db      	lsrs	r3, r3, #3
 80037d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCC_GetClockConfig+0x60>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0207 	and.w	r2, r3, #7
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40023c00 	.word	0x40023c00

08003800 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d105      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003824:	2b00      	cmp	r3, #0
 8003826:	d038      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003828:	4b68      	ldr	r3, [pc, #416]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800382e:	f7fe fb5f 	bl	8001ef0 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003836:	f7fe fb5b 	bl	8001ef0 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0bd      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003848:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f0      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	071b      	lsls	r3, r3, #28
 8003866:	495a      	ldr	r1, [pc, #360]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800386e:	4b57      	ldr	r3, [pc, #348]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003874:	f7fe fb3c 	bl	8001ef0 <HAL_GetTick>
 8003878:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800387c:	f7fe fb38 	bl	8001ef0 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e09a      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800388e:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8083 	beq.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	4b48      	ldr	r3, [pc, #288]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4a47      	ldr	r2, [pc, #284]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b6:	6413      	str	r3, [r2, #64]	; 0x40
 80038b8:	4b45      	ldr	r3, [pc, #276]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038c4:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038d0:	f7fe fb0e 	bl	8001ef0 <HAL_GetTick>
 80038d4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038d8:	f7fe fb0a 	bl	8001ef0 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e06c      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038ea:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d02f      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	429a      	cmp	r2, r3
 8003912:	d028      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003914:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800391e:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003924:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800392a:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003930:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d114      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe fad8 	bl	8001ef0 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fe fad4 	bl	8001ef0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e034      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ee      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003972:	d10d      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003988:	4911      	ldr	r1, [pc, #68]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a0e      	ldr	r2, [pc, #56]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800399a:	6093      	str	r3, [r2, #8]
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	4909      	ldr	r1, [pc, #36]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7d1a      	ldrb	r2, [r3, #20]
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80039c0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	42470068 	.word	0x42470068
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40007000 	.word	0x40007000
 80039d8:	42470e40 	.word	0x42470e40
 80039dc:	424711e0 	.word	0x424711e0

080039e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e066      	b.n	8003ac4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7f5b      	ldrb	r3, [r3, #29]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fe68 	bl	80016dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	22ca      	movs	r2, #202	; 0xca
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2253      	movs	r2, #83	; 0x53
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f998 	bl	8003d58 <RTC_EnterInitMode>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d12c      	bne.n	8003a8c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a44:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6899      	ldr	r1, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68d2      	ldr	r2, [r2, #12]
 8003a6c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6919      	ldr	r1, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f99f 	bl	8003dc6 <RTC_ExitInitMode>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d113      	bne.n	8003aba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	22ff      	movs	r2, #255	; 0xff
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	7f1b      	ldrb	r3, [r3, #28]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RTC_SetTime+0x1c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e087      	b.n	8003bf8 <HAL_RTC_SetTime+0x12c>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2202      	movs	r2, #2
 8003af2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d126      	bne.n	8003b48 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f97c 	bl	8003e10 <RTC_ByteToBcd2>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 f975 	bl	8003e10 <RTC_ByteToBcd2>
 8003b26:	4603      	mov	r3, r0
 8003b28:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b2a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	789b      	ldrb	r3, [r3, #2]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 f96d 	bl	8003e10 <RTC_ByteToBcd2>
 8003b36:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b38:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	78db      	ldrb	r3, [r3, #3]
 8003b40:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e018      	b.n	8003b7a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003b68:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003b6e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	78db      	ldrb	r3, [r3, #3]
 8003b74:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	22ca      	movs	r2, #202	; 0xca
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2253      	movs	r2, #83	; 0x53
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f8e4 	bl	8003d58 <RTC_EnterInitMode>
 8003b90:	4603      	mov	r3, r0
 8003b92:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d120      	bne.n	8003bdc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003ba4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ba8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f8f7 	bl	8003dc6 <RTC_ExitInitMode>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	771a      	strb	r2, [r3, #28]

  return status;
 8003bf6:	7cfb      	ldrb	r3, [r7, #19]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd90      	pop	{r4, r7, pc}

08003c00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	7f1b      	ldrb	r3, [r3, #28]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_RTC_SetDate+0x1c>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e071      	b.n	8003d00 <HAL_RTC_SetDate+0x100>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2202      	movs	r2, #2
 8003c26:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <HAL_RTC_SetDate+0x4c>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	785b      	ldrb	r3, [r3, #1]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	785b      	ldrb	r3, [r3, #1]
 8003c3e:	f023 0310 	bic.w	r3, r3, #16
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	330a      	adds	r3, #10
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11c      	bne.n	8003c8c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	78db      	ldrb	r3, [r3, #3]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f8da 	bl	8003e10 <RTC_ByteToBcd2>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f8d3 	bl	8003e10 <RTC_ByteToBcd2>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c6e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	789b      	ldrb	r3, [r3, #2]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f8cb 	bl	8003e10 <RTC_ByteToBcd2>
 8003c7a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c7c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e00e      	b.n	8003caa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	78db      	ldrb	r3, [r3, #3]
 8003c90:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c98:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c9e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	22ca      	movs	r2, #202	; 0xca
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2253      	movs	r2, #83	; 0x53
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f84c 	bl	8003d58 <RTC_EnterInitMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cd8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f873 	bl	8003dc6 <RTC_ExitInitMode>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	771a      	strb	r2, [r3, #28]

  return status;
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd90      	pop	{r4, r7, pc}

08003d08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d24:	f7fe f8e4 	bl	8001ef0 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d2a:	e009      	b.n	8003d40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d2c:	f7fe f8e0 	bl	8001ef0 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3a:	d901      	bls.n	8003d40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e007      	b.n	8003d50 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0ee      	beq.n	8003d2c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d122      	bne.n	8003dbc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d86:	f7fe f8b3 	bl	8001ef0 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d8c:	e00c      	b.n	8003da8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d8e:	f7fe f8af 	bl	8001ef0 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d9c:	d904      	bls.n	8003da8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2204      	movs	r2, #4
 8003da2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <RTC_EnterInitMode+0x64>
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d1e8      	bne.n	8003d8e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ff89 	bl	8003d08 <HAL_RTC_WaitForSynchro>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003e1e:	e005      	b.n	8003e2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	3301      	adds	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	3b0a      	subs	r3, #10
 8003e2a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	2b09      	cmp	r3, #9
 8003e30:	d8f6      	bhi.n	8003e20 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b2db      	uxtb	r3, r3
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e041      	b.n	8003ee0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fd fc5f 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f000 fff5 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d001      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e044      	b.n	8003f8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d018      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x6c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2a:	d013      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x6c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_TIM_Base_Start_IT+0xb4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x6c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x6c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x6c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d111      	bne.n	8003f78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d010      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f76:	e007      	b.n	8003f88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40000400 	.word	0x40000400
 8003fa0:	40000800 	.word	0x40000800
 8003fa4:	40000c00 	.word	0x40000c00
 8003fa8:	40014000 	.word	0x40014000

08003fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e041      	b.n	8004042 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fc40 	bl	8001858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f000 ff44 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_TIM_PWM_Start+0x24>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e022      	b.n	80040b6 <HAL_TIM_PWM_Start+0x6a>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b04      	cmp	r3, #4
 8004074:	d109      	bne.n	800408a <HAL_TIM_PWM_Start+0x3e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	bf14      	ite	ne
 8004082:	2301      	movne	r3, #1
 8004084:	2300      	moveq	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	e015      	b.n	80040b6 <HAL_TIM_PWM_Start+0x6a>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d109      	bne.n	80040a4 <HAL_TIM_PWM_Start+0x58>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e008      	b.n	80040b6 <HAL_TIM_PWM_Start+0x6a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e068      	b.n	8004190 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start+0x82>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040cc:	e013      	b.n	80040f6 <HAL_TIM_PWM_Start+0xaa>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start+0x92>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	e00b      	b.n	80040f6 <HAL_TIM_PWM_Start+0xaa>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ec:	e003      	b.n	80040f6 <HAL_TIM_PWM_Start+0xaa>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	6839      	ldr	r1, [r7, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fa7e 	bl	8005600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a23      	ldr	r2, [pc, #140]	; (8004198 <HAL_TIM_PWM_Start+0x14c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d107      	bne.n	800411e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_TIM_PWM_Start+0x14c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_TIM_PWM_Start+0x10e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004130:	d013      	beq.n	800415a <HAL_TIM_PWM_Start+0x10e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a19      	ldr	r2, [pc, #100]	; (800419c <HAL_TIM_PWM_Start+0x150>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_TIM_PWM_Start+0x10e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <HAL_TIM_PWM_Start+0x154>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_TIM_PWM_Start+0x10e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_TIM_PWM_Start+0x158>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_TIM_PWM_Start+0x10e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <HAL_TIM_PWM_Start+0x15c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d111      	bne.n	800417e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b06      	cmp	r3, #6
 800416a:	d010      	beq.n	800418e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417c:	e007      	b.n	800418e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40010000 	.word	0x40010000
 800419c:	40000400 	.word	0x40000400
 80041a0:	40000800 	.word	0x40000800
 80041a4:	40000c00 	.word	0x40000c00
 80041a8:	40014000 	.word	0x40014000

080041ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 fa1e 	bl	8005600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a29      	ldr	r2, [pc, #164]	; (8004270 <HAL_TIM_PWM_Stop+0xc4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d117      	bne.n	80041fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80041d8:	4013      	ands	r3, r2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <HAL_TIM_PWM_Stop+0x52>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	f240 4344 	movw	r3, #1092	; 0x444
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <HAL_TIM_PWM_Stop+0x52>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6a1a      	ldr	r2, [r3, #32]
 8004204:	f241 1311 	movw	r3, #4369	; 0x1111
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10f      	bne.n	800422e <HAL_TIM_PWM_Stop+0x82>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6a1a      	ldr	r2, [r3, #32]
 8004214:	f240 4344 	movw	r3, #1092	; 0x444
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <HAL_TIM_PWM_Stop+0x82>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Stop+0x92>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800423c:	e013      	b.n	8004266 <HAL_TIM_PWM_Stop+0xba>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Stop+0xa2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424c:	e00b      	b.n	8004266 <HAL_TIM_PWM_Stop+0xba>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Stop+0xb2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800425c:	e003      	b.n	8004266 <HAL_TIM_PWM_Stop+0xba>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40010000 	.word	0x40010000

08004274 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_TIM_PWM_Start_IT+0x28>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	bf14      	ite	ne
 8004294:	2301      	movne	r3, #1
 8004296:	2300      	moveq	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e022      	b.n	80042e2 <HAL_TIM_PWM_Start_IT+0x6e>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d109      	bne.n	80042b6 <HAL_TIM_PWM_Start_IT+0x42>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e015      	b.n	80042e2 <HAL_TIM_PWM_Start_IT+0x6e>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d109      	bne.n	80042d0 <HAL_TIM_PWM_Start_IT+0x5c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e008      	b.n	80042e2 <HAL_TIM_PWM_Start_IT+0x6e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0b3      	b.n	8004452 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start_IT+0x86>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f8:	e013      	b.n	8004322 <HAL_TIM_PWM_Start_IT+0xae>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Start_IT+0x96>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004308:	e00b      	b.n	8004322 <HAL_TIM_PWM_Start_IT+0xae>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Start_IT+0xa6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004318:	e003      	b.n	8004322 <HAL_TIM_PWM_Start_IT+0xae>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b0c      	cmp	r3, #12
 8004326:	d841      	bhi.n	80043ac <HAL_TIM_PWM_Start_IT+0x138>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <HAL_TIM_PWM_Start_IT+0xbc>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004365 	.word	0x08004365
 8004334:	080043ad 	.word	0x080043ad
 8004338:	080043ad 	.word	0x080043ad
 800433c:	080043ad 	.word	0x080043ad
 8004340:	08004377 	.word	0x08004377
 8004344:	080043ad 	.word	0x080043ad
 8004348:	080043ad 	.word	0x080043ad
 800434c:	080043ad 	.word	0x080043ad
 8004350:	08004389 	.word	0x08004389
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043ad 	.word	0x080043ad
 800435c:	080043ad 	.word	0x080043ad
 8004360:	0800439b 	.word	0x0800439b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0202 	orr.w	r2, r2, #2
 8004372:	60da      	str	r2, [r3, #12]
      break;
 8004374:	e01d      	b.n	80043b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0204 	orr.w	r2, r2, #4
 8004384:	60da      	str	r2, [r3, #12]
      break;
 8004386:	e014      	b.n	80043b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0208 	orr.w	r2, r2, #8
 8004396:	60da      	str	r2, [r3, #12]
      break;
 8004398:	e00b      	b.n	80043b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0210 	orr.w	r2, r2, #16
 80043a8:	60da      	str	r2, [r3, #12]
      break;
 80043aa:	e002      	b.n	80043b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      break;
 80043b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d14b      	bne.n	8004450 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2201      	movs	r2, #1
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 f91d 	bl	8005600 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a24      	ldr	r2, [pc, #144]	; (800445c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1d      	ldr	r2, [pc, #116]	; (800445c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <HAL_TIM_PWM_Start_IT+0x1a8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f2:	d013      	beq.n	800441c <HAL_TIM_PWM_Start_IT+0x1a8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_TIM_PWM_Start_IT+0x1a8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <HAL_TIM_PWM_Start_IT+0x1a8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_TIM_PWM_Start_IT+0x1a8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b06      	cmp	r3, #6
 800442c:	d010      	beq.n	8004450 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	e007      	b.n	8004450 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004450:	7bfb      	ldrb	r3, [r7, #15]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000

08004470 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e041      	b.n	8004506 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f839 	bl	800450e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f000 fce2 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d104      	bne.n	8004542 <HAL_TIM_IC_Start_IT+0x1e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800453e:	b2db      	uxtb	r3, r3
 8004540:	e013      	b.n	800456a <HAL_TIM_IC_Start_IT+0x46>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d104      	bne.n	8004552 <HAL_TIM_IC_Start_IT+0x2e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e00b      	b.n	800456a <HAL_TIM_IC_Start_IT+0x46>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d104      	bne.n	8004562 <HAL_TIM_IC_Start_IT+0x3e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800455e:	b2db      	uxtb	r3, r3
 8004560:	e003      	b.n	800456a <HAL_TIM_IC_Start_IT+0x46>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004568:	b2db      	uxtb	r3, r3
 800456a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <HAL_TIM_IC_Start_IT+0x58>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e013      	b.n	80045a4 <HAL_TIM_IC_Start_IT+0x80>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b04      	cmp	r3, #4
 8004580:	d104      	bne.n	800458c <HAL_TIM_IC_Start_IT+0x68>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e00b      	b.n	80045a4 <HAL_TIM_IC_Start_IT+0x80>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b08      	cmp	r3, #8
 8004590:	d104      	bne.n	800459c <HAL_TIM_IC_Start_IT+0x78>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e003      	b.n	80045a4 <HAL_TIM_IC_Start_IT+0x80>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80045a6:	7bbb      	ldrb	r3, [r7, #14]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d102      	bne.n	80045b2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80045ac:	7b7b      	ldrb	r3, [r7, #13]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d001      	beq.n	80045b6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0c2      	b.n	800473c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_IC_Start_IT+0xa2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c4:	e013      	b.n	80045ee <HAL_TIM_IC_Start_IT+0xca>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_IC_Start_IT+0xb2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d4:	e00b      	b.n	80045ee <HAL_TIM_IC_Start_IT+0xca>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d104      	bne.n	80045e6 <HAL_TIM_IC_Start_IT+0xc2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e4:	e003      	b.n	80045ee <HAL_TIM_IC_Start_IT+0xca>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_IC_Start_IT+0xda>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045fc:	e013      	b.n	8004626 <HAL_TIM_IC_Start_IT+0x102>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d104      	bne.n	800460e <HAL_TIM_IC_Start_IT+0xea>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800460c:	e00b      	b.n	8004626 <HAL_TIM_IC_Start_IT+0x102>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d104      	bne.n	800461e <HAL_TIM_IC_Start_IT+0xfa>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800461c:	e003      	b.n	8004626 <HAL_TIM_IC_Start_IT+0x102>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2202      	movs	r2, #2
 8004622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d841      	bhi.n	80046b0 <HAL_TIM_IC_Start_IT+0x18c>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <HAL_TIM_IC_Start_IT+0x110>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004669 	.word	0x08004669
 8004638:	080046b1 	.word	0x080046b1
 800463c:	080046b1 	.word	0x080046b1
 8004640:	080046b1 	.word	0x080046b1
 8004644:	0800467b 	.word	0x0800467b
 8004648:	080046b1 	.word	0x080046b1
 800464c:	080046b1 	.word	0x080046b1
 8004650:	080046b1 	.word	0x080046b1
 8004654:	0800468d 	.word	0x0800468d
 8004658:	080046b1 	.word	0x080046b1
 800465c:	080046b1 	.word	0x080046b1
 8004660:	080046b1 	.word	0x080046b1
 8004664:	0800469f 	.word	0x0800469f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0202 	orr.w	r2, r2, #2
 8004676:	60da      	str	r2, [r3, #12]
      break;
 8004678:	e01d      	b.n	80046b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0204 	orr.w	r2, r2, #4
 8004688:	60da      	str	r2, [r3, #12]
      break;
 800468a:	e014      	b.n	80046b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0208 	orr.w	r2, r2, #8
 800469a:	60da      	str	r2, [r3, #12]
      break;
 800469c:	e00b      	b.n	80046b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0210 	orr.w	r2, r2, #16
 80046ac:	60da      	str	r2, [r3, #12]
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d13e      	bne.n	800473a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2201      	movs	r2, #1
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 ff9b 	bl	8005600 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <HAL_TIM_IC_Start_IT+0x220>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x1e2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d013      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x1e2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a19      	ldr	r2, [pc, #100]	; (8004748 <HAL_TIM_IC_Start_IT+0x224>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x1e2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIM_IC_Start_IT+0x228>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x1e2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <HAL_TIM_IC_Start_IT+0x22c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x1e2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a14      	ldr	r2, [pc, #80]	; (8004754 <HAL_TIM_IC_Start_IT+0x230>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d010      	beq.n	800473a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	e007      	b.n	800473a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40010000 	.word	0x40010000
 8004748:	40000400 	.word	0x40000400
 800474c:	40000800 	.word	0x40000800
 8004750:	40000c00 	.word	0x40000c00
 8004754:	40014000 	.word	0x40014000

08004758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d122      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b02      	cmp	r3, #2
 800477a:	d11b      	bne.n	80047b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0202 	mvn.w	r2, #2
 8004784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fd fb14 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fb4a 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fb51 	bl	8004e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d122      	bne.n	8004808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d11b      	bne.n	8004808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0204 	mvn.w	r2, #4
 80047d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fd faea 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
 80047f4:	e005      	b.n	8004802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fb20 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb27 	bl	8004e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b08      	cmp	r3, #8
 8004814:	d122      	bne.n	800485c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d11b      	bne.n	800485c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0208 	mvn.w	r2, #8
 800482c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2204      	movs	r2, #4
 8004832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fac0 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
 8004848:	e005      	b.n	8004856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 faf6 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fafd 	bl	8004e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b10      	cmp	r3, #16
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b10      	cmp	r3, #16
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0210 	mvn.w	r2, #16
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2208      	movs	r2, #8
 8004886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd fa96 	bl	8001dc8 <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 facc 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fad3 	bl	8004e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10e      	bne.n	80048dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0201 	mvn.w	r2, #1
 80048d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fe58 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e6:	2b80      	cmp	r3, #128	; 0x80
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b80      	cmp	r3, #128	; 0x80
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 ff1a 	bl	800573c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa98 	bl	8004e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b20      	cmp	r3, #32
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b20      	cmp	r3, #32
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0220 	mvn.w	r2, #32
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fee4 	bl	8005728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004982:	2302      	movs	r3, #2
 8004984:	e088      	b.n	8004a98 <HAL_TIM_IC_ConfigChannel+0x130>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f000 fc74 	bl	8005290 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 020c 	bic.w	r2, r2, #12
 80049b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6999      	ldr	r1, [r3, #24]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	619a      	str	r2, [r3, #24]
 80049ca:	e060      	b.n	8004a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d11c      	bne.n	8004a0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f000 fcec 	bl	80053be <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699a      	ldr	r2, [r3, #24]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6999      	ldr	r1, [r3, #24]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	021a      	lsls	r2, r3, #8
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	619a      	str	r2, [r3, #24]
 8004a0a:	e040      	b.n	8004a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d11b      	bne.n	8004a4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f000 fd39 	bl	8005498 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 020c 	bic.w	r2, r2, #12
 8004a34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	61da      	str	r2, [r3, #28]
 8004a48:	e021      	b.n	8004a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d11c      	bne.n	8004a8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6819      	ldr	r1, [r3, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f000 fd56 	bl	8005510 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69d9      	ldr	r1, [r3, #28]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	61da      	str	r2, [r3, #28]
 8004a88:	e001      	b.n	8004a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0ae      	b.n	8004c1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	f200 809f 	bhi.w	8004c0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b09 	.word	0x08004b09
 8004ad8:	08004c0d 	.word	0x08004c0d
 8004adc:	08004c0d 	.word	0x08004c0d
 8004ae0:	08004c0d 	.word	0x08004c0d
 8004ae4:	08004b49 	.word	0x08004b49
 8004ae8:	08004c0d 	.word	0x08004c0d
 8004aec:	08004c0d 	.word	0x08004c0d
 8004af0:	08004c0d 	.word	0x08004c0d
 8004af4:	08004b8b 	.word	0x08004b8b
 8004af8:	08004c0d 	.word	0x08004c0d
 8004afc:	08004c0d 	.word	0x08004c0d
 8004b00:	08004c0d 	.word	0x08004c0d
 8004b04:	08004bcb 	.word	0x08004bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fa32 	bl	8004f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0208 	orr.w	r2, r2, #8
 8004b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0204 	bic.w	r2, r2, #4
 8004b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6999      	ldr	r1, [r3, #24]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	619a      	str	r2, [r3, #24]
      break;
 8004b46:	e064      	b.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fa78 	bl	8005044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6999      	ldr	r1, [r3, #24]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	619a      	str	r2, [r3, #24]
      break;
 8004b88:	e043      	b.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fac3 	bl	800511c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0208 	orr.w	r2, r2, #8
 8004ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0204 	bic.w	r2, r2, #4
 8004bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69d9      	ldr	r1, [r3, #28]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	61da      	str	r2, [r3, #28]
      break;
 8004bc8:	e023      	b.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb0d 	bl	80051f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	021a      	lsls	r2, r3, #8
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	61da      	str	r2, [r3, #28]
      break;
 8004c0a:	e002      	b.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIM_ConfigClockSource+0x1c>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e0b4      	b.n	8004daa <HAL_TIM_ConfigClockSource+0x186>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c78:	d03e      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7e:	f200 8087 	bhi.w	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	f000 8086 	beq.w	8004d96 <HAL_TIM_ConfigClockSource+0x172>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8e:	d87f      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b70      	cmp	r3, #112	; 0x70
 8004c92:	d01a      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0xa6>
 8004c94:	2b70      	cmp	r3, #112	; 0x70
 8004c96:	d87b      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b60      	cmp	r3, #96	; 0x60
 8004c9a:	d050      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x11a>
 8004c9c:	2b60      	cmp	r3, #96	; 0x60
 8004c9e:	d877      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b50      	cmp	r3, #80	; 0x50
 8004ca2:	d03c      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0xfa>
 8004ca4:	2b50      	cmp	r3, #80	; 0x50
 8004ca6:	d873      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d058      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x13a>
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d86f      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b30      	cmp	r3, #48	; 0x30
 8004cb2:	d064      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cb4:	2b30      	cmp	r3, #48	; 0x30
 8004cb6:	d86b      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d060      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d867      	bhi.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d05c      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d05a      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	e062      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6899      	ldr	r1, [r3, #8]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f000 fc71 	bl	80055c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	609a      	str	r2, [r3, #8]
      break;
 8004cf6:	e04f      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6899      	ldr	r1, [r3, #8]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f000 fc5a 	bl	80055c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d1a:	609a      	str	r2, [r3, #8]
      break;
 8004d1c:	e03c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f000 fb18 	bl	8005360 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2150      	movs	r1, #80	; 0x50
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fc27 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8004d3c:	e02c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 fb74 	bl	8005438 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2160      	movs	r1, #96	; 0x60
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc17 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e01c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 faf8 	bl	8005360 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2140      	movs	r1, #64	; 0x40
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fc07 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e00c      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f000 fbfe 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8004d8e:	e003      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
      break;
 8004d94:	e000      	b.n	8004d98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	d831      	bhi.n	8004e2c <HAL_TIM_ReadCapturedValue+0x78>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004e2d 	.word	0x08004e2d
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e2d 	.word	0x08004e2d
 8004de8:	08004e2d 	.word	0x08004e2d
 8004dec:	08004e2d 	.word	0x08004e2d
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e2d 	.word	0x08004e2d
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004e2d 	.word	0x08004e2d
 8004e00:	08004e23 	.word	0x08004e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	60fb      	str	r3, [r7, #12]

      break;
 8004e0c:	e00f      	b.n	8004e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	60fb      	str	r3, [r7, #12]

      break;
 8004e16:	e00a      	b.n	8004e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	60fb      	str	r3, [r7, #12]

      break;
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	60fb      	str	r3, [r7, #12]

      break;
 8004e2a:	e000      	b.n	8004e2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e2c:	bf00      	nop
  }

  return tmpreg;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a34      	ldr	r2, [pc, #208]	; (8004f5c <TIM_Base_SetConfig+0xe4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_Base_SetConfig+0x38>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e96:	d00b      	beq.n	8004eb0 <TIM_Base_SetConfig+0x38>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a31      	ldr	r2, [pc, #196]	; (8004f60 <TIM_Base_SetConfig+0xe8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_Base_SetConfig+0x38>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a30      	ldr	r2, [pc, #192]	; (8004f64 <TIM_Base_SetConfig+0xec>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0x38>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2f      	ldr	r2, [pc, #188]	; (8004f68 <TIM_Base_SetConfig+0xf0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d108      	bne.n	8004ec2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <TIM_Base_SetConfig+0xe4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01b      	beq.n	8004f02 <TIM_Base_SetConfig+0x8a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed0:	d017      	beq.n	8004f02 <TIM_Base_SetConfig+0x8a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <TIM_Base_SetConfig+0xe8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <TIM_Base_SetConfig+0x8a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <TIM_Base_SetConfig+0xec>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00f      	beq.n	8004f02 <TIM_Base_SetConfig+0x8a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <TIM_Base_SetConfig+0xf0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0x8a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <TIM_Base_SetConfig+0xf4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0x8a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <TIM_Base_SetConfig+0xf8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0x8a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <TIM_Base_SetConfig+0xfc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <TIM_Base_SetConfig+0xe4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d103      	bne.n	8004f48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	615a      	str	r2, [r3, #20]
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800

08004f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 0302 	bic.w	r3, r3, #2
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <TIM_OC1_SetConfig+0xc8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d10c      	bne.n	8004fee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0308 	bic.w	r3, r3, #8
 8004fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 0304 	bic.w	r3, r3, #4
 8004fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <TIM_OC1_SetConfig+0xc8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d111      	bne.n	800501a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	621a      	str	r2, [r3, #32]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40010000 	.word	0x40010000

08005044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0210 	bic.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0320 	bic.w	r3, r3, #32
 800508e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <TIM_OC2_SetConfig+0xd4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d10d      	bne.n	80050c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <TIM_OC2_SetConfig+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d113      	bne.n	80050f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000

0800511c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0303 	bic.w	r3, r3, #3
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <TIM_OC3_SetConfig+0xd0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10d      	bne.n	8005196 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a14      	ldr	r2, [pc, #80]	; (80051ec <TIM_OC3_SetConfig+0xd0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d113      	bne.n	80051c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40010000 	.word	0x40010000

080051f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800523a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a10      	ldr	r2, [pc, #64]	; (800528c <TIM_OC4_SetConfig+0x9c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d109      	bne.n	8005264 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	621a      	str	r2, [r3, #32]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000

08005290 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0201 	bic.w	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a24      	ldr	r2, [pc, #144]	; (800534c <TIM_TI1_SetConfig+0xbc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c4:	d00f      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a21      	ldr	r2, [pc, #132]	; (8005350 <TIM_TI1_SetConfig+0xc0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a20      	ldr	r2, [pc, #128]	; (8005354 <TIM_TI1_SetConfig+0xc4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <TIM_TI1_SetConfig+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_TI1_SetConfig+0x56>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	; (800535c <TIM_TI1_SetConfig+0xcc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d101      	bne.n	80052ea <TIM_TI1_SetConfig+0x5a>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <TIM_TI1_SetConfig+0x5c>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e003      	b.n	800530a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	b2db      	uxtb	r3, r3
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f023 030a 	bic.w	r3, r3, #10
 8005324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f003 030a 	and.w	r3, r3, #10
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40010000 	.word	0x40010000
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40000c00 	.word	0x40000c00
 800535c:	40014000 	.word	0x40014000

08005360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800538a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 030a 	bic.w	r3, r3, #10
 800539c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053be:	b480      	push	{r7}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f023 0210 	bic.w	r2, r3, #16
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	b29b      	uxth	r3, r3
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005410:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f023 0210 	bic.w	r2, r3, #16
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005462:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	031b      	lsls	r3, r3, #12
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005474:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	621a      	str	r2, [r3, #32]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 0303 	bic.w	r3, r3, #3
 80054c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80054e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800554e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	031b      	lsls	r3, r3, #12
 8005554:	b29b      	uxth	r3, r3
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005562:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	031b      	lsls	r3, r3, #12
 8005568:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f043 0307 	orr.w	r3, r3, #7
 80055ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	021a      	lsls	r2, r3, #8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2201      	movs	r2, #1
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a1a      	ldr	r2, [r3, #32]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	43db      	mvns	r3, r3
 8005622:	401a      	ands	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1a      	ldr	r2, [r3, #32]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	fa01 f303 	lsl.w	r3, r1, r3
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005660:	2302      	movs	r3, #2
 8005662:	e050      	b.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b0:	d013      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a16      	ldr	r2, [pc, #88]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a15      	ldr	r2, [pc, #84]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a13      	ldr	r2, [pc, #76]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10c      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00
 8005724:	40014000 	.word	0x40014000

08005728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e03f      	b.n	80057e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc f8f6 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2224      	movs	r2, #36	; 0x24
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fddf 	bl	8006358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695a      	ldr	r2, [r3, #20]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b08a      	sub	sp, #40	; 0x28
 80057ee:	af02      	add	r7, sp, #8
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b20      	cmp	r3, #32
 8005808:	d17c      	bne.n	8005904 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_UART_Transmit+0x2c>
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e075      	b.n	8005906 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_UART_Transmit+0x3e>
 8005824:	2302      	movs	r3, #2
 8005826:	e06e      	b.n	8005906 <HAL_UART_Transmit+0x11c>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2221      	movs	r2, #33	; 0x21
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800583e:	f7fc fb57 	bl	8001ef0 <HAL_GetTick>
 8005842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	88fa      	ldrh	r2, [r7, #6]
 8005848:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005858:	d108      	bne.n	800586c <HAL_UART_Transmit+0x82>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	e003      	b.n	8005874 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800587c:	e02a      	b.n	80058d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fb1f 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e036      	b.n	8005906 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10b      	bne.n	80058b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	3302      	adds	r3, #2
 80058b2:	61bb      	str	r3, [r7, #24]
 80058b4:	e007      	b.n	80058c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1cf      	bne.n	800587e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	2140      	movs	r1, #64	; 0x40
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 faef 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e006      	b.n	8005906 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	e000      	b.n	8005906 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005904:	2302      	movs	r3, #2
  }
}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	4613      	mov	r3, r2
 800591a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b20      	cmp	r3, #32
 8005926:	d11d      	bne.n	8005964 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_UART_Receive_IT+0x26>
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e016      	b.n	8005966 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_UART_Receive_IT+0x38>
 8005942:	2302      	movs	r3, #2
 8005944:	e00f      	b.n	8005966 <HAL_UART_Receive_IT+0x58>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	461a      	mov	r2, r3
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fb24 	bl	8005fa8 <UART_Start_Receive_IT>
 8005960:	4603      	mov	r3, r0
 8005962:	e000      	b.n	8005966 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b0ba      	sub	sp, #232	; 0xe8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005996:	2300      	movs	r3, #0
 8005998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800599c:	2300      	movs	r3, #0
 800599e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <HAL_UART_IRQHandler+0x66>
 80059c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fc07 	bl	80061e2 <UART_Receive_IT>
      return;
 80059d4:	e256      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80de 	beq.w	8005b9c <HAL_UART_IRQHandler+0x22c>
 80059e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80d1 	beq.w	8005b9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xae>
 8005a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0201 	orr.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xd2>
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f043 0202 	orr.w	r2, r3, #2
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_UART_IRQHandler+0xf6>
 8005a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f043 0204 	orr.w	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d011      	beq.n	8005a96 <HAL_UART_IRQHandler+0x126>
 8005a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f043 0208 	orr.w	r2, r3, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 81ed 	beq.w	8005e7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa4:	f003 0320 	and.w	r3, r3, #32
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_UART_IRQHandler+0x14e>
 8005aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fb92 	bl	80061e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_UART_IRQHandler+0x17a>
 8005ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d04f      	beq.n	8005b8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa9a 	bl	8006024 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b40      	cmp	r3, #64	; 0x40
 8005afc:	d141      	bne.n	8005b82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3314      	adds	r3, #20
 8005b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1d9      	bne.n	8005afe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d013      	beq.n	8005b7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	4a7d      	ldr	r2, [pc, #500]	; (8005d4c <HAL_UART_IRQHandler+0x3dc>)
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fc fb48 	bl	80021f4 <HAL_DMA_Abort_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	e00e      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f990 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	e00a      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f98c 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b88:	e006      	b.n	8005b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f988 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b96:	e170      	b.n	8005e7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	bf00      	nop
    return;
 8005b9a:	e16e      	b.n	8005e7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	f040 814a 	bne.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8143 	beq.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 813c 	beq.w	8005e3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	f040 80b4 	bne.w	8005d50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8140 	beq.w	8005e7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c06:	429a      	cmp	r2, r3
 8005c08:	f080 8139 	bcs.w	8005e7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c1e:	f000 8088 	beq.w	8005d32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1d9      	bne.n	8005c22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3314      	adds	r3, #20
 8005c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e1      	bne.n	8005c6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3314      	adds	r3, #20
 8005cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e3      	bne.n	8005caa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d02:	f023 0310 	bic.w	r3, r3, #16
 8005d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d14:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e3      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fc f9f1 	bl	8002114 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f8b6 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d48:	e099      	b.n	8005e7e <HAL_UART_IRQHandler+0x50e>
 8005d4a:	bf00      	nop
 8005d4c:	080060eb 	.word	0x080060eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 808b 	beq.w	8005e82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8086 	beq.w	8005e82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d9a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e3      	bne.n	8005d76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3314      	adds	r3, #20
 8005dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e3      	bne.n	8005dae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	330c      	adds	r3, #12
 8005dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0310 	bic.w	r3, r3, #16
 8005e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e18:	61fa      	str	r2, [r7, #28]
 8005e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	69b9      	ldr	r1, [r7, #24]
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	617b      	str	r3, [r7, #20]
   return(result);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e3      	bne.n	8005df4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f83e 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e38:	e023      	b.n	8005e82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <HAL_UART_IRQHandler+0x4ea>
 8005e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f95d 	bl	8006112 <UART_Transmit_IT>
    return;
 8005e58:	e014      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00e      	beq.n	8005e84 <HAL_UART_IRQHandler+0x514>
 8005e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f99d 	bl	80061b2 <UART_EndTransmit_IT>
    return;
 8005e78:	e004      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
    return;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
      return;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <HAL_UART_IRQHandler+0x514>
      return;
 8005e82:	bf00      	nop
  }
}
 8005e84:	37e8      	adds	r7, #232	; 0xe8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop

08005e8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b090      	sub	sp, #64	; 0x40
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005edc:	e050      	b.n	8005f80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d04c      	beq.n	8005f80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <UART_WaitOnFlagUntilTimeout+0x30>
 8005eec:	f7fc f800 	bl	8001ef0 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d241      	bcs.n	8005f80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f1c:	637a      	str	r2, [r7, #52]	; 0x34
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e5      	bne.n	8005efc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3314      	adds	r3, #20
 8005f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3314      	adds	r3, #20
 8005f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f50:	623a      	str	r2, [r7, #32]
 8005f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	6a3a      	ldr	r2, [r7, #32]
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e5      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e00f      	b.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d09f      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3740      	adds	r7, #64	; 0x40
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2222      	movs	r2, #34	; 0x22
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0220 	orr.w	r2, r2, #32
 8006014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b095      	sub	sp, #84	; 0x54
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800604c:	643a      	str	r2, [r7, #64]	; 0x40
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3314      	adds	r3, #20
 8006066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	64bb      	str	r3, [r7, #72]	; 0x48
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3314      	adds	r3, #20
 800607e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e5      	bne.n	8006060 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	2b01      	cmp	r3, #1
 800609a:	d119      	bne.n	80060d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f023 0310 	bic.w	r3, r3, #16
 80060b2:	647b      	str	r3, [r7, #68]	; 0x44
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060bc:	61ba      	str	r2, [r7, #24]
 80060be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6979      	ldr	r1, [r7, #20]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e5      	bne.n	800609c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060de:	bf00      	nop
 80060e0:	3754      	adds	r7, #84	; 0x54
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff fecb 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b21      	cmp	r3, #33	; 0x21
 8006124:	d13e      	bne.n	80061a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612e:	d114      	bne.n	800615a <UART_Transmit_IT+0x48>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d110      	bne.n	800615a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800614c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	1c9a      	adds	r2, r3, #2
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	621a      	str	r2, [r3, #32]
 8006158:	e008      	b.n	800616c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	1c59      	adds	r1, r3, #1
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6211      	str	r1, [r2, #32]
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29b      	uxth	r3, r3
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4619      	mov	r1, r3
 800617a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10f      	bne.n	80061a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800618e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fe5a 	bl	8005e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b08c      	sub	sp, #48	; 0x30
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b22      	cmp	r3, #34	; 0x22
 80061f4:	f040 80ab 	bne.w	800634e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006200:	d117      	bne.n	8006232 <UART_Receive_IT+0x50>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d113      	bne.n	8006232 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006220:	b29a      	uxth	r2, r3
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	1c9a      	adds	r2, r3, #2
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28
 8006230:	e026      	b.n	8006280 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006238:	2300      	movs	r3, #0
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006244:	d007      	beq.n	8006256 <UART_Receive_IT+0x74>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <UART_Receive_IT+0x82>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	e008      	b.n	8006276 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006270:	b2da      	uxtb	r2, r3
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006284:	b29b      	uxth	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	b29b      	uxth	r3, r3
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	4619      	mov	r1, r3
 800628e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006290:	2b00      	cmp	r3, #0
 8006292:	d15a      	bne.n	800634a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0220 	bic.w	r2, r2, #32
 80062a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695a      	ldr	r2, [r3, #20]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d135      	bne.n	8006340 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f023 0310 	bic.w	r3, r3, #16
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fa:	623a      	str	r2, [r7, #32]
 80062fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	69f9      	ldr	r1, [r7, #28]
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	61bb      	str	r3, [r7, #24]
   return(result);
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e5      	bne.n	80062da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b10      	cmp	r3, #16
 800631a:	d10a      	bne.n	8006332 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff fdbb 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
 800633e:	e002      	b.n	8006346 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7fa f91f 	bl	8000584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e002      	b.n	8006350 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3730      	adds	r7, #48	; 0x30
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800635c:	b0c0      	sub	sp, #256	; 0x100
 800635e:	af00      	add	r7, sp, #0
 8006360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	68d9      	ldr	r1, [r3, #12]
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	ea40 0301 	orr.w	r3, r0, r1
 8006380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	431a      	orrs	r2, r3
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	431a      	orrs	r2, r3
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063b0:	f021 010c 	bic.w	r1, r1, #12
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063be:	430b      	orrs	r3, r1
 80063c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d2:	6999      	ldr	r1, [r3, #24]
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	ea40 0301 	orr.w	r3, r0, r1
 80063de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b8f      	ldr	r3, [pc, #572]	; (8006624 <UART_SetConfig+0x2cc>)
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d005      	beq.n	80063f8 <UART_SetConfig+0xa0>
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b8d      	ldr	r3, [pc, #564]	; (8006628 <UART_SetConfig+0x2d0>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d104      	bne.n	8006402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7fd f9bc 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 80063fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006400:	e003      	b.n	800640a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006402:	f7fd f9a3 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8006406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006414:	f040 810c 	bne.w	8006630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641c:	2200      	movs	r2, #0
 800641e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800642a:	4622      	mov	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	1891      	adds	r1, r2, r2
 8006430:	65b9      	str	r1, [r7, #88]	; 0x58
 8006432:	415b      	adcs	r3, r3
 8006434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800643a:	4621      	mov	r1, r4
 800643c:	eb12 0801 	adds.w	r8, r2, r1
 8006440:	4629      	mov	r1, r5
 8006442:	eb43 0901 	adc.w	r9, r3, r1
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800645a:	4690      	mov	r8, r2
 800645c:	4699      	mov	r9, r3
 800645e:	4623      	mov	r3, r4
 8006460:	eb18 0303 	adds.w	r3, r8, r3
 8006464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006468:	462b      	mov	r3, r5
 800646a:	eb49 0303 	adc.w	r3, r9, r3
 800646e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800647e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006486:	460b      	mov	r3, r1
 8006488:	18db      	adds	r3, r3, r3
 800648a:	653b      	str	r3, [r7, #80]	; 0x50
 800648c:	4613      	mov	r3, r2
 800648e:	eb42 0303 	adc.w	r3, r2, r3
 8006492:	657b      	str	r3, [r7, #84]	; 0x54
 8006494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800649c:	f7f9 fef0 	bl	8000280 <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4b61      	ldr	r3, [pc, #388]	; (800662c <UART_SetConfig+0x2d4>)
 80064a6:	fba3 2302 	umull	r2, r3, r3, r2
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	011c      	lsls	r4, r3, #4
 80064ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	1891      	adds	r1, r2, r2
 80064c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80064c8:	415b      	adcs	r3, r3
 80064ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064d0:	4641      	mov	r1, r8
 80064d2:	eb12 0a01 	adds.w	sl, r2, r1
 80064d6:	4649      	mov	r1, r9
 80064d8:	eb43 0b01 	adc.w	fp, r3, r1
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f0:	4692      	mov	sl, r2
 80064f2:	469b      	mov	fp, r3
 80064f4:	4643      	mov	r3, r8
 80064f6:	eb1a 0303 	adds.w	r3, sl, r3
 80064fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064fe:	464b      	mov	r3, r9
 8006500:	eb4b 0303 	adc.w	r3, fp, r3
 8006504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800651c:	460b      	mov	r3, r1
 800651e:	18db      	adds	r3, r3, r3
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
 8006522:	4613      	mov	r3, r2
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
 800652a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800652e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006532:	f7f9 fea5 	bl	8000280 <__aeabi_uldivmod>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4611      	mov	r1, r2
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <UART_SetConfig+0x2d4>)
 800653e:	fba3 2301 	umull	r2, r3, r3, r1
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	2264      	movs	r2, #100	; 0x64
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	1acb      	subs	r3, r1, r3
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <UART_SetConfig+0x2d4>)
 8006554:	fba3 2302 	umull	r2, r3, r3, r2
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006560:	441c      	add	r4, r3
 8006562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006566:	2200      	movs	r2, #0
 8006568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800656c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	1891      	adds	r1, r2, r2
 800657a:	63b9      	str	r1, [r7, #56]	; 0x38
 800657c:	415b      	adcs	r3, r3
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006584:	4641      	mov	r1, r8
 8006586:	1851      	adds	r1, r2, r1
 8006588:	6339      	str	r1, [r7, #48]	; 0x30
 800658a:	4649      	mov	r1, r9
 800658c:	414b      	adcs	r3, r1
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800659c:	4659      	mov	r1, fp
 800659e:	00cb      	lsls	r3, r1, #3
 80065a0:	4651      	mov	r1, sl
 80065a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a6:	4651      	mov	r1, sl
 80065a8:	00ca      	lsls	r2, r1, #3
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	4642      	mov	r2, r8
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065b8:	464b      	mov	r3, r9
 80065ba:	460a      	mov	r2, r1
 80065bc:	eb42 0303 	adc.w	r3, r2, r3
 80065c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80065d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065d8:	460b      	mov	r3, r1
 80065da:	18db      	adds	r3, r3, r3
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065de:	4613      	mov	r3, r2
 80065e0:	eb42 0303 	adc.w	r3, r2, r3
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065ee:	f7f9 fe47 	bl	8000280 <__aeabi_uldivmod>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4b0d      	ldr	r3, [pc, #52]	; (800662c <UART_SetConfig+0x2d4>)
 80065f8:	fba3 1302 	umull	r1, r3, r3, r2
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	2164      	movs	r1, #100	; 0x64
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	3332      	adds	r3, #50	; 0x32
 800660a:	4a08      	ldr	r2, [pc, #32]	; (800662c <UART_SetConfig+0x2d4>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	f003 0207 	and.w	r2, r3, #7
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4422      	add	r2, r4
 800661e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006620:	e105      	b.n	800682e <UART_SetConfig+0x4d6>
 8006622:	bf00      	nop
 8006624:	40011000 	.word	0x40011000
 8006628:	40011400 	.word	0x40011400
 800662c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800663a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800663e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006642:	4642      	mov	r2, r8
 8006644:	464b      	mov	r3, r9
 8006646:	1891      	adds	r1, r2, r2
 8006648:	6239      	str	r1, [r7, #32]
 800664a:	415b      	adcs	r3, r3
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006652:	4641      	mov	r1, r8
 8006654:	1854      	adds	r4, r2, r1
 8006656:	4649      	mov	r1, r9
 8006658:	eb43 0501 	adc.w	r5, r3, r1
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	00eb      	lsls	r3, r5, #3
 8006666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800666a:	00e2      	lsls	r2, r4, #3
 800666c:	4614      	mov	r4, r2
 800666e:	461d      	mov	r5, r3
 8006670:	4643      	mov	r3, r8
 8006672:	18e3      	adds	r3, r4, r3
 8006674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006678:	464b      	mov	r3, r9
 800667a:	eb45 0303 	adc.w	r3, r5, r3
 800667e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800668e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800669e:	4629      	mov	r1, r5
 80066a0:	008b      	lsls	r3, r1, #2
 80066a2:	4621      	mov	r1, r4
 80066a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a8:	4621      	mov	r1, r4
 80066aa:	008a      	lsls	r2, r1, #2
 80066ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066b0:	f7f9 fde6 	bl	8000280 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4b60      	ldr	r3, [pc, #384]	; (800683c <UART_SetConfig+0x4e4>)
 80066ba:	fba3 2302 	umull	r2, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	011c      	lsls	r4, r3, #4
 80066c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80066d4:	4642      	mov	r2, r8
 80066d6:	464b      	mov	r3, r9
 80066d8:	1891      	adds	r1, r2, r2
 80066da:	61b9      	str	r1, [r7, #24]
 80066dc:	415b      	adcs	r3, r3
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e4:	4641      	mov	r1, r8
 80066e6:	1851      	adds	r1, r2, r1
 80066e8:	6139      	str	r1, [r7, #16]
 80066ea:	4649      	mov	r1, r9
 80066ec:	414b      	adcs	r3, r1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066fc:	4659      	mov	r1, fp
 80066fe:	00cb      	lsls	r3, r1, #3
 8006700:	4651      	mov	r1, sl
 8006702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006706:	4651      	mov	r1, sl
 8006708:	00ca      	lsls	r2, r1, #3
 800670a:	4610      	mov	r0, r2
 800670c:	4619      	mov	r1, r3
 800670e:	4603      	mov	r3, r0
 8006710:	4642      	mov	r2, r8
 8006712:	189b      	adds	r3, r3, r2
 8006714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006718:	464b      	mov	r3, r9
 800671a:	460a      	mov	r2, r1
 800671c:	eb42 0303 	adc.w	r3, r2, r3
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	67bb      	str	r3, [r7, #120]	; 0x78
 800672e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800673c:	4649      	mov	r1, r9
 800673e:	008b      	lsls	r3, r1, #2
 8006740:	4641      	mov	r1, r8
 8006742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006746:	4641      	mov	r1, r8
 8006748:	008a      	lsls	r2, r1, #2
 800674a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800674e:	f7f9 fd97 	bl	8000280 <__aeabi_uldivmod>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4b39      	ldr	r3, [pc, #228]	; (800683c <UART_SetConfig+0x4e4>)
 8006758:	fba3 1302 	umull	r1, r3, r3, r2
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	2164      	movs	r1, #100	; 0x64
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	3332      	adds	r3, #50	; 0x32
 800676a:	4a34      	ldr	r2, [pc, #208]	; (800683c <UART_SetConfig+0x4e4>)
 800676c:	fba2 2303 	umull	r2, r3, r2, r3
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006776:	441c      	add	r4, r3
 8006778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677c:	2200      	movs	r2, #0
 800677e:	673b      	str	r3, [r7, #112]	; 0x70
 8006780:	677a      	str	r2, [r7, #116]	; 0x74
 8006782:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006786:	4642      	mov	r2, r8
 8006788:	464b      	mov	r3, r9
 800678a:	1891      	adds	r1, r2, r2
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	415b      	adcs	r3, r3
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006796:	4641      	mov	r1, r8
 8006798:	1851      	adds	r1, r2, r1
 800679a:	6039      	str	r1, [r7, #0]
 800679c:	4649      	mov	r1, r9
 800679e:	414b      	adcs	r3, r1
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ae:	4659      	mov	r1, fp
 80067b0:	00cb      	lsls	r3, r1, #3
 80067b2:	4651      	mov	r1, sl
 80067b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b8:	4651      	mov	r1, sl
 80067ba:	00ca      	lsls	r2, r1, #3
 80067bc:	4610      	mov	r0, r2
 80067be:	4619      	mov	r1, r3
 80067c0:	4603      	mov	r3, r0
 80067c2:	4642      	mov	r2, r8
 80067c4:	189b      	adds	r3, r3, r2
 80067c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80067c8:	464b      	mov	r3, r9
 80067ca:	460a      	mov	r2, r1
 80067cc:	eb42 0303 	adc.w	r3, r2, r3
 80067d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	663b      	str	r3, [r7, #96]	; 0x60
 80067dc:	667a      	str	r2, [r7, #100]	; 0x64
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80067ea:	4649      	mov	r1, r9
 80067ec:	008b      	lsls	r3, r1, #2
 80067ee:	4641      	mov	r1, r8
 80067f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f4:	4641      	mov	r1, r8
 80067f6:	008a      	lsls	r2, r1, #2
 80067f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067fc:	f7f9 fd40 	bl	8000280 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <UART_SetConfig+0x4e4>)
 8006806:	fba3 1302 	umull	r1, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2164      	movs	r1, #100	; 0x64
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	3332      	adds	r3, #50	; 0x32
 8006818:	4a08      	ldr	r2, [pc, #32]	; (800683c <UART_SetConfig+0x4e4>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	f003 020f 	and.w	r2, r3, #15
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4422      	add	r2, r4
 800682c:	609a      	str	r2, [r3, #8]
}
 800682e:	bf00      	nop
 8006830:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006834:	46bd      	mov	sp, r7
 8006836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800683a:	bf00      	nop
 800683c:	51eb851f 	.word	0x51eb851f

08006840 <__NVIC_SetPriority>:
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	6039      	str	r1, [r7, #0]
 800684a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800684c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006850:	2b00      	cmp	r3, #0
 8006852:	db0a      	blt.n	800686a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	490c      	ldr	r1, [pc, #48]	; (800688c <__NVIC_SetPriority+0x4c>)
 800685a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685e:	0112      	lsls	r2, r2, #4
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	440b      	add	r3, r1
 8006864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006868:	e00a      	b.n	8006880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	4908      	ldr	r1, [pc, #32]	; (8006890 <__NVIC_SetPriority+0x50>)
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	3b04      	subs	r3, #4
 8006878:	0112      	lsls	r2, r2, #4
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	440b      	add	r3, r1
 800687e:	761a      	strb	r2, [r3, #24]
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	e000e100 	.word	0xe000e100
 8006890:	e000ed00 	.word	0xe000ed00

08006894 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <SysTick_Handler+0x1c>)
 800689a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800689c:	f002 f85a 	bl	8008954 <xTaskGetSchedulerState>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d001      	beq.n	80068aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80068a6:	f002 ff3f 	bl	8009728 <xPortSysTickHandler>
  }
}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	e000e010 	.word	0xe000e010

080068b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068b8:	2100      	movs	r1, #0
 80068ba:	f06f 0004 	mvn.w	r0, #4
 80068be:	f7ff ffbf 	bl	8006840 <__NVIC_SetPriority>
#endif
}
 80068c2:	bf00      	nop
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ce:	f3ef 8305 	mrs	r3, IPSR
 80068d2:	603b      	str	r3, [r7, #0]
  return(result);
 80068d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068da:	f06f 0305 	mvn.w	r3, #5
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	e00c      	b.n	80068fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068e2:	4b0a      	ldr	r3, [pc, #40]	; (800690c <osKernelInitialize+0x44>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068ea:	4b08      	ldr	r3, [pc, #32]	; (800690c <osKernelInitialize+0x44>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	607b      	str	r3, [r7, #4]
 80068f4:	e002      	b.n	80068fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068f6:	f04f 33ff 	mov.w	r3, #4294967295
 80068fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068fc:	687b      	ldr	r3, [r7, #4]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000920 	.word	0x20000920

08006910 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006916:	f3ef 8305 	mrs	r3, IPSR
 800691a:	603b      	str	r3, [r7, #0]
  return(result);
 800691c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006922:	f06f 0305 	mvn.w	r3, #5
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	e010      	b.n	800694c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800692a:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <osKernelStart+0x48>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d109      	bne.n	8006946 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006932:	f7ff ffbf 	bl	80068b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006936:	4b08      	ldr	r3, [pc, #32]	; (8006958 <osKernelStart+0x48>)
 8006938:	2202      	movs	r2, #2
 800693a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800693c:	f001 fb9e 	bl	800807c <vTaskStartScheduler>
      stat = osOK;
 8006940:	2300      	movs	r3, #0
 8006942:	607b      	str	r3, [r7, #4]
 8006944:	e002      	b.n	800694c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006946:	f04f 33ff 	mov.w	r3, #4294967295
 800694a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800694c:	687b      	ldr	r3, [r7, #4]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000920 	.word	0x20000920

0800695c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800695c:	b580      	push	{r7, lr}
 800695e:	b08e      	sub	sp, #56	; 0x38
 8006960:	af04      	add	r7, sp, #16
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800696c:	f3ef 8305 	mrs	r3, IPSR
 8006970:	617b      	str	r3, [r7, #20]
  return(result);
 8006972:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006974:	2b00      	cmp	r3, #0
 8006976:	d17e      	bne.n	8006a76 <osThreadNew+0x11a>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d07b      	beq.n	8006a76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006982:	2318      	movs	r3, #24
 8006984:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800698a:	f04f 33ff 	mov.w	r3, #4294967295
 800698e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d045      	beq.n	8006a22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <osThreadNew+0x48>
        name = attr->name;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <osThreadNew+0x6e>
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	2b38      	cmp	r3, #56	; 0x38
 80069bc:	d805      	bhi.n	80069ca <osThreadNew+0x6e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <osThreadNew+0x72>
        return (NULL);
 80069ca:	2300      	movs	r3, #0
 80069cc:	e054      	b.n	8006a78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	089b      	lsrs	r3, r3, #2
 80069dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <osThreadNew+0xa8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	2bbb      	cmp	r3, #187	; 0xbb
 80069ec:	d90a      	bls.n	8006a04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d006      	beq.n	8006a04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <osThreadNew+0xa8>
        mem = 1;
 80069fe:	2301      	movs	r3, #1
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	e010      	b.n	8006a26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10c      	bne.n	8006a26 <osThreadNew+0xca>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d108      	bne.n	8006a26 <osThreadNew+0xca>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <osThreadNew+0xca>
          mem = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e001      	b.n	8006a26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d110      	bne.n	8006a4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a34:	9202      	str	r2, [sp, #8]
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	6a3a      	ldr	r2, [r7, #32]
 8006a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f001 f92e 	bl	8007ca4 <xTaskCreateStatic>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	e013      	b.n	8006a76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d110      	bne.n	8006a76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f107 0310 	add.w	r3, r7, #16
 8006a5c:	9301      	str	r3, [sp, #4]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f001 f979 	bl	8007d5e <xTaskCreate>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d001      	beq.n	8006a76 <osThreadNew+0x11a>
            hTask = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a76:	693b      	ldr	r3, [r7, #16]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3728      	adds	r7, #40	; 0x28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a88:	f3ef 8305 	mrs	r3, IPSR
 8006a8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <osDelay+0x1c>
    stat = osErrorISR;
 8006a94:	f06f 0305 	mvn.w	r3, #5
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e007      	b.n	8006aac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <osDelay+0x2c>
      vTaskDelay(ticks);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fab4 	bl	8008014 <vTaskDelay>
    }
  }

  return (stat);
 8006aac:	68fb      	ldr	r3, [r7, #12]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b088      	sub	sp, #32
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ac2:	f3ef 8305 	mrs	r3, IPSR
 8006ac6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ac8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d174      	bne.n	8006bb8 <osMutexNew+0x102>
    if (attr != NULL) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <osMutexNew+0x26>
      type = attr->attr_bits;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e001      	b.n	8006ae0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <osMutexNew+0x3a>
      rmtx = 1U;
 8006aea:	2301      	movs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e001      	b.n	8006af4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d15c      	bne.n	8006bb8 <osMutexNew+0x102>
      mem = -1;
 8006afe:	f04f 33ff 	mov.w	r3, #4294967295
 8006b02:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d015      	beq.n	8006b36 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d006      	beq.n	8006b20 <osMutexNew+0x6a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b4f      	cmp	r3, #79	; 0x4f
 8006b18:	d902      	bls.n	8006b20 <osMutexNew+0x6a>
          mem = 1;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	e00c      	b.n	8006b3a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d108      	bne.n	8006b3a <osMutexNew+0x84>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <osMutexNew+0x84>
            mem = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	e001      	b.n	8006b3a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d112      	bne.n	8006b66 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	2004      	movs	r0, #4
 8006b4e:	f000 fb18 	bl	8007182 <xQueueCreateMutexStatic>
 8006b52:	61f8      	str	r0, [r7, #28]
 8006b54:	e016      	b.n	8006b84 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	f000 fb10 	bl	8007182 <xQueueCreateMutexStatic>
 8006b62:	61f8      	str	r0, [r7, #28]
 8006b64:	e00e      	b.n	8006b84 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10b      	bne.n	8006b84 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006b72:	2004      	movs	r0, #4
 8006b74:	f000 faed 	bl	8007152 <xQueueCreateMutex>
 8006b78:	61f8      	str	r0, [r7, #28]
 8006b7a:	e003      	b.n	8006b84 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f000 fae8 	bl	8007152 <xQueueCreateMutex>
 8006b82:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00c      	beq.n	8006ba4 <osMutexNew+0xee>
        if (attr != NULL) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <osMutexNew+0xe2>
          name = attr->name;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	e001      	b.n	8006b9c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006b9c:	68f9      	ldr	r1, [r7, #12]
 8006b9e:	69f8      	ldr	r0, [r7, #28]
 8006ba0:	f001 f822 	bl	8007be8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d006      	beq.n	8006bb8 <osMutexNew+0x102>
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f043 0301 	orr.w	r3, r3, #1
 8006bb6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006bb8:	69fb      	ldr	r3, [r7, #28]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b086      	sub	sp, #24
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be0:	f3ef 8305 	mrs	r3, IPSR
 8006be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006be6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006bec:	f06f 0305 	mvn.w	r3, #5
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	e02c      	b.n	8006c4e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d103      	bne.n	8006c02 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006bfa:	f06f 0303 	mvn.w	r3, #3
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e025      	b.n	8006c4e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d011      	beq.n	8006c2c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6938      	ldr	r0, [r7, #16]
 8006c0c:	f000 fb08 	bl	8007220 <xQueueTakeMutexRecursive>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d01b      	beq.n	8006c4e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006c1c:	f06f 0301 	mvn.w	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e014      	b.n	8006c4e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006c24:	f06f 0302 	mvn.w	r3, #2
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	e010      	b.n	8006c4e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6938      	ldr	r0, [r7, #16]
 8006c30:	f000 fda6 	bl	8007780 <xQueueSemaphoreTake>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d009      	beq.n	8006c4e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006c40:	f06f 0301 	mvn.w	r3, #1
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	e002      	b.n	8006c4e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006c48:	f06f 0302 	mvn.w	r3, #2
 8006c4c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006c4e:	697b      	ldr	r3, [r7, #20]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f023 0301 	bic.w	r3, r3, #1
 8006c66:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c74:	f3ef 8305 	mrs	r3, IPSR
 8006c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c7a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006c80:	f06f 0305 	mvn.w	r3, #5
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e01f      	b.n	8006cc8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006c8e:	f06f 0303 	mvn.w	r3, #3
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e018      	b.n	8006cc8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d009      	beq.n	8006cb0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006c9c:	6938      	ldr	r0, [r7, #16]
 8006c9e:	f000 fa8b 	bl	80071b8 <xQueueGiveMutexRecursive>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d00f      	beq.n	8006cc8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006ca8:	f06f 0302 	mvn.w	r3, #2
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	e00b      	b.n	8006cc8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6938      	ldr	r0, [r7, #16]
 8006cb8:	f000 fae8 	bl	800728c <xQueueGenericSend>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d002      	beq.n	8006cc8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006cc2:	f06f 0302 	mvn.w	r3, #2
 8006cc6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006cc8:	697b      	ldr	r3, [r7, #20]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a07      	ldr	r2, [pc, #28]	; (8006d00 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ce4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4a06      	ldr	r2, [pc, #24]	; (8006d04 <vApplicationGetIdleTaskMemory+0x30>)
 8006cea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2280      	movs	r2, #128	; 0x80
 8006cf0:	601a      	str	r2, [r3, #0]
}
 8006cf2:	bf00      	nop
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000924 	.word	0x20000924
 8006d04:	200009e0 	.word	0x200009e0

08006d08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <vApplicationGetTimerTaskMemory+0x30>)
 8006d1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d26:	601a      	str	r2, [r3, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	20000be0 	.word	0x20000be0
 8006d38:	20000c9c 	.word	0x20000c9c

08006d3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f103 0208 	add.w	r2, r3, #8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295
 8006d54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f103 0208 	add.w	r2, r3, #8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f103 0208 	add.w	r2, r3, #8
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
}
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d103      	bne.n	8006dfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e00c      	b.n	8006e18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3308      	adds	r3, #8
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e002      	b.n	8006e0c <vListInsert+0x2e>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d2f6      	bcs.n	8006e06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6892      	ldr	r2, [r2, #8]
 8006e66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6852      	ldr	r2, [r2, #4]
 8006e70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d103      	bne.n	8006e84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	1e5a      	subs	r2, r3, #1
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ece:	f002 fb99 	bl	8009604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eda:	68f9      	ldr	r1, [r7, #12]
 8006edc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ede:	fb01 f303 	mul.w	r3, r1, r3
 8006ee2:	441a      	add	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efe:	3b01      	subs	r3, #1
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	441a      	add	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	22ff      	movs	r2, #255	; 0xff
 8006f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	22ff      	movs	r2, #255	; 0xff
 8006f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d114      	bne.n	8006f4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01a      	beq.n	8006f62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3310      	adds	r3, #16
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fb3d 	bl	80085b0 <xTaskRemoveFromEventList>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d012      	beq.n	8006f62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <xQueueGenericReset+0xcc>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	e009      	b.n	8006f62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3310      	adds	r3, #16
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff fef2 	bl	8006d3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3324      	adds	r3, #36	; 0x24
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff feed 	bl	8006d3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f62:	f002 fb7f 	bl	8009664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f66:	2301      	movs	r3, #1
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08e      	sub	sp, #56	; 0x38
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <xQueueGenericCreateStatic+0x52>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <xQueueGenericCreateStatic+0x56>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <xQueueGenericCreateStatic+0x58>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	623b      	str	r3, [r7, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <xQueueGenericCreateStatic+0x7e>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <xQueueGenericCreateStatic+0x82>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <xQueueGenericCreateStatic+0x84>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	61fb      	str	r3, [r7, #28]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007012:	2350      	movs	r3, #80	; 0x50
 8007014:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b50      	cmp	r3, #80	; 0x50
 800701a:	d00a      	beq.n	8007032 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	61bb      	str	r3, [r7, #24]
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007032:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00d      	beq.n	800705a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007046:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	4613      	mov	r3, r2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f83f 	bl	80070d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800705c:	4618      	mov	r0, r3
 800705e:	3730      	adds	r7, #48	; 0x30
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	613b      	str	r3, [r7, #16]
}
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	fb02 f303 	mul.w	r3, r2, r3
 8007096:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	3350      	adds	r3, #80	; 0x50
 800709c:	4618      	mov	r0, r3
 800709e:	f002 fbd3 	bl	8009848 <pvPortMalloc>
 80070a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d011      	beq.n	80070ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	3350      	adds	r3, #80	; 0x50
 80070b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070bc:	79fa      	ldrb	r2, [r7, #7]
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	4613      	mov	r3, r2
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	68b9      	ldr	r1, [r7, #8]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f805 	bl	80070d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070ce:	69bb      	ldr	r3, [r7, #24]
	}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d103      	bne.n	80070f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	e002      	b.n	80070fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007106:	2101      	movs	r1, #1
 8007108:	69b8      	ldr	r0, [r7, #24]
 800710a:	f7ff fecb 	bl	8006ea4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800713e:	2300      	movs	r3, #0
 8007140:	2200      	movs	r2, #0
 8007142:	2100      	movs	r1, #0
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f8a1 	bl	800728c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	4603      	mov	r3, r0
 800715a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	2300      	movs	r3, #0
 8007162:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	461a      	mov	r2, r3
 8007168:	6939      	ldr	r1, [r7, #16]
 800716a:	6978      	ldr	r0, [r7, #20]
 800716c:	f7ff ff7a 	bl	8007064 <xQueueGenericCreate>
 8007170:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff ffd3 	bl	800711e <prvInitialiseMutex>

		return xNewQueue;
 8007178:	68fb      	ldr	r3, [r7, #12]
	}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007182:	b580      	push	{r7, lr}
 8007184:	b088      	sub	sp, #32
 8007186:	af02      	add	r7, sp, #8
 8007188:	4603      	mov	r3, r0
 800718a:	6039      	str	r1, [r7, #0]
 800718c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800718e:	2301      	movs	r3, #1
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	2300      	movs	r3, #0
 8007194:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2200      	movs	r2, #0
 800719e:	6939      	ldr	r1, [r7, #16]
 80071a0:	6978      	ldr	r0, [r7, #20]
 80071a2:	f7ff fee7 	bl	8006f74 <xQueueGenericCreateStatic>
 80071a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff ffb8 	bl	800711e <prvInitialiseMutex>

		return xNewQueue;
 80071ae:	68fb      	ldr	r3, [r7, #12]
	}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	60fb      	str	r3, [r7, #12]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	689c      	ldr	r4, [r3, #8]
 80071e4:	f001 fba6 	bl	8008934 <xTaskGetCurrentTaskHandle>
 80071e8:	4603      	mov	r3, r0
 80071ea:	429c      	cmp	r4, r3
 80071ec:	d111      	bne.n	8007212 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	1e5a      	subs	r2, r3, #1
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d105      	bne.n	800720c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007200:	2300      	movs	r3, #0
 8007202:	2200      	movs	r2, #0
 8007204:	2100      	movs	r1, #0
 8007206:	6938      	ldr	r0, [r7, #16]
 8007208:	f000 f840 	bl	800728c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	e001      	b.n	8007216 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007216:	697b      	ldr	r3, [r7, #20]
	}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	bd90      	pop	{r4, r7, pc}

08007220 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	689c      	ldr	r4, [r3, #8]
 800724e:	f001 fb71 	bl	8008934 <xTaskGetCurrentTaskHandle>
 8007252:	4603      	mov	r3, r0
 8007254:	429c      	cmp	r4, r3
 8007256:	d107      	bne.n	8007268 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007262:	2301      	movs	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e00c      	b.n	8007282 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6938      	ldr	r0, [r7, #16]
 800726c:	f000 fa88 	bl	8007780 <xQueueSemaphoreTake>
 8007270:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007282:	697b      	ldr	r3, [r7, #20]
	}
 8007284:	4618      	mov	r0, r3
 8007286:	371c      	adds	r7, #28
 8007288:	46bd      	mov	sp, r7
 800728a:	bd90      	pop	{r4, r7, pc}

0800728c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08e      	sub	sp, #56	; 0x38
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800729a:	2300      	movs	r3, #0
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <xQueueGenericSend+0x32>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d103      	bne.n	80072cc <xQueueGenericSend+0x40>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <xQueueGenericSend+0x44>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <xQueueGenericSend+0x46>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <xQueueGenericSend+0x60>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d103      	bne.n	80072fa <xQueueGenericSend+0x6e>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <xQueueGenericSend+0x72>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xQueueGenericSend+0x74>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xQueueGenericSend+0x8e>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	623b      	str	r3, [r7, #32]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800731a:	f001 fb1b 	bl	8008954 <xTaskGetSchedulerState>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <xQueueGenericSend+0x9e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <xQueueGenericSend+0xa2>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <xQueueGenericSend+0xa4>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <xQueueGenericSend+0xbe>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	61fb      	str	r3, [r7, #28]
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800734a:	f002 f95b 	bl	8009604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007356:	429a      	cmp	r2, r3
 8007358:	d302      	bcc.n	8007360 <xQueueGenericSend+0xd4>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d129      	bne.n	80073b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007366:	f000 fb2f 	bl	80079c8 <prvCopyDataToQueue>
 800736a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b00      	cmp	r3, #0
 8007372:	d010      	beq.n	8007396 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	3324      	adds	r3, #36	; 0x24
 8007378:	4618      	mov	r0, r3
 800737a:	f001 f919 	bl	80085b0 <xTaskRemoveFromEventList>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d013      	beq.n	80073ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007384:	4b3f      	ldr	r3, [pc, #252]	; (8007484 <xQueueGenericSend+0x1f8>)
 8007386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	e00a      	b.n	80073ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d007      	beq.n	80073ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800739c:	4b39      	ldr	r3, [pc, #228]	; (8007484 <xQueueGenericSend+0x1f8>)
 800739e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80073ac:	f002 f95a 	bl	8009664 <vPortExitCritical>
				return pdPASS;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e063      	b.n	800747c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073ba:	f002 f953 	bl	8009664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	e05c      	b.n	800747c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 f953 	bl	8008678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073d2:	2301      	movs	r3, #1
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073d6:	f002 f945 	bl	8009664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073da:	f000 febf 	bl	800815c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073de:	f002 f911 	bl	8009604 <vPortEnterCritical>
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073e8:	b25b      	sxtb	r3, r3
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d103      	bne.n	80073f8 <xQueueGenericSend+0x16c>
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073fe:	b25b      	sxtb	r3, r3
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d103      	bne.n	800740e <xQueueGenericSend+0x182>
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800740e:	f002 f929 	bl	8009664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007412:	1d3a      	adds	r2, r7, #4
 8007414:	f107 0314 	add.w	r3, r7, #20
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f001 f942 	bl	80086a4 <xTaskCheckForTimeOut>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d124      	bne.n	8007470 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007428:	f000 fbc6 	bl	8007bb8 <prvIsQueueFull>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d018      	beq.n	8007464 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	3310      	adds	r3, #16
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f001 f868 	bl	8008510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007442:	f000 fb51 	bl	8007ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007446:	f000 fe97 	bl	8008178 <xTaskResumeAll>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	f47f af7c 	bne.w	800734a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007452:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <xQueueGenericSend+0x1f8>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	e772      	b.n	800734a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007466:	f000 fb3f 	bl	8007ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800746a:	f000 fe85 	bl	8008178 <xTaskResumeAll>
 800746e:	e76c      	b.n	800734a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007472:	f000 fb39 	bl	8007ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007476:	f000 fe7f 	bl	8008178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800747a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800747c:	4618      	mov	r0, r3
 800747e:	3738      	adds	r7, #56	; 0x38
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	e000ed04 	.word	0xe000ed04

08007488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b090      	sub	sp, #64	; 0x40
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <xQueueGenericSendFromISR+0x3c>
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <xQueueGenericSendFromISR+0x40>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <xQueueGenericSendFromISR+0x42>
 80074c8:	2300      	movs	r3, #0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d103      	bne.n	80074f2 <xQueueGenericSendFromISR+0x6a>
 80074ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <xQueueGenericSendFromISR+0x6e>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <xQueueGenericSendFromISR+0x70>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	623b      	str	r3, [r7, #32]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007512:	f002 f959 	bl	80097c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007516:	f3ef 8211 	mrs	r2, BASEPRI
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	61fa      	str	r2, [r7, #28]
 800752c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800752e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753a:	429a      	cmp	r2, r3
 800753c:	d302      	bcc.n	8007544 <xQueueGenericSendFromISR+0xbc>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b02      	cmp	r3, #2
 8007542:	d12f      	bne.n	80075a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800754a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800755a:	f000 fa35 	bl	80079c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800755e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007566:	d112      	bne.n	800758e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	d016      	beq.n	800759e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	3324      	adds	r3, #36	; 0x24
 8007574:	4618      	mov	r0, r3
 8007576:	f001 f81b 	bl	80085b0 <xTaskRemoveFromEventList>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00e      	beq.n	800759e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00b      	beq.n	800759e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e007      	b.n	800759e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800758e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007592:	3301      	adds	r3, #1
 8007594:	b2db      	uxtb	r3, r3
 8007596:	b25a      	sxtb	r2, r3
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800759e:	2301      	movs	r3, #1
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80075a2:	e001      	b.n	80075a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3740      	adds	r7, #64	; 0x40
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08c      	sub	sp, #48	; 0x30
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <xQueueReceive+0x30>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	623b      	str	r3, [r7, #32]
}
 80075ec:	bf00      	nop
 80075ee:	e7fe      	b.n	80075ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <xQueueReceive+0x3e>
 80075f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <xQueueReceive+0x42>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <xQueueReceive+0x44>
 8007602:	2300      	movs	r3, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <xQueueReceive+0x5e>
	__asm volatile
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	61fb      	str	r3, [r7, #28]
}
 800761a:	bf00      	nop
 800761c:	e7fe      	b.n	800761c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800761e:	f001 f999 	bl	8008954 <xTaskGetSchedulerState>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <xQueueReceive+0x6e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <xQueueReceive+0x72>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <xQueueReceive+0x74>
 8007632:	2300      	movs	r3, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <xQueueReceive+0x8e>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	61bb      	str	r3, [r7, #24]
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800764e:	f001 ffd9 	bl	8009604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01f      	beq.n	800769e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007662:	f000 fa1b 	bl	8007a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	1e5a      	subs	r2, r3, #1
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00f      	beq.n	8007696 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	3310      	adds	r3, #16
 800767a:	4618      	mov	r0, r3
 800767c:	f000 ff98 	bl	80085b0 <xTaskRemoveFromEventList>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007686:	4b3d      	ldr	r3, [pc, #244]	; (800777c <xQueueReceive+0x1bc>)
 8007688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007696:	f001 ffe5 	bl	8009664 <vPortExitCritical>
				return pdPASS;
 800769a:	2301      	movs	r3, #1
 800769c:	e069      	b.n	8007772 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d103      	bne.n	80076ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076a4:	f001 ffde 	bl	8009664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e062      	b.n	8007772 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076b2:	f107 0310 	add.w	r3, r7, #16
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 ffde 	bl	8008678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076bc:	2301      	movs	r3, #1
 80076be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076c0:	f001 ffd0 	bl	8009664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076c4:	f000 fd4a 	bl	800815c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076c8:	f001 ff9c 	bl	8009604 <vPortEnterCritical>
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076d2:	b25b      	sxtb	r3, r3
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d103      	bne.n	80076e2 <xQueueReceive+0x122>
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e8:	b25b      	sxtb	r3, r3
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d103      	bne.n	80076f8 <xQueueReceive+0x138>
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076f8:	f001 ffb4 	bl	8009664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076fc:	1d3a      	adds	r2, r7, #4
 80076fe:	f107 0310 	add.w	r3, r7, #16
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f000 ffcd 	bl	80086a4 <xTaskCheckForTimeOut>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d123      	bne.n	8007758 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007712:	f000 fa3b 	bl	8007b8c <prvIsQueueEmpty>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d017      	beq.n	800774c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	3324      	adds	r3, #36	; 0x24
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	4611      	mov	r1, r2
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fef3 	bl	8008510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800772a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772c:	f000 f9dc 	bl	8007ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007730:	f000 fd22 	bl	8008178 <xTaskResumeAll>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d189      	bne.n	800764e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800773a:	4b10      	ldr	r3, [pc, #64]	; (800777c <xQueueReceive+0x1bc>)
 800773c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	e780      	b.n	800764e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800774c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800774e:	f000 f9cb 	bl	8007ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007752:	f000 fd11 	bl	8008178 <xTaskResumeAll>
 8007756:	e77a      	b.n	800764e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800775a:	f000 f9c5 	bl	8007ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800775e:	f000 fd0b 	bl	8008178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007764:	f000 fa12 	bl	8007b8c <prvIsQueueEmpty>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	f43f af6f 	beq.w	800764e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007770:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007772:	4618      	mov	r0, r3
 8007774:	3730      	adds	r7, #48	; 0x30
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	e000ed04 	.word	0xe000ed04

08007780 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08e      	sub	sp, #56	; 0x38
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800778a:	2300      	movs	r3, #0
 800778c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007792:	2300      	movs	r3, #0
 8007794:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	623b      	str	r3, [r7, #32]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	61fb      	str	r3, [r7, #28]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077d0:	f001 f8c0 	bl	8008954 <xTaskGetSchedulerState>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <xQueueSemaphoreTake+0x60>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <xQueueSemaphoreTake+0x64>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e000      	b.n	80077e6 <xQueueSemaphoreTake+0x66>
 80077e4:	2300      	movs	r3, #0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	61bb      	str	r3, [r7, #24]
}
 80077fc:	bf00      	nop
 80077fe:	e7fe      	b.n	80077fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007800:	f001 ff00 	bl	8009604 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	d024      	beq.n	800785a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	1e5a      	subs	r2, r3, #1
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007820:	f001 fa0e 	bl	8008c40 <pvTaskIncrementMutexHeldCount>
 8007824:	4602      	mov	r2, r0
 8007826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007828:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00f      	beq.n	8007852 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	3310      	adds	r3, #16
 8007836:	4618      	mov	r0, r3
 8007838:	f000 feba 	bl	80085b0 <xTaskRemoveFromEventList>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d007      	beq.n	8007852 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007842:	4b54      	ldr	r3, [pc, #336]	; (8007994 <xQueueSemaphoreTake+0x214>)
 8007844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007852:	f001 ff07 	bl	8009664 <vPortExitCritical>
				return pdPASS;
 8007856:	2301      	movs	r3, #1
 8007858:	e097      	b.n	800798a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d111      	bne.n	8007884 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	617b      	str	r3, [r7, #20]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800787c:	f001 fef2 	bl	8009664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007880:	2300      	movs	r3, #0
 8007882:	e082      	b.n	800798a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800788a:	f107 030c 	add.w	r3, r7, #12
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fef2 	bl	8008678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007898:	f001 fee4 	bl	8009664 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800789c:	f000 fc5e 	bl	800815c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078a0:	f001 feb0 	bl	8009604 <vPortEnterCritical>
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078aa:	b25b      	sxtb	r3, r3
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d103      	bne.n	80078ba <xQueueSemaphoreTake+0x13a>
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c0:	b25b      	sxtb	r3, r3
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d103      	bne.n	80078d0 <xQueueSemaphoreTake+0x150>
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d0:	f001 fec8 	bl	8009664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078d4:	463a      	mov	r2, r7
 80078d6:	f107 030c 	add.w	r3, r7, #12
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fee1 	bl	80086a4 <xTaskCheckForTimeOut>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d132      	bne.n	800794e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ea:	f000 f94f 	bl	8007b8c <prvIsQueueEmpty>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d026      	beq.n	8007942 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80078fc:	f001 fe82 	bl	8009604 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	4618      	mov	r0, r3
 8007906:	f001 f843 	bl	8008990 <xTaskPriorityInherit>
 800790a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800790c:	f001 feaa 	bl	8009664 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007912:	3324      	adds	r3, #36	; 0x24
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	4611      	mov	r1, r2
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fdf9 	bl	8008510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800791e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007920:	f000 f8e2 	bl	8007ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007924:	f000 fc28 	bl	8008178 <xTaskResumeAll>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	f47f af68 	bne.w	8007800 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007930:	4b18      	ldr	r3, [pc, #96]	; (8007994 <xQueueSemaphoreTake+0x214>)
 8007932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	e75e      	b.n	8007800 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007944:	f000 f8d0 	bl	8007ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007948:	f000 fc16 	bl	8008178 <xTaskResumeAll>
 800794c:	e758      	b.n	8007800 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800794e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007950:	f000 f8ca 	bl	8007ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007954:	f000 fc10 	bl	8008178 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800795a:	f000 f917 	bl	8007b8c <prvIsQueueEmpty>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	f43f af4d 	beq.w	8007800 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00d      	beq.n	8007988 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800796c:	f001 fe4a 	bl	8009604 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007972:	f000 f811 	bl	8007998 <prvGetDisinheritPriorityAfterTimeout>
 8007976:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800797e:	4618      	mov	r0, r3
 8007980:	f001 f8dc 	bl	8008b3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007984:	f001 fe6e 	bl	8009664 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007988:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800798a:	4618      	mov	r0, r3
 800798c:	3738      	adds	r7, #56	; 0x38
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	e000ed04 	.word	0xe000ed04

08007998 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d006      	beq.n	80079b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e001      	b.n	80079ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80079ba:	68fb      	ldr	r3, [r7, #12]
	}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10d      	bne.n	8007a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d14d      	bne.n	8007a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 f834 	bl	8008a60 <xTaskPriorityDisinherit>
 80079f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	609a      	str	r2, [r3, #8]
 8007a00:	e043      	b.n	8007a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d119      	bne.n	8007a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6858      	ldr	r0, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a10:	461a      	mov	r2, r3
 8007a12:	68b9      	ldr	r1, [r7, #8]
 8007a14:	f002 fa25 	bl	8009e62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d32b      	bcc.n	8007a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	e026      	b.n	8007a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68d8      	ldr	r0, [r3, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	461a      	mov	r2, r3
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	f002 fa0b 	bl	8009e62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	425b      	negs	r3, r3
 8007a56:	441a      	add	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d207      	bcs.n	8007a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	425b      	negs	r3, r3
 8007a72:	441a      	add	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d105      	bne.n	8007a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a92:	697b      	ldr	r3, [r7, #20]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d018      	beq.n	8007ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	441a      	add	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d303      	bcc.n	8007ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68d9      	ldr	r1, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6838      	ldr	r0, [r7, #0]
 8007adc:	f002 f9c1 	bl	8009e62 <memcpy>
	}
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007af0:	f001 fd88 	bl	8009604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007afc:	e011      	b.n	8007b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d012      	beq.n	8007b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3324      	adds	r3, #36	; 0x24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fd50 	bl	80085b0 <xTaskRemoveFromEventList>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b16:	f000 fe27 	bl	8008768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dce9      	bgt.n	8007afe <prvUnlockQueue+0x16>
 8007b2a:	e000      	b.n	8007b2e <prvUnlockQueue+0x46>
					break;
 8007b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	22ff      	movs	r2, #255	; 0xff
 8007b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b36:	f001 fd95 	bl	8009664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b3a:	f001 fd63 	bl	8009604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b46:	e011      	b.n	8007b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d012      	beq.n	8007b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3310      	adds	r3, #16
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fd2b 	bl	80085b0 <xTaskRemoveFromEventList>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b60:	f000 fe02 	bl	8008768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dce9      	bgt.n	8007b48 <prvUnlockQueue+0x60>
 8007b74:	e000      	b.n	8007b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	22ff      	movs	r2, #255	; 0xff
 8007b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b80:	f001 fd70 	bl	8009664 <vPortExitCritical>
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b94:	f001 fd36 	bl	8009604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d102      	bne.n	8007ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e001      	b.n	8007baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007baa:	f001 fd5b 	bl	8009664 <vPortExitCritical>

	return xReturn;
 8007bae:	68fb      	ldr	r3, [r7, #12]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bc0:	f001 fd20 	bl	8009604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d102      	bne.n	8007bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e001      	b.n	8007bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bda:	f001 fd43 	bl	8009664 <vPortExitCritical>

	return xReturn;
 8007bde:	68fb      	ldr	r3, [r7, #12]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	e014      	b.n	8007c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007bf8:	4a0f      	ldr	r2, [pc, #60]	; (8007c38 <vQueueAddToRegistry+0x50>)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10b      	bne.n	8007c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c04:	490c      	ldr	r1, [pc, #48]	; (8007c38 <vQueueAddToRegistry+0x50>)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	; (8007c38 <vQueueAddToRegistry+0x50>)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c1a:	e006      	b.n	8007c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b07      	cmp	r3, #7
 8007c26:	d9e7      	bls.n	8007bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	2000109c 	.word	0x2000109c

08007c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c4c:	f001 fcda 	bl	8009604 <vPortEnterCritical>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d103      	bne.n	8007c66 <vQueueWaitForMessageRestricted+0x2a>
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c6c:	b25b      	sxtb	r3, r3
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d103      	bne.n	8007c7c <vQueueWaitForMessageRestricted+0x40>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c7c:	f001 fcf2 	bl	8009664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d106      	bne.n	8007c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	3324      	adds	r3, #36	; 0x24
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fc61 	bl	8008558 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c96:	6978      	ldr	r0, [r7, #20]
 8007c98:	f7ff ff26 	bl	8007ae8 <prvUnlockQueue>
	}
 8007c9c:	bf00      	nop
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08e      	sub	sp, #56	; 0x38
 8007ca8:	af04      	add	r7, sp, #16
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	623b      	str	r3, [r7, #32]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xTaskCreateStatic+0x46>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	61fb      	str	r3, [r7, #28]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cea:	23bc      	movs	r3, #188	; 0xbc
 8007cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2bbc      	cmp	r3, #188	; 0xbc
 8007cf2:	d00a      	beq.n	8007d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	61bb      	str	r3, [r7, #24]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01e      	beq.n	8007d50 <xTaskCreateStatic+0xac>
 8007d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01b      	beq.n	8007d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	2202      	movs	r2, #2
 8007d26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9303      	str	r3, [sp, #12]
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	9302      	str	r3, [sp, #8]
 8007d32:	f107 0314 	add.w	r3, r7, #20
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f850 	bl	8007de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d4a:	f000 f8f3 	bl	8007f34 <prvAddNewTaskToReadyList>
 8007d4e:	e001      	b.n	8007d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d54:	697b      	ldr	r3, [r7, #20]
	}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3728      	adds	r7, #40	; 0x28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b08c      	sub	sp, #48	; 0x30
 8007d62:	af04      	add	r7, sp, #16
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fd68 	bl	8009848 <pvPortMalloc>
 8007d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d80:	20bc      	movs	r0, #188	; 0xbc
 8007d82:	f001 fd61 	bl	8009848 <pvPortMalloc>
 8007d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
 8007d94:	e005      	b.n	8007da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d96:	6978      	ldr	r0, [r7, #20]
 8007d98:	f001 fe22 	bl	80099e0 <vPortFree>
 8007d9c:	e001      	b.n	8007da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d017      	beq.n	8007dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	2300      	movs	r3, #0
 8007db4:	9303      	str	r3, [sp, #12]
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	9302      	str	r3, [sp, #8]
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 f80e 	bl	8007de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dcc:	69f8      	ldr	r0, [r7, #28]
 8007dce:	f000 f8b1 	bl	8007f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	e002      	b.n	8007dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007dde:	69bb      	ldr	r3, [r7, #24]
	}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b088      	sub	sp, #32
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	461a      	mov	r2, r3
 8007e00:	21a5      	movs	r1, #165	; 0xa5
 8007e02:	f002 f83c 	bl	8009e7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e10:	3b01      	subs	r3, #1
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	f023 0307 	bic.w	r3, r3, #7
 8007e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	617b      	str	r3, [r7, #20]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d01f      	beq.n	8007e86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e46:	2300      	movs	r3, #0
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	e012      	b.n	8007e72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	4413      	add	r3, r2
 8007e52:	7819      	ldrb	r1, [r3, #0]
 8007e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	3334      	adds	r3, #52	; 0x34
 8007e5c:	460a      	mov	r2, r1
 8007e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d006      	beq.n	8007e7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	2b0f      	cmp	r3, #15
 8007e76:	d9e9      	bls.n	8007e4c <prvInitialiseNewTask+0x64>
 8007e78:	e000      	b.n	8007e7c <prvInitialiseNewTask+0x94>
			{
				break;
 8007e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e84:	e003      	b.n	8007e8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e90:	2b37      	cmp	r3, #55	; 0x37
 8007e92:	d901      	bls.n	8007e98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e94:	2337      	movs	r3, #55	; 0x37
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	3304      	adds	r3, #4
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe ff64 	bl	8006d7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	3318      	adds	r3, #24
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe ff5f 	bl	8006d7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	3354      	adds	r3, #84	; 0x54
 8007ee8:	2260      	movs	r2, #96	; 0x60
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 ffc6 	bl	8009e7e <memset>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	4a0c      	ldr	r2, [pc, #48]	; (8007f28 <prvInitialiseNewTask+0x140>)
 8007ef6:	659a      	str	r2, [r3, #88]	; 0x58
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	4a0c      	ldr	r2, [pc, #48]	; (8007f2c <prvInitialiseNewTask+0x144>)
 8007efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	4a0b      	ldr	r2, [pc, #44]	; (8007f30 <prvInitialiseNewTask+0x148>)
 8007f02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	68f9      	ldr	r1, [r7, #12]
 8007f08:	69b8      	ldr	r0, [r7, #24]
 8007f0a:	f001 fa4f 	bl	80093ac <pxPortInitialiseStack>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f20:	bf00      	nop
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	0800affc 	.word	0x0800affc
 8007f2c:	0800b01c 	.word	0x0800b01c
 8007f30:	0800afdc 	.word	0x0800afdc

08007f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f3c:	f001 fb62 	bl	8009604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f40:	4b2d      	ldr	r3, [pc, #180]	; (8007ff8 <prvAddNewTaskToReadyList+0xc4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3301      	adds	r3, #1
 8007f46:	4a2c      	ldr	r2, [pc, #176]	; (8007ff8 <prvAddNewTaskToReadyList+0xc4>)
 8007f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f4a:	4b2c      	ldr	r3, [pc, #176]	; (8007ffc <prvAddNewTaskToReadyList+0xc8>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d109      	bne.n	8007f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f52:	4a2a      	ldr	r2, [pc, #168]	; (8007ffc <prvAddNewTaskToReadyList+0xc8>)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f58:	4b27      	ldr	r3, [pc, #156]	; (8007ff8 <prvAddNewTaskToReadyList+0xc4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d110      	bne.n	8007f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f60:	f000 fc26 	bl	80087b0 <prvInitialiseTaskLists>
 8007f64:	e00d      	b.n	8007f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f66:	4b26      	ldr	r3, [pc, #152]	; (8008000 <prvAddNewTaskToReadyList+0xcc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f6e:	4b23      	ldr	r3, [pc, #140]	; (8007ffc <prvAddNewTaskToReadyList+0xc8>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d802      	bhi.n	8007f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <prvAddNewTaskToReadyList+0xc8>)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f82:	4b20      	ldr	r3, [pc, #128]	; (8008004 <prvAddNewTaskToReadyList+0xd0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3301      	adds	r3, #1
 8007f88:	4a1e      	ldr	r2, [pc, #120]	; (8008004 <prvAddNewTaskToReadyList+0xd0>)
 8007f8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f8c:	4b1d      	ldr	r3, [pc, #116]	; (8008004 <prvAddNewTaskToReadyList+0xd0>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f98:	4b1b      	ldr	r3, [pc, #108]	; (8008008 <prvAddNewTaskToReadyList+0xd4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d903      	bls.n	8007fa8 <prvAddNewTaskToReadyList+0x74>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	4a18      	ldr	r2, [pc, #96]	; (8008008 <prvAddNewTaskToReadyList+0xd4>)
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4a15      	ldr	r2, [pc, #84]	; (800800c <prvAddNewTaskToReadyList+0xd8>)
 8007fb6:	441a      	add	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f7fe fee9 	bl	8006d96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fc4:	f001 fb4e 	bl	8009664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <prvAddNewTaskToReadyList+0xcc>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00e      	beq.n	8007fee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <prvAddNewTaskToReadyList+0xc8>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d207      	bcs.n	8007fee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fde:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <prvAddNewTaskToReadyList+0xdc>)
 8007fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	200015b0 	.word	0x200015b0
 8007ffc:	200010dc 	.word	0x200010dc
 8008000:	200015bc 	.word	0x200015bc
 8008004:	200015cc 	.word	0x200015cc
 8008008:	200015b8 	.word	0x200015b8
 800800c:	200010e0 	.word	0x200010e0
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d017      	beq.n	8008056 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008026:	4b13      	ldr	r3, [pc, #76]	; (8008074 <vTaskDelay+0x60>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <vTaskDelay+0x30>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	60bb      	str	r3, [r7, #8]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008044:	f000 f88a 	bl	800815c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008048:	2100      	movs	r1, #0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fe0c 	bl	8008c68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008050:	f000 f892 	bl	8008178 <xTaskResumeAll>
 8008054:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d107      	bne.n	800806c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <vTaskDelay+0x64>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800806c:	bf00      	nop
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200015d8 	.word	0x200015d8
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800808a:	463a      	mov	r2, r7
 800808c:	1d39      	adds	r1, r7, #4
 800808e:	f107 0308 	add.w	r3, r7, #8
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fe1e 	bl	8006cd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	9202      	str	r2, [sp, #8]
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	2300      	movs	r3, #0
 80080a8:	460a      	mov	r2, r1
 80080aa:	4924      	ldr	r1, [pc, #144]	; (800813c <vTaskStartScheduler+0xc0>)
 80080ac:	4824      	ldr	r0, [pc, #144]	; (8008140 <vTaskStartScheduler+0xc4>)
 80080ae:	f7ff fdf9 	bl	8007ca4 <xTaskCreateStatic>
 80080b2:	4603      	mov	r3, r0
 80080b4:	4a23      	ldr	r2, [pc, #140]	; (8008144 <vTaskStartScheduler+0xc8>)
 80080b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080b8:	4b22      	ldr	r3, [pc, #136]	; (8008144 <vTaskStartScheduler+0xc8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080c0:	2301      	movs	r3, #1
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e001      	b.n	80080ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d102      	bne.n	80080d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080d0:	f000 fe1e 	bl	8008d10 <xTimerCreateTimerTask>
 80080d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d11b      	bne.n	8008114 <vTaskStartScheduler+0x98>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	613b      	str	r3, [r7, #16]
}
 80080ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080f0:	4b15      	ldr	r3, [pc, #84]	; (8008148 <vTaskStartScheduler+0xcc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3354      	adds	r3, #84	; 0x54
 80080f6:	4a15      	ldr	r2, [pc, #84]	; (800814c <vTaskStartScheduler+0xd0>)
 80080f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080fa:	4b15      	ldr	r3, [pc, #84]	; (8008150 <vTaskStartScheduler+0xd4>)
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008102:	4b14      	ldr	r3, [pc, #80]	; (8008154 <vTaskStartScheduler+0xd8>)
 8008104:	2201      	movs	r2, #1
 8008106:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008108:	4b13      	ldr	r3, [pc, #76]	; (8008158 <vTaskStartScheduler+0xdc>)
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800810e:	f001 f9d7 	bl	80094c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008112:	e00e      	b.n	8008132 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811a:	d10a      	bne.n	8008132 <vTaskStartScheduler+0xb6>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	60fb      	str	r3, [r7, #12]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <vTaskStartScheduler+0xb4>
}
 8008132:	bf00      	nop
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	0800af0c 	.word	0x0800af0c
 8008140:	08008781 	.word	0x08008781
 8008144:	200015d4 	.word	0x200015d4
 8008148:	200010dc 	.word	0x200010dc
 800814c:	20000018 	.word	0x20000018
 8008150:	200015d0 	.word	0x200015d0
 8008154:	200015bc 	.word	0x200015bc
 8008158:	200015b4 	.word	0x200015b4

0800815c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008160:	4b04      	ldr	r3, [pc, #16]	; (8008174 <vTaskSuspendAll+0x18>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3301      	adds	r3, #1
 8008166:	4a03      	ldr	r2, [pc, #12]	; (8008174 <vTaskSuspendAll+0x18>)
 8008168:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800816a:	bf00      	nop
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	200015d8 	.word	0x200015d8

08008178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008182:	2300      	movs	r3, #0
 8008184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008186:	4b42      	ldr	r3, [pc, #264]	; (8008290 <xTaskResumeAll+0x118>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	603b      	str	r3, [r7, #0]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081a4:	f001 fa2e 	bl	8009604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081a8:	4b39      	ldr	r3, [pc, #228]	; (8008290 <xTaskResumeAll+0x118>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	4a38      	ldr	r2, [pc, #224]	; (8008290 <xTaskResumeAll+0x118>)
 80081b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b2:	4b37      	ldr	r3, [pc, #220]	; (8008290 <xTaskResumeAll+0x118>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d162      	bne.n	8008280 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081ba:	4b36      	ldr	r3, [pc, #216]	; (8008294 <xTaskResumeAll+0x11c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d05e      	beq.n	8008280 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081c2:	e02f      	b.n	8008224 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c4:	4b34      	ldr	r3, [pc, #208]	; (8008298 <xTaskResumeAll+0x120>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3318      	adds	r3, #24
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe fe3d 	bl	8006e50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3304      	adds	r3, #4
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fe38 	bl	8006e50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	4b2d      	ldr	r3, [pc, #180]	; (800829c <xTaskResumeAll+0x124>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d903      	bls.n	80081f4 <xTaskResumeAll+0x7c>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	4a2a      	ldr	r2, [pc, #168]	; (800829c <xTaskResumeAll+0x124>)
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4a27      	ldr	r2, [pc, #156]	; (80082a0 <xTaskResumeAll+0x128>)
 8008202:	441a      	add	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3304      	adds	r3, #4
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f7fe fdc3 	bl	8006d96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <xTaskResumeAll+0x12c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	429a      	cmp	r2, r3
 800821c:	d302      	bcc.n	8008224 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800821e:	4b22      	ldr	r3, [pc, #136]	; (80082a8 <xTaskResumeAll+0x130>)
 8008220:	2201      	movs	r2, #1
 8008222:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008224:	4b1c      	ldr	r3, [pc, #112]	; (8008298 <xTaskResumeAll+0x120>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1cb      	bne.n	80081c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008232:	f000 fb5f 	bl	80088f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008236:	4b1d      	ldr	r3, [pc, #116]	; (80082ac <xTaskResumeAll+0x134>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d010      	beq.n	8008264 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008242:	f000 f847 	bl	80082d4 <xTaskIncrementTick>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d002      	beq.n	8008252 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800824c:	4b16      	ldr	r3, [pc, #88]	; (80082a8 <xTaskResumeAll+0x130>)
 800824e:	2201      	movs	r2, #1
 8008250:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3b01      	subs	r3, #1
 8008256:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f1      	bne.n	8008242 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800825e:	4b13      	ldr	r3, [pc, #76]	; (80082ac <xTaskResumeAll+0x134>)
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008264:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <xTaskResumeAll+0x130>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d009      	beq.n	8008280 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800826c:	2301      	movs	r3, #1
 800826e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008270:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <xTaskResumeAll+0x138>)
 8008272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008280:	f001 f9f0 	bl	8009664 <vPortExitCritical>

	return xAlreadyYielded;
 8008284:	68bb      	ldr	r3, [r7, #8]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	200015d8 	.word	0x200015d8
 8008294:	200015b0 	.word	0x200015b0
 8008298:	20001570 	.word	0x20001570
 800829c:	200015b8 	.word	0x200015b8
 80082a0:	200010e0 	.word	0x200010e0
 80082a4:	200010dc 	.word	0x200010dc
 80082a8:	200015c4 	.word	0x200015c4
 80082ac:	200015c0 	.word	0x200015c0
 80082b0:	e000ed04 	.word	0xe000ed04

080082b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <xTaskGetTickCount+0x1c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082c0:	687b      	ldr	r3, [r7, #4]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	200015b4 	.word	0x200015b4

080082d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082de:	4b4f      	ldr	r3, [pc, #316]	; (800841c <xTaskIncrementTick+0x148>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 808f 	bne.w	8008406 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082e8:	4b4d      	ldr	r3, [pc, #308]	; (8008420 <xTaskIncrementTick+0x14c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082f0:	4a4b      	ldr	r2, [pc, #300]	; (8008420 <xTaskIncrementTick+0x14c>)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d120      	bne.n	800833e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80082fc:	4b49      	ldr	r3, [pc, #292]	; (8008424 <xTaskIncrementTick+0x150>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <xTaskIncrementTick+0x48>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	603b      	str	r3, [r7, #0]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xTaskIncrementTick+0x46>
 800831c:	4b41      	ldr	r3, [pc, #260]	; (8008424 <xTaskIncrementTick+0x150>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	4b41      	ldr	r3, [pc, #260]	; (8008428 <xTaskIncrementTick+0x154>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a3f      	ldr	r2, [pc, #252]	; (8008424 <xTaskIncrementTick+0x150>)
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	4a3f      	ldr	r2, [pc, #252]	; (8008428 <xTaskIncrementTick+0x154>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	4b3e      	ldr	r3, [pc, #248]	; (800842c <xTaskIncrementTick+0x158>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	4a3d      	ldr	r2, [pc, #244]	; (800842c <xTaskIncrementTick+0x158>)
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	f000 fadb 	bl	80088f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800833e:	4b3c      	ldr	r3, [pc, #240]	; (8008430 <xTaskIncrementTick+0x15c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	429a      	cmp	r2, r3
 8008346:	d349      	bcc.n	80083dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008348:	4b36      	ldr	r3, [pc, #216]	; (8008424 <xTaskIncrementTick+0x150>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008352:	4b37      	ldr	r3, [pc, #220]	; (8008430 <xTaskIncrementTick+0x15c>)
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	601a      	str	r2, [r3, #0]
					break;
 800835a:	e03f      	b.n	80083dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835c:	4b31      	ldr	r3, [pc, #196]	; (8008424 <xTaskIncrementTick+0x150>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d203      	bcs.n	800837c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008374:	4a2e      	ldr	r2, [pc, #184]	; (8008430 <xTaskIncrementTick+0x15c>)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800837a:	e02f      	b.n	80083dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3304      	adds	r3, #4
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe fd65 	bl	8006e50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	3318      	adds	r3, #24
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fd5c 	bl	8006e50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	4b25      	ldr	r3, [pc, #148]	; (8008434 <xTaskIncrementTick+0x160>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d903      	bls.n	80083ac <xTaskIncrementTick+0xd8>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a22      	ldr	r2, [pc, #136]	; (8008434 <xTaskIncrementTick+0x160>)
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4a1f      	ldr	r2, [pc, #124]	; (8008438 <xTaskIncrementTick+0x164>)
 80083ba:	441a      	add	r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	3304      	adds	r3, #4
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7fe fce7 	bl	8006d96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083cc:	4b1b      	ldr	r3, [pc, #108]	; (800843c <xTaskIncrementTick+0x168>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d3b8      	bcc.n	8008348 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80083d6:	2301      	movs	r3, #1
 80083d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083da:	e7b5      	b.n	8008348 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083dc:	4b17      	ldr	r3, [pc, #92]	; (800843c <xTaskIncrementTick+0x168>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e2:	4915      	ldr	r1, [pc, #84]	; (8008438 <xTaskIncrementTick+0x164>)
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d901      	bls.n	80083f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083f8:	4b11      	ldr	r3, [pc, #68]	; (8008440 <xTaskIncrementTick+0x16c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d007      	beq.n	8008410 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e004      	b.n	8008410 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008406:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <xTaskIncrementTick+0x170>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3301      	adds	r3, #1
 800840c:	4a0d      	ldr	r2, [pc, #52]	; (8008444 <xTaskIncrementTick+0x170>)
 800840e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008410:	697b      	ldr	r3, [r7, #20]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200015d8 	.word	0x200015d8
 8008420:	200015b4 	.word	0x200015b4
 8008424:	20001568 	.word	0x20001568
 8008428:	2000156c 	.word	0x2000156c
 800842c:	200015c8 	.word	0x200015c8
 8008430:	200015d0 	.word	0x200015d0
 8008434:	200015b8 	.word	0x200015b8
 8008438:	200010e0 	.word	0x200010e0
 800843c:	200010dc 	.word	0x200010dc
 8008440:	200015c4 	.word	0x200015c4
 8008444:	200015c0 	.word	0x200015c0

08008448 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800844e:	4b2a      	ldr	r3, [pc, #168]	; (80084f8 <vTaskSwitchContext+0xb0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008456:	4b29      	ldr	r3, [pc, #164]	; (80084fc <vTaskSwitchContext+0xb4>)
 8008458:	2201      	movs	r2, #1
 800845a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800845c:	e046      	b.n	80084ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800845e:	4b27      	ldr	r3, [pc, #156]	; (80084fc <vTaskSwitchContext+0xb4>)
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008464:	4b26      	ldr	r3, [pc, #152]	; (8008500 <vTaskSwitchContext+0xb8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	e010      	b.n	800848e <vTaskSwitchContext+0x46>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10a      	bne.n	8008488 <vTaskSwitchContext+0x40>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	607b      	str	r3, [r7, #4]
}
 8008484:	bf00      	nop
 8008486:	e7fe      	b.n	8008486 <vTaskSwitchContext+0x3e>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3b01      	subs	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	491d      	ldr	r1, [pc, #116]	; (8008504 <vTaskSwitchContext+0xbc>)
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0e4      	beq.n	800846c <vTaskSwitchContext+0x24>
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4a15      	ldr	r2, [pc, #84]	; (8008504 <vTaskSwitchContext+0xbc>)
 80084ae:	4413      	add	r3, r2
 80084b0:	60bb      	str	r3, [r7, #8]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	605a      	str	r2, [r3, #4]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	3308      	adds	r3, #8
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d104      	bne.n	80084d2 <vTaskSwitchContext+0x8a>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	605a      	str	r2, [r3, #4]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <vTaskSwitchContext+0xc0>)
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	4a08      	ldr	r2, [pc, #32]	; (8008500 <vTaskSwitchContext+0xb8>)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084e2:	4b09      	ldr	r3, [pc, #36]	; (8008508 <vTaskSwitchContext+0xc0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3354      	adds	r3, #84	; 0x54
 80084e8:	4a08      	ldr	r2, [pc, #32]	; (800850c <vTaskSwitchContext+0xc4>)
 80084ea:	6013      	str	r3, [r2, #0]
}
 80084ec:	bf00      	nop
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	200015d8 	.word	0x200015d8
 80084fc:	200015c4 	.word	0x200015c4
 8008500:	200015b8 	.word	0x200015b8
 8008504:	200010e0 	.word	0x200010e0
 8008508:	200010dc 	.word	0x200010dc
 800850c:	20000018 	.word	0x20000018

08008510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	60fb      	str	r3, [r7, #12]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <vTaskPlaceOnEventList+0x44>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3318      	adds	r3, #24
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe fc4d 	bl	8006dde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008544:	2101      	movs	r1, #1
 8008546:	6838      	ldr	r0, [r7, #0]
 8008548:	f000 fb8e 	bl	8008c68 <prvAddCurrentTaskToDelayedList>
}
 800854c:	bf00      	nop
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	200010dc 	.word	0x200010dc

08008558 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	617b      	str	r3, [r7, #20]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <vTaskPlaceOnEventListRestricted+0x54>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3318      	adds	r3, #24
 8008586:	4619      	mov	r1, r3
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f7fe fc04 	bl	8006d96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008594:	f04f 33ff 	mov.w	r3, #4294967295
 8008598:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800859a:	6879      	ldr	r1, [r7, #4]
 800859c:	68b8      	ldr	r0, [r7, #8]
 800859e:	f000 fb63 	bl	8008c68 <prvAddCurrentTaskToDelayedList>
	}
 80085a2:	bf00      	nop
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	200010dc 	.word	0x200010dc

080085b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	60fb      	str	r3, [r7, #12]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3318      	adds	r3, #24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fc35 	bl	8006e50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e6:	4b1e      	ldr	r3, [pc, #120]	; (8008660 <xTaskRemoveFromEventList+0xb0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d11d      	bne.n	800862a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fc2c 	bl	8006e50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4b19      	ldr	r3, [pc, #100]	; (8008664 <xTaskRemoveFromEventList+0xb4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <xTaskRemoveFromEventList+0x5c>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	4a16      	ldr	r2, [pc, #88]	; (8008664 <xTaskRemoveFromEventList+0xb4>)
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4a13      	ldr	r2, [pc, #76]	; (8008668 <xTaskRemoveFromEventList+0xb8>)
 800861a:	441a      	add	r2, r3
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7fe fbb7 	bl	8006d96 <vListInsertEnd>
 8008628:	e005      	b.n	8008636 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	3318      	adds	r3, #24
 800862e:	4619      	mov	r1, r3
 8008630:	480e      	ldr	r0, [pc, #56]	; (800866c <xTaskRemoveFromEventList+0xbc>)
 8008632:	f7fe fbb0 	bl	8006d96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863a:	4b0d      	ldr	r3, [pc, #52]	; (8008670 <xTaskRemoveFromEventList+0xc0>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d905      	bls.n	8008650 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <xTaskRemoveFromEventList+0xc4>)
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e001      	b.n	8008654 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008654:	697b      	ldr	r3, [r7, #20]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200015d8 	.word	0x200015d8
 8008664:	200015b8 	.word	0x200015b8
 8008668:	200010e0 	.word	0x200010e0
 800866c:	20001570 	.word	0x20001570
 8008670:	200010dc 	.word	0x200010dc
 8008674:	200015c4 	.word	0x200015c4

08008678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008680:	4b06      	ldr	r3, [pc, #24]	; (800869c <vTaskInternalSetTimeOutState+0x24>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008688:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <vTaskInternalSetTimeOutState+0x28>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	605a      	str	r2, [r3, #4]
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	200015c8 	.word	0x200015c8
 80086a0:	200015b4 	.word	0x200015b4

080086a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10a      	bne.n	80086ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	613b      	str	r3, [r7, #16]
}
 80086c6:	bf00      	nop
 80086c8:	e7fe      	b.n	80086c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10a      	bne.n	80086e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80086e6:	f000 ff8d 	bl	8009604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086ea:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <xTaskCheckForTimeOut+0xbc>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008702:	d102      	bne.n	800870a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008704:	2300      	movs	r3, #0
 8008706:	61fb      	str	r3, [r7, #28]
 8008708:	e023      	b.n	8008752 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b15      	ldr	r3, [pc, #84]	; (8008764 <xTaskCheckForTimeOut+0xc0>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d007      	beq.n	8008726 <xTaskCheckForTimeOut+0x82>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	429a      	cmp	r2, r3
 800871e:	d302      	bcc.n	8008726 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008720:	2301      	movs	r3, #1
 8008722:	61fb      	str	r3, [r7, #28]
 8008724:	e015      	b.n	8008752 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	429a      	cmp	r2, r3
 800872e:	d20b      	bcs.n	8008748 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	1ad2      	subs	r2, r2, r3
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff9b 	bl	8008678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008742:	2300      	movs	r3, #0
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	e004      	b.n	8008752 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800874e:	2301      	movs	r3, #1
 8008750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008752:	f000 ff87 	bl	8009664 <vPortExitCritical>

	return xReturn;
 8008756:	69fb      	ldr	r3, [r7, #28]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3720      	adds	r7, #32
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	200015b4 	.word	0x200015b4
 8008764:	200015c8 	.word	0x200015c8

08008768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800876c:	4b03      	ldr	r3, [pc, #12]	; (800877c <vTaskMissedYield+0x14>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
}
 8008772:	bf00      	nop
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	200015c4 	.word	0x200015c4

08008780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008788:	f000 f852 	bl	8008830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800878c:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <prvIdleTask+0x28>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d9f9      	bls.n	8008788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <prvIdleTask+0x2c>)
 8008796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087a4:	e7f0      	b.n	8008788 <prvIdleTask+0x8>
 80087a6:	bf00      	nop
 80087a8:	200010e0 	.word	0x200010e0
 80087ac:	e000ed04 	.word	0xe000ed04

080087b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087b6:	2300      	movs	r3, #0
 80087b8:	607b      	str	r3, [r7, #4]
 80087ba:	e00c      	b.n	80087d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4a12      	ldr	r2, [pc, #72]	; (8008810 <prvInitialiseTaskLists+0x60>)
 80087c8:	4413      	add	r3, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fab6 	bl	8006d3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3301      	adds	r3, #1
 80087d4:	607b      	str	r3, [r7, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b37      	cmp	r3, #55	; 0x37
 80087da:	d9ef      	bls.n	80087bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087dc:	480d      	ldr	r0, [pc, #52]	; (8008814 <prvInitialiseTaskLists+0x64>)
 80087de:	f7fe faad 	bl	8006d3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087e2:	480d      	ldr	r0, [pc, #52]	; (8008818 <prvInitialiseTaskLists+0x68>)
 80087e4:	f7fe faaa 	bl	8006d3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087e8:	480c      	ldr	r0, [pc, #48]	; (800881c <prvInitialiseTaskLists+0x6c>)
 80087ea:	f7fe faa7 	bl	8006d3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087ee:	480c      	ldr	r0, [pc, #48]	; (8008820 <prvInitialiseTaskLists+0x70>)
 80087f0:	f7fe faa4 	bl	8006d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087f4:	480b      	ldr	r0, [pc, #44]	; (8008824 <prvInitialiseTaskLists+0x74>)
 80087f6:	f7fe faa1 	bl	8006d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087fa:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <prvInitialiseTaskLists+0x78>)
 80087fc:	4a05      	ldr	r2, [pc, #20]	; (8008814 <prvInitialiseTaskLists+0x64>)
 80087fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008800:	4b0a      	ldr	r3, [pc, #40]	; (800882c <prvInitialiseTaskLists+0x7c>)
 8008802:	4a05      	ldr	r2, [pc, #20]	; (8008818 <prvInitialiseTaskLists+0x68>)
 8008804:	601a      	str	r2, [r3, #0]
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	200010e0 	.word	0x200010e0
 8008814:	20001540 	.word	0x20001540
 8008818:	20001554 	.word	0x20001554
 800881c:	20001570 	.word	0x20001570
 8008820:	20001584 	.word	0x20001584
 8008824:	2000159c 	.word	0x2000159c
 8008828:	20001568 	.word	0x20001568
 800882c:	2000156c 	.word	0x2000156c

08008830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008836:	e019      	b.n	800886c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008838:	f000 fee4 	bl	8009604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <prvCheckTasksWaitingTermination+0x50>)
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fb01 	bl	8006e50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <prvCheckTasksWaitingTermination+0x54>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3b01      	subs	r3, #1
 8008854:	4a0b      	ldr	r2, [pc, #44]	; (8008884 <prvCheckTasksWaitingTermination+0x54>)
 8008856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008858:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <prvCheckTasksWaitingTermination+0x58>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3b01      	subs	r3, #1
 800885e:	4a0a      	ldr	r2, [pc, #40]	; (8008888 <prvCheckTasksWaitingTermination+0x58>)
 8008860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008862:	f000 feff 	bl	8009664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f810 	bl	800888c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <prvCheckTasksWaitingTermination+0x58>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e1      	bne.n	8008838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	20001584 	.word	0x20001584
 8008884:	200015b0 	.word	0x200015b0
 8008888:	20001598 	.word	0x20001598

0800888c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3354      	adds	r3, #84	; 0x54
 8008898:	4618      	mov	r0, r3
 800889a:	f001 fc29 	bl	800a0f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d108      	bne.n	80088ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 f897 	bl	80099e0 <vPortFree>
				vPortFree( pxTCB );
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 f894 	bl	80099e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088b8:	e018      	b.n	80088ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d103      	bne.n	80088cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 f88b 	bl	80099e0 <vPortFree>
	}
 80088ca:	e00f      	b.n	80088ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d00a      	beq.n	80088ec <prvDeleteTCB+0x60>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	60fb      	str	r3, [r7, #12]
}
 80088e8:	bf00      	nop
 80088ea:	e7fe      	b.n	80088ea <prvDeleteTCB+0x5e>
	}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088fa:	4b0c      	ldr	r3, [pc, #48]	; (800892c <prvResetNextTaskUnblockTime+0x38>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <prvResetNextTaskUnblockTime+0x3c>)
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
 800890a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800890c:	e008      	b.n	8008920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800890e:	4b07      	ldr	r3, [pc, #28]	; (800892c <prvResetNextTaskUnblockTime+0x38>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4a04      	ldr	r2, [pc, #16]	; (8008930 <prvResetNextTaskUnblockTime+0x3c>)
 800891e:	6013      	str	r3, [r2, #0]
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	20001568 	.word	0x20001568
 8008930:	200015d0 	.word	0x200015d0

08008934 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <xTaskGetCurrentTaskHandle+0x1c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008940:	687b      	ldr	r3, [r7, #4]
	}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	200010dc 	.word	0x200010dc

08008954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800895a:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <xTaskGetSchedulerState+0x34>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008962:	2301      	movs	r3, #1
 8008964:	607b      	str	r3, [r7, #4]
 8008966:	e008      	b.n	800897a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008968:	4b08      	ldr	r3, [pc, #32]	; (800898c <xTaskGetSchedulerState+0x38>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008970:	2302      	movs	r3, #2
 8008972:	607b      	str	r3, [r7, #4]
 8008974:	e001      	b.n	800897a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008976:	2300      	movs	r3, #0
 8008978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800897a:	687b      	ldr	r3, [r7, #4]
	}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	200015bc 	.word	0x200015bc
 800898c:	200015d8 	.word	0x200015d8

08008990 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d051      	beq.n	8008a4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089aa:	4b2a      	ldr	r3, [pc, #168]	; (8008a54 <xTaskPriorityInherit+0xc4>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d241      	bcs.n	8008a38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	db06      	blt.n	80089ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089bc:	4b25      	ldr	r3, [pc, #148]	; (8008a54 <xTaskPriorityInherit+0xc4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	6959      	ldr	r1, [r3, #20]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d2:	4613      	mov	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4a1f      	ldr	r2, [pc, #124]	; (8008a58 <xTaskPriorityInherit+0xc8>)
 80089dc:	4413      	add	r3, r2
 80089de:	4299      	cmp	r1, r3
 80089e0:	d122      	bne.n	8008a28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	3304      	adds	r3, #4
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fa32 	bl	8006e50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089ec:	4b19      	ldr	r3, [pc, #100]	; (8008a54 <xTaskPriorityInherit+0xc4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fa:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <xTaskPriorityInherit+0xcc>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d903      	bls.n	8008a0a <xTaskPriorityInherit+0x7a>
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	4a15      	ldr	r2, [pc, #84]	; (8008a5c <xTaskPriorityInherit+0xcc>)
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4a10      	ldr	r2, [pc, #64]	; (8008a58 <xTaskPriorityInherit+0xc8>)
 8008a18:	441a      	add	r2, r3
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4610      	mov	r0, r2
 8008a22:	f7fe f9b8 	bl	8006d96 <vListInsertEnd>
 8008a26:	e004      	b.n	8008a32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <xTaskPriorityInherit+0xc4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a32:	2301      	movs	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	e008      	b.n	8008a4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a3c:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <xTaskPriorityInherit+0xc4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d201      	bcs.n	8008a4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a46:	2301      	movs	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
	}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	200010dc 	.word	0x200010dc
 8008a58:	200010e0 	.word	0x200010e0
 8008a5c:	200015b8 	.word	0x200015b8

08008a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d056      	beq.n	8008b24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a76:	4b2e      	ldr	r3, [pc, #184]	; (8008b30 <xTaskPriorityDisinherit+0xd0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d00a      	beq.n	8008a96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	60fb      	str	r3, [r7, #12]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	60bb      	str	r3, [r7, #8]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab8:	1e5a      	subs	r2, r3, #1
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d02c      	beq.n	8008b24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d128      	bne.n	8008b24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe f9ba 	bl	8006e50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <xTaskPriorityDisinherit+0xd4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d903      	bls.n	8008b04 <xTaskPriorityDisinherit+0xa4>
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	4a0c      	ldr	r2, [pc, #48]	; (8008b34 <xTaskPriorityDisinherit+0xd4>)
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4a09      	ldr	r2, [pc, #36]	; (8008b38 <xTaskPriorityDisinherit+0xd8>)
 8008b12:	441a      	add	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f7fe f93b 	bl	8006d96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b24:	697b      	ldr	r3, [r7, #20]
	}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200010dc 	.word	0x200010dc
 8008b34:	200015b8 	.word	0x200015b8
 8008b38:	200010e0 	.word	0x200010e0

08008b3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d06a      	beq.n	8008c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60fb      	str	r3, [r7, #12]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d902      	bls.n	8008b82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e002      	b.n	8008b88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d04b      	beq.n	8008c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d146      	bne.n	8008c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b9c:	4b25      	ldr	r3, [pc, #148]	; (8008c34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d10a      	bne.n	8008bbc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	60bb      	str	r3, [r7, #8]
}
 8008bb8:	bf00      	nop
 8008bba:	e7fe      	b.n	8008bba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	db04      	blt.n	8008bda <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	6959      	ldr	r1, [r3, #20]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4a13      	ldr	r2, [pc, #76]	; (8008c38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008bea:	4413      	add	r3, r2
 8008bec:	4299      	cmp	r1, r3
 8008bee:	d11c      	bne.n	8008c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fe f92b 	bl	8006e50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d903      	bls.n	8008c0e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	4a0c      	ldr	r2, [pc, #48]	; (8008c3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c12:	4613      	mov	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4a07      	ldr	r2, [pc, #28]	; (8008c38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c1c:	441a      	add	r2, r3
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f7fe f8b6 	bl	8006d96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c2a:	bf00      	nop
 8008c2c:	3720      	adds	r7, #32
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200010dc 	.word	0x200010dc
 8008c38:	200010e0 	.word	0x200010e0
 8008c3c:	200015b8 	.word	0x200015b8

08008c40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c40:	b480      	push	{r7}
 8008c42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c44:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c4c:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c52:	3201      	adds	r2, #1
 8008c54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008c56:	4b03      	ldr	r3, [pc, #12]	; (8008c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c58:	681b      	ldr	r3, [r3, #0]
	}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	200010dc 	.word	0x200010dc

08008c68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c72:	4b21      	ldr	r3, [pc, #132]	; (8008cf8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c78:	4b20      	ldr	r3, [pc, #128]	; (8008cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe f8e6 	bl	8006e50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8a:	d10a      	bne.n	8008ca2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d007      	beq.n	8008ca2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c92:	4b1a      	ldr	r3, [pc, #104]	; (8008cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3304      	adds	r3, #4
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4819      	ldr	r0, [pc, #100]	; (8008d00 <prvAddCurrentTaskToDelayedList+0x98>)
 8008c9c:	f7fe f87b 	bl	8006d96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ca0:	e026      	b.n	8008cf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d209      	bcs.n	8008cce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cba:	4b12      	ldr	r3, [pc, #72]	; (8008d04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f7fe f889 	bl	8006dde <vListInsert>
}
 8008ccc:	e010      	b.n	8008cf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cce:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4610      	mov	r0, r2
 8008cdc:	f7fe f87f 	bl	8006dde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d202      	bcs.n	8008cf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008cea:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	6013      	str	r3, [r2, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	200015b4 	.word	0x200015b4
 8008cfc:	200010dc 	.word	0x200010dc
 8008d00:	2000159c 	.word	0x2000159c
 8008d04:	2000156c 	.word	0x2000156c
 8008d08:	20001568 	.word	0x20001568
 8008d0c:	200015d0 	.word	0x200015d0

08008d10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08a      	sub	sp, #40	; 0x28
 8008d14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d1a:	f000 fb07 	bl	800932c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d1e:	4b1c      	ldr	r3, [pc, #112]	; (8008d90 <xTimerCreateTimerTask+0x80>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d021      	beq.n	8008d6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d26:	2300      	movs	r3, #0
 8008d28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d2e:	1d3a      	adds	r2, r7, #4
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	f107 030c 	add.w	r3, r7, #12
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fd ffe5 	bl	8006d08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	9202      	str	r2, [sp, #8]
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	2302      	movs	r3, #2
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	460a      	mov	r2, r1
 8008d50:	4910      	ldr	r1, [pc, #64]	; (8008d94 <xTimerCreateTimerTask+0x84>)
 8008d52:	4811      	ldr	r0, [pc, #68]	; (8008d98 <xTimerCreateTimerTask+0x88>)
 8008d54:	f7fe ffa6 	bl	8007ca4 <xTaskCreateStatic>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	4a10      	ldr	r2, [pc, #64]	; (8008d9c <xTimerCreateTimerTask+0x8c>)
 8008d5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <xTimerCreateTimerTask+0x8c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d66:	2301      	movs	r3, #1
 8008d68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	613b      	str	r3, [r7, #16]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008d86:	697b      	ldr	r3, [r7, #20]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	2000160c 	.word	0x2000160c
 8008d94:	0800af14 	.word	0x0800af14
 8008d98:	08008ed5 	.word	0x08008ed5
 8008d9c:	20001610 	.word	0x20001610

08008da0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	; 0x28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <xTimerGenericCommand+0x2e>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	623b      	str	r3, [r7, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008dce:	4b1a      	ldr	r3, [pc, #104]	; (8008e38 <xTimerGenericCommand+0x98>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d02a      	beq.n	8008e2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b05      	cmp	r3, #5
 8008de6:	dc18      	bgt.n	8008e1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008de8:	f7ff fdb4 	bl	8008954 <xTaskGetSchedulerState>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d109      	bne.n	8008e06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008df2:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <xTimerGenericCommand+0x98>)
 8008df4:	6818      	ldr	r0, [r3, #0]
 8008df6:	f107 0110 	add.w	r1, r7, #16
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dfe:	f7fe fa45 	bl	800728c <xQueueGenericSend>
 8008e02:	6278      	str	r0, [r7, #36]	; 0x24
 8008e04:	e012      	b.n	8008e2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <xTimerGenericCommand+0x98>)
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	f107 0110 	add.w	r1, r7, #16
 8008e0e:	2300      	movs	r3, #0
 8008e10:	2200      	movs	r2, #0
 8008e12:	f7fe fa3b 	bl	800728c <xQueueGenericSend>
 8008e16:	6278      	str	r0, [r7, #36]	; 0x24
 8008e18:	e008      	b.n	8008e2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e1a:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <xTimerGenericCommand+0x98>)
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	f107 0110 	add.w	r1, r7, #16
 8008e22:	2300      	movs	r3, #0
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	f7fe fb2f 	bl	8007488 <xQueueGenericSendFromISR>
 8008e2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3728      	adds	r7, #40	; 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	2000160c 	.word	0x2000160c

08008e3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e46:	4b22      	ldr	r3, [pc, #136]	; (8008ed0 <prvProcessExpiredTimer+0x94>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fd fffb 	bl	8006e50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d022      	beq.n	8008eae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	699a      	ldr	r2, [r3, #24]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	18d1      	adds	r1, r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	6978      	ldr	r0, [r7, #20]
 8008e76:	f000 f8d1 	bl	800901c <prvInsertTimerInActiveList>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01f      	beq.n	8008ec0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e80:	2300      	movs	r3, #0
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	6978      	ldr	r0, [r7, #20]
 8008e8c:	f7ff ff88 	bl	8008da0 <xTimerGenericCommand>
 8008e90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d113      	bne.n	8008ec0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	60fb      	str	r3, [r7, #12]
}
 8008eaa:	bf00      	nop
 8008eac:	e7fe      	b.n	8008eac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	6978      	ldr	r0, [r7, #20]
 8008ec6:	4798      	blx	r3
}
 8008ec8:	bf00      	nop
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20001604 	.word	0x20001604

08008ed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008edc:	f107 0308 	add.w	r3, r7, #8
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 f857 	bl	8008f94 <prvGetNextExpireTime>
 8008ee6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	4619      	mov	r1, r3
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 f803 	bl	8008ef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ef2:	f000 f8d5 	bl	80090a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ef6:	e7f1      	b.n	8008edc <prvTimerTask+0x8>

08008ef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f02:	f7ff f92b 	bl	800815c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f06:	f107 0308 	add.w	r3, r7, #8
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f866 	bl	8008fdc <prvSampleTimeNow>
 8008f10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d130      	bne.n	8008f7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10a      	bne.n	8008f34 <prvProcessTimerOrBlockTask+0x3c>
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d806      	bhi.n	8008f34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f26:	f7ff f927 	bl	8008178 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff ff85 	bl	8008e3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f32:	e024      	b.n	8008f7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d008      	beq.n	8008f4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f3a:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <prvProcessTimerOrBlockTask+0x90>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <prvProcessTimerOrBlockTask+0x50>
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <prvProcessTimerOrBlockTask+0x52>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <prvProcessTimerOrBlockTask+0x94>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	f7fe fe6f 	bl	8007c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f5e:	f7ff f90b 	bl	8008178 <xTaskResumeAll>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f68:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <prvProcessTimerOrBlockTask+0x98>)
 8008f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	f3bf 8f6f 	isb	sy
}
 8008f78:	e001      	b.n	8008f7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f7a:	f7ff f8fd 	bl	8008178 <xTaskResumeAll>
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20001608 	.word	0x20001608
 8008f8c:	2000160c 	.word	0x2000160c
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f9c:	4b0e      	ldr	r3, [pc, #56]	; (8008fd8 <prvGetNextExpireTime+0x44>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <prvGetNextExpireTime+0x16>
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	e000      	b.n	8008fac <prvGetNextExpireTime+0x18>
 8008faa:	2200      	movs	r2, #0
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d105      	bne.n	8008fc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fb8:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <prvGetNextExpireTime+0x44>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	e001      	b.n	8008fc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20001604 	.word	0x20001604

08008fdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008fe4:	f7ff f966 	bl	80082b4 <xTaskGetTickCount>
 8008fe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008fea:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <prvSampleTimeNow+0x3c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d205      	bcs.n	8009000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ff4:	f000 f936 	bl	8009264 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	e002      	b.n	8009006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009006:	4a04      	ldr	r2, [pc, #16]	; (8009018 <prvSampleTimeNow+0x3c>)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800900c:	68fb      	ldr	r3, [r7, #12]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20001614 	.word	0x20001614

0800901c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	429a      	cmp	r2, r3
 8009040:	d812      	bhi.n	8009068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	1ad2      	subs	r2, r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	429a      	cmp	r2, r3
 800904e:	d302      	bcc.n	8009056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e01b      	b.n	800908e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009056:	4b10      	ldr	r3, [pc, #64]	; (8009098 <prvInsertTimerInActiveList+0x7c>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3304      	adds	r3, #4
 800905e:	4619      	mov	r1, r3
 8009060:	4610      	mov	r0, r2
 8009062:	f7fd febc 	bl	8006dde <vListInsert>
 8009066:	e012      	b.n	800908e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	d206      	bcs.n	800907e <prvInsertTimerInActiveList+0x62>
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	429a      	cmp	r2, r3
 8009076:	d302      	bcc.n	800907e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009078:	2301      	movs	r3, #1
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	e007      	b.n	800908e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800907e:	4b07      	ldr	r3, [pc, #28]	; (800909c <prvInsertTimerInActiveList+0x80>)
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3304      	adds	r3, #4
 8009086:	4619      	mov	r1, r3
 8009088:	4610      	mov	r0, r2
 800908a:	f7fd fea8 	bl	8006dde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800908e:	697b      	ldr	r3, [r7, #20]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20001608 	.word	0x20001608
 800909c:	20001604 	.word	0x20001604

080090a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08e      	sub	sp, #56	; 0x38
 80090a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090a6:	e0ca      	b.n	800923e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	da18      	bge.n	80090e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090ae:	1d3b      	adds	r3, r7, #4
 80090b0:	3304      	adds	r3, #4
 80090b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10a      	bne.n	80090d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	61fb      	str	r3, [r7, #28]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090d6:	6850      	ldr	r0, [r2, #4]
 80090d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090da:	6892      	ldr	r2, [r2, #8]
 80090dc:	4611      	mov	r1, r2
 80090de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f2c0 80aa 	blt.w	800923c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	3304      	adds	r3, #4
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fd fea9 	bl	8006e50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090fe:	463b      	mov	r3, r7
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff ff6b 	bl	8008fdc <prvSampleTimeNow>
 8009106:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b09      	cmp	r3, #9
 800910c:	f200 8097 	bhi.w	800923e <prvProcessReceivedCommands+0x19e>
 8009110:	a201      	add	r2, pc, #4	; (adr r2, 8009118 <prvProcessReceivedCommands+0x78>)
 8009112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009116:	bf00      	nop
 8009118:	08009141 	.word	0x08009141
 800911c:	08009141 	.word	0x08009141
 8009120:	08009141 	.word	0x08009141
 8009124:	080091b5 	.word	0x080091b5
 8009128:	080091c9 	.word	0x080091c9
 800912c:	08009213 	.word	0x08009213
 8009130:	08009141 	.word	0x08009141
 8009134:	08009141 	.word	0x08009141
 8009138:	080091b5 	.word	0x080091b5
 800913c:	080091c9 	.word	0x080091c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009146:	f043 0301 	orr.w	r3, r3, #1
 800914a:	b2da      	uxtb	r2, r3
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	18d1      	adds	r1, r2, r3
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009160:	f7ff ff5c 	bl	800901c <prvInsertTimerInActiveList>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d069      	beq.n	800923e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009170:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d05e      	beq.n	800923e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	441a      	add	r2, r3
 8009188:	2300      	movs	r3, #0
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	2300      	movs	r3, #0
 800918e:	2100      	movs	r1, #0
 8009190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009192:	f7ff fe05 	bl	8008da0 <xTimerGenericCommand>
 8009196:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d14f      	bne.n	800923e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	61bb      	str	r3, [r7, #24]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091ba:	f023 0301 	bic.w	r3, r3, #1
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80091c6:	e03a      	b.n	800923e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091ce:	f043 0301 	orr.w	r3, r3, #1
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	617b      	str	r3, [r7, #20]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	18d1      	adds	r1, r2, r3
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800920a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800920c:	f7ff ff06 	bl	800901c <prvInsertTimerInActiveList>
					break;
 8009210:	e015      	b.n	800923e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009222:	f000 fbdd 	bl	80099e0 <vPortFree>
 8009226:	e00a      	b.n	800923e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	b2da      	uxtb	r2, r3
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800923a:	e000      	b.n	800923e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800923c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800923e:	4b08      	ldr	r3, [pc, #32]	; (8009260 <prvProcessReceivedCommands+0x1c0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	1d39      	adds	r1, r7, #4
 8009244:	2200      	movs	r2, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f9ba 	bl	80075c0 <xQueueReceive>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	f47f af2a 	bne.w	80090a8 <prvProcessReceivedCommands+0x8>
	}
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	3730      	adds	r7, #48	; 0x30
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	2000160c 	.word	0x2000160c

08009264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800926a:	e048      	b.n	80092fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800926c:	4b2d      	ldr	r3, [pc, #180]	; (8009324 <prvSwitchTimerLists+0xc0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009276:	4b2b      	ldr	r3, [pc, #172]	; (8009324 <prvSwitchTimerLists+0xc0>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3304      	adds	r3, #4
 8009284:	4618      	mov	r0, r3
 8009286:	f7fd fde3 	bl	8006e50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d02e      	beq.n	80092fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4413      	add	r3, r2
 80092a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d90e      	bls.n	80092d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092be:	4b19      	ldr	r3, [pc, #100]	; (8009324 <prvSwitchTimerLists+0xc0>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3304      	adds	r3, #4
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f7fd fd88 	bl	8006dde <vListInsert>
 80092ce:	e016      	b.n	80092fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092d0:	2300      	movs	r3, #0
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	2300      	movs	r3, #0
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	2100      	movs	r1, #0
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f7ff fd60 	bl	8008da0 <xTimerGenericCommand>
 80092e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	603b      	str	r3, [r7, #0]
}
 80092fa:	bf00      	nop
 80092fc:	e7fe      	b.n	80092fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092fe:	4b09      	ldr	r3, [pc, #36]	; (8009324 <prvSwitchTimerLists+0xc0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1b1      	bne.n	800926c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009308:	4b06      	ldr	r3, [pc, #24]	; (8009324 <prvSwitchTimerLists+0xc0>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800930e:	4b06      	ldr	r3, [pc, #24]	; (8009328 <prvSwitchTimerLists+0xc4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a04      	ldr	r2, [pc, #16]	; (8009324 <prvSwitchTimerLists+0xc0>)
 8009314:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009316:	4a04      	ldr	r2, [pc, #16]	; (8009328 <prvSwitchTimerLists+0xc4>)
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	6013      	str	r3, [r2, #0]
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20001604 	.word	0x20001604
 8009328:	20001608 	.word	0x20001608

0800932c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009332:	f000 f967 	bl	8009604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009336:	4b15      	ldr	r3, [pc, #84]	; (800938c <prvCheckForValidListAndQueue+0x60>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d120      	bne.n	8009380 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800933e:	4814      	ldr	r0, [pc, #80]	; (8009390 <prvCheckForValidListAndQueue+0x64>)
 8009340:	f7fd fcfc 	bl	8006d3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009344:	4813      	ldr	r0, [pc, #76]	; (8009394 <prvCheckForValidListAndQueue+0x68>)
 8009346:	f7fd fcf9 	bl	8006d3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800934a:	4b13      	ldr	r3, [pc, #76]	; (8009398 <prvCheckForValidListAndQueue+0x6c>)
 800934c:	4a10      	ldr	r2, [pc, #64]	; (8009390 <prvCheckForValidListAndQueue+0x64>)
 800934e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009350:	4b12      	ldr	r3, [pc, #72]	; (800939c <prvCheckForValidListAndQueue+0x70>)
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <prvCheckForValidListAndQueue+0x68>)
 8009354:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009356:	2300      	movs	r3, #0
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <prvCheckForValidListAndQueue+0x74>)
 800935c:	4a11      	ldr	r2, [pc, #68]	; (80093a4 <prvCheckForValidListAndQueue+0x78>)
 800935e:	2110      	movs	r1, #16
 8009360:	200a      	movs	r0, #10
 8009362:	f7fd fe07 	bl	8006f74 <xQueueGenericCreateStatic>
 8009366:	4603      	mov	r3, r0
 8009368:	4a08      	ldr	r2, [pc, #32]	; (800938c <prvCheckForValidListAndQueue+0x60>)
 800936a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800936c:	4b07      	ldr	r3, [pc, #28]	; (800938c <prvCheckForValidListAndQueue+0x60>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d005      	beq.n	8009380 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <prvCheckForValidListAndQueue+0x60>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	490b      	ldr	r1, [pc, #44]	; (80093a8 <prvCheckForValidListAndQueue+0x7c>)
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fc34 	bl	8007be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009380:	f000 f970 	bl	8009664 <vPortExitCritical>
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	2000160c 	.word	0x2000160c
 8009390:	200015dc 	.word	0x200015dc
 8009394:	200015f0 	.word	0x200015f0
 8009398:	20001604 	.word	0x20001604
 800939c:	20001608 	.word	0x20001608
 80093a0:	200016b8 	.word	0x200016b8
 80093a4:	20001618 	.word	0x20001618
 80093a8:	0800af1c 	.word	0x0800af1c

080093ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3b04      	subs	r3, #4
 80093bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3b04      	subs	r3, #4
 80093ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f023 0201 	bic.w	r2, r3, #1
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3b04      	subs	r3, #4
 80093da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093dc:	4a0c      	ldr	r2, [pc, #48]	; (8009410 <pxPortInitialiseStack+0x64>)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3b14      	subs	r3, #20
 80093e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3b04      	subs	r3, #4
 80093f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f06f 0202 	mvn.w	r2, #2
 80093fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3b20      	subs	r3, #32
 8009400:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009402:	68fb      	ldr	r3, [r7, #12]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	08009415 	.word	0x08009415

08009414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800941e:	4b12      	ldr	r3, [pc, #72]	; (8009468 <prvTaskExitError+0x54>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009426:	d00a      	beq.n	800943e <prvTaskExitError+0x2a>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	60fb      	str	r3, [r7, #12]
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <prvTaskExitError+0x28>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	60bb      	str	r3, [r7, #8]
}
 8009450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009452:	bf00      	nop
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0fc      	beq.n	8009454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800945a:	bf00      	nop
 800945c:	bf00      	nop
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	20000014 	.word	0x20000014
 800946c:	00000000 	.word	0x00000000

08009470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <pxCurrentTCBConst2>)
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	6808      	ldr	r0, [r1, #0]
 8009476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947a:	f380 8809 	msr	PSP, r0
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f04f 0000 	mov.w	r0, #0
 8009486:	f380 8811 	msr	BASEPRI, r0
 800948a:	4770      	bx	lr
 800948c:	f3af 8000 	nop.w

08009490 <pxCurrentTCBConst2>:
 8009490:	200010dc 	.word	0x200010dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop

08009498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009498:	4808      	ldr	r0, [pc, #32]	; (80094bc <prvPortStartFirstTask+0x24>)
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	6800      	ldr	r0, [r0, #0]
 800949e:	f380 8808 	msr	MSP, r0
 80094a2:	f04f 0000 	mov.w	r0, #0
 80094a6:	f380 8814 	msr	CONTROL, r0
 80094aa:	b662      	cpsie	i
 80094ac:	b661      	cpsie	f
 80094ae:	f3bf 8f4f 	dsb	sy
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	df00      	svc	0
 80094b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094ba:	bf00      	nop
 80094bc:	e000ed08 	.word	0xe000ed08

080094c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80094c6:	4b46      	ldr	r3, [pc, #280]	; (80095e0 <xPortStartScheduler+0x120>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a46      	ldr	r2, [pc, #280]	; (80095e4 <xPortStartScheduler+0x124>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d10a      	bne.n	80094e6 <xPortStartScheduler+0x26>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	613b      	str	r3, [r7, #16]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80094e6:	4b3e      	ldr	r3, [pc, #248]	; (80095e0 <xPortStartScheduler+0x120>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a3f      	ldr	r2, [pc, #252]	; (80095e8 <xPortStartScheduler+0x128>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d10a      	bne.n	8009506 <xPortStartScheduler+0x46>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	60fb      	str	r3, [r7, #12]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009506:	4b39      	ldr	r3, [pc, #228]	; (80095ec <xPortStartScheduler+0x12c>)
 8009508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	22ff      	movs	r2, #255	; 0xff
 8009516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	b2db      	uxtb	r3, r3
 800951e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009528:	b2da      	uxtb	r2, r3
 800952a:	4b31      	ldr	r3, [pc, #196]	; (80095f0 <xPortStartScheduler+0x130>)
 800952c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800952e:	4b31      	ldr	r3, [pc, #196]	; (80095f4 <xPortStartScheduler+0x134>)
 8009530:	2207      	movs	r2, #7
 8009532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009534:	e009      	b.n	800954a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009536:	4b2f      	ldr	r3, [pc, #188]	; (80095f4 <xPortStartScheduler+0x134>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3b01      	subs	r3, #1
 800953c:	4a2d      	ldr	r2, [pc, #180]	; (80095f4 <xPortStartScheduler+0x134>)
 800953e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	b2db      	uxtb	r3, r3
 8009548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009552:	2b80      	cmp	r3, #128	; 0x80
 8009554:	d0ef      	beq.n	8009536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009556:	4b27      	ldr	r3, [pc, #156]	; (80095f4 <xPortStartScheduler+0x134>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f1c3 0307 	rsb	r3, r3, #7
 800955e:	2b04      	cmp	r3, #4
 8009560:	d00a      	beq.n	8009578 <xPortStartScheduler+0xb8>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	60bb      	str	r3, [r7, #8]
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009578:	4b1e      	ldr	r3, [pc, #120]	; (80095f4 <xPortStartScheduler+0x134>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	4a1d      	ldr	r2, [pc, #116]	; (80095f4 <xPortStartScheduler+0x134>)
 8009580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009582:	4b1c      	ldr	r3, [pc, #112]	; (80095f4 <xPortStartScheduler+0x134>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800958a:	4a1a      	ldr	r2, [pc, #104]	; (80095f4 <xPortStartScheduler+0x134>)
 800958c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	b2da      	uxtb	r2, r3
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009596:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <xPortStartScheduler+0x138>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a17      	ldr	r2, [pc, #92]	; (80095f8 <xPortStartScheduler+0x138>)
 800959c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095a2:	4b15      	ldr	r3, [pc, #84]	; (80095f8 <xPortStartScheduler+0x138>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a14      	ldr	r2, [pc, #80]	; (80095f8 <xPortStartScheduler+0x138>)
 80095a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095ae:	f000 f8dd 	bl	800976c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095b2:	4b12      	ldr	r3, [pc, #72]	; (80095fc <xPortStartScheduler+0x13c>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095b8:	f000 f8fc 	bl	80097b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095bc:	4b10      	ldr	r3, [pc, #64]	; (8009600 <xPortStartScheduler+0x140>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <xPortStartScheduler+0x140>)
 80095c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095c8:	f7ff ff66 	bl	8009498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095cc:	f7fe ff3c 	bl	8008448 <vTaskSwitchContext>
	prvTaskExitError();
 80095d0:	f7ff ff20 	bl	8009414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	e000ed00 	.word	0xe000ed00
 80095e4:	410fc271 	.word	0x410fc271
 80095e8:	410fc270 	.word	0x410fc270
 80095ec:	e000e400 	.word	0xe000e400
 80095f0:	20001708 	.word	0x20001708
 80095f4:	2000170c 	.word	0x2000170c
 80095f8:	e000ed20 	.word	0xe000ed20
 80095fc:	20000014 	.word	0x20000014
 8009600:	e000ef34 	.word	0xe000ef34

08009604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	607b      	str	r3, [r7, #4]
}
 800961c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <vPortEnterCritical+0x58>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3301      	adds	r3, #1
 8009624:	4a0d      	ldr	r2, [pc, #52]	; (800965c <vPortEnterCritical+0x58>)
 8009626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <vPortEnterCritical+0x58>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d10f      	bne.n	8009650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009630:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <vPortEnterCritical+0x5c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <vPortEnterCritical+0x4c>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	603b      	str	r3, [r7, #0]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <vPortEnterCritical+0x4a>
	}
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	20000014 	.word	0x20000014
 8009660:	e000ed04 	.word	0xe000ed04

08009664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800966a:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <vPortExitCritical+0x50>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <vPortExitCritical+0x24>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	607b      	str	r3, [r7, #4]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009688:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <vPortExitCritical+0x50>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3b01      	subs	r3, #1
 800968e:	4a09      	ldr	r2, [pc, #36]	; (80096b4 <vPortExitCritical+0x50>)
 8009690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <vPortExitCritical+0x50>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d105      	bne.n	80096a6 <vPortExitCritical+0x42>
 800969a:	2300      	movs	r3, #0
 800969c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	f383 8811 	msr	BASEPRI, r3
}
 80096a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000014 	.word	0x20000014
	...

080096c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096c0:	f3ef 8009 	mrs	r0, PSP
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	4b15      	ldr	r3, [pc, #84]	; (8009720 <pxCurrentTCBConst>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	f01e 0f10 	tst.w	lr, #16
 80096d0:	bf08      	it	eq
 80096d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	6010      	str	r0, [r2, #0]
 80096dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096e4:	f380 8811 	msr	BASEPRI, r0
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f7fe feaa 	bl	8008448 <vTaskSwitchContext>
 80096f4:	f04f 0000 	mov.w	r0, #0
 80096f8:	f380 8811 	msr	BASEPRI, r0
 80096fc:	bc09      	pop	{r0, r3}
 80096fe:	6819      	ldr	r1, [r3, #0]
 8009700:	6808      	ldr	r0, [r1, #0]
 8009702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009706:	f01e 0f10 	tst.w	lr, #16
 800970a:	bf08      	it	eq
 800970c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009710:	f380 8809 	msr	PSP, r0
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	f3af 8000 	nop.w

08009720 <pxCurrentTCBConst>:
 8009720:	200010dc 	.word	0x200010dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop

08009728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	607b      	str	r3, [r7, #4]
}
 8009740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009742:	f7fe fdc7 	bl	80082d4 <xTaskIncrementTick>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800974c:	4b06      	ldr	r3, [pc, #24]	; (8009768 <xPortSysTickHandler+0x40>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	2300      	movs	r3, #0
 8009756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	f383 8811 	msr	BASEPRI, r3
}
 800975e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <vPortSetupTimerInterrupt+0x34>)
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009776:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <vPortSetupTimerInterrupt+0x38>)
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800977c:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <vPortSetupTimerInterrupt+0x3c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a0a      	ldr	r2, [pc, #40]	; (80097ac <vPortSetupTimerInterrupt+0x40>)
 8009782:	fba2 2303 	umull	r2, r3, r2, r3
 8009786:	099b      	lsrs	r3, r3, #6
 8009788:	4a09      	ldr	r2, [pc, #36]	; (80097b0 <vPortSetupTimerInterrupt+0x44>)
 800978a:	3b01      	subs	r3, #1
 800978c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800978e:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <vPortSetupTimerInterrupt+0x34>)
 8009790:	2207      	movs	r2, #7
 8009792:	601a      	str	r2, [r3, #0]
}
 8009794:	bf00      	nop
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	e000e010 	.word	0xe000e010
 80097a4:	e000e018 	.word	0xe000e018
 80097a8:	20000008 	.word	0x20000008
 80097ac:	10624dd3 	.word	0x10624dd3
 80097b0:	e000e014 	.word	0xe000e014

080097b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097c4 <vPortEnableVFP+0x10>
 80097b8:	6801      	ldr	r1, [r0, #0]
 80097ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097be:	6001      	str	r1, [r0, #0]
 80097c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097c2:	bf00      	nop
 80097c4:	e000ed88 	.word	0xe000ed88

080097c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097ce:	f3ef 8305 	mrs	r3, IPSR
 80097d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b0f      	cmp	r3, #15
 80097d8:	d914      	bls.n	8009804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097da:	4a17      	ldr	r2, [pc, #92]	; (8009838 <vPortValidateInterruptPriority+0x70>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097e4:	4b15      	ldr	r3, [pc, #84]	; (800983c <vPortValidateInterruptPriority+0x74>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	7afa      	ldrb	r2, [r7, #11]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d20a      	bcs.n	8009804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	607b      	str	r3, [r7, #4]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009804:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <vPortValidateInterruptPriority+0x78>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800980c:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <vPortValidateInterruptPriority+0x7c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d90a      	bls.n	800982a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	603b      	str	r3, [r7, #0]
}
 8009826:	bf00      	nop
 8009828:	e7fe      	b.n	8009828 <vPortValidateInterruptPriority+0x60>
	}
 800982a:	bf00      	nop
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	e000e3f0 	.word	0xe000e3f0
 800983c:	20001708 	.word	0x20001708
 8009840:	e000ed0c 	.word	0xe000ed0c
 8009844:	2000170c 	.word	0x2000170c

08009848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08a      	sub	sp, #40	; 0x28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009850:	2300      	movs	r3, #0
 8009852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009854:	f7fe fc82 	bl	800815c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009858:	4b5b      	ldr	r3, [pc, #364]	; (80099c8 <pvPortMalloc+0x180>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009860:	f000 f920 	bl	8009aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009864:	4b59      	ldr	r3, [pc, #356]	; (80099cc <pvPortMalloc+0x184>)
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4013      	ands	r3, r2
 800986c:	2b00      	cmp	r3, #0
 800986e:	f040 8093 	bne.w	8009998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01d      	beq.n	80098b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009878:	2208      	movs	r2, #8
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2b00      	cmp	r3, #0
 8009888:	d014      	beq.n	80098b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f023 0307 	bic.w	r3, r3, #7
 8009890:	3308      	adds	r3, #8
 8009892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <pvPortMalloc+0x6c>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	617b      	str	r3, [r7, #20]
}
 80098b0:	bf00      	nop
 80098b2:	e7fe      	b.n	80098b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d06e      	beq.n	8009998 <pvPortMalloc+0x150>
 80098ba:	4b45      	ldr	r3, [pc, #276]	; (80099d0 <pvPortMalloc+0x188>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d869      	bhi.n	8009998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098c4:	4b43      	ldr	r3, [pc, #268]	; (80099d4 <pvPortMalloc+0x18c>)
 80098c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098c8:	4b42      	ldr	r3, [pc, #264]	; (80099d4 <pvPortMalloc+0x18c>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098ce:	e004      	b.n	80098da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d903      	bls.n	80098ec <pvPortMalloc+0xa4>
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f1      	bne.n	80098d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098ec:	4b36      	ldr	r3, [pc, #216]	; (80099c8 <pvPortMalloc+0x180>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d050      	beq.n	8009998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2208      	movs	r2, #8
 80098fc:	4413      	add	r3, r2
 80098fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	2308      	movs	r3, #8
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	429a      	cmp	r2, r3
 8009916:	d91f      	bls.n	8009958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4413      	add	r3, r2
 800991e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <pvPortMalloc+0xf8>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	613b      	str	r3, [r7, #16]
}
 800993c:	bf00      	nop
 800993e:	e7fe      	b.n	800993e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	1ad2      	subs	r2, r2, r3
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009952:	69b8      	ldr	r0, [r7, #24]
 8009954:	f000 f908 	bl	8009b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009958:	4b1d      	ldr	r3, [pc, #116]	; (80099d0 <pvPortMalloc+0x188>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	4a1b      	ldr	r2, [pc, #108]	; (80099d0 <pvPortMalloc+0x188>)
 8009964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009966:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <pvPortMalloc+0x188>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4b1b      	ldr	r3, [pc, #108]	; (80099d8 <pvPortMalloc+0x190>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	429a      	cmp	r2, r3
 8009970:	d203      	bcs.n	800997a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009972:	4b17      	ldr	r3, [pc, #92]	; (80099d0 <pvPortMalloc+0x188>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a18      	ldr	r2, [pc, #96]	; (80099d8 <pvPortMalloc+0x190>)
 8009978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	4b13      	ldr	r3, [pc, #76]	; (80099cc <pvPortMalloc+0x184>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	431a      	orrs	r2, r3
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800998e:	4b13      	ldr	r3, [pc, #76]	; (80099dc <pvPortMalloc+0x194>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	4a11      	ldr	r2, [pc, #68]	; (80099dc <pvPortMalloc+0x194>)
 8009996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009998:	f7fe fbee 	bl	8008178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00a      	beq.n	80099bc <pvPortMalloc+0x174>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	60fb      	str	r3, [r7, #12]
}
 80099b8:	bf00      	nop
 80099ba:	e7fe      	b.n	80099ba <pvPortMalloc+0x172>
	return pvReturn;
 80099bc:	69fb      	ldr	r3, [r7, #28]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3728      	adds	r7, #40	; 0x28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20005318 	.word	0x20005318
 80099cc:	2000532c 	.word	0x2000532c
 80099d0:	2000531c 	.word	0x2000531c
 80099d4:	20005310 	.word	0x20005310
 80099d8:	20005320 	.word	0x20005320
 80099dc:	20005324 	.word	0x20005324

080099e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d04d      	beq.n	8009a8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099f2:	2308      	movs	r3, #8
 80099f4:	425b      	negs	r3, r3
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	4413      	add	r3, r2
 80099fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <vPortFree+0xb8>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4013      	ands	r3, r2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <vPortFree+0x44>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	60fb      	str	r3, [r7, #12]
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <vPortFree+0x62>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	60bb      	str	r3, [r7, #8]
}
 8009a3e:	bf00      	nop
 8009a40:	e7fe      	b.n	8009a40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <vPortFree+0xb8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d01e      	beq.n	8009a8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11a      	bne.n	8009a8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <vPortFree+0xb8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	43db      	mvns	r3, r3
 8009a62:	401a      	ands	r2, r3
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a68:	f7fe fb78 	bl	800815c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <vPortFree+0xbc>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4413      	add	r3, r2
 8009a76:	4a09      	ldr	r2, [pc, #36]	; (8009a9c <vPortFree+0xbc>)
 8009a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	f000 f874 	bl	8009b68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009a80:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <vPortFree+0xc0>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3301      	adds	r3, #1
 8009a86:	4a06      	ldr	r2, [pc, #24]	; (8009aa0 <vPortFree+0xc0>)
 8009a88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009a8a:	f7fe fb75 	bl	8008178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a8e:	bf00      	nop
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	2000532c 	.word	0x2000532c
 8009a9c:	2000531c 	.word	0x2000531c
 8009aa0:	20005328 	.word	0x20005328

08009aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009aaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ab0:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <prvHeapInit+0xac>)
 8009ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00c      	beq.n	8009ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3307      	adds	r3, #7
 8009ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <prvHeapInit+0xac>)
 8009ad4:	4413      	add	r3, r2
 8009ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009adc:	4a1d      	ldr	r2, [pc, #116]	; (8009b54 <prvHeapInit+0xb0>)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	; (8009b54 <prvHeapInit+0xb0>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	4413      	add	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009af0:	2208      	movs	r2, #8
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4a15      	ldr	r2, [pc, #84]	; (8009b58 <prvHeapInit+0xb4>)
 8009b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <prvHeapInit+0xb4>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b0e:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <prvHeapInit+0xb4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b24:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <prvHeapInit+0xb4>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <prvHeapInit+0xb8>)
 8009b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4a09      	ldr	r2, [pc, #36]	; (8009b60 <prvHeapInit+0xbc>)
 8009b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b3c:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <prvHeapInit+0xc0>)
 8009b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b42:	601a      	str	r2, [r3, #0]
}
 8009b44:	bf00      	nop
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20001710 	.word	0x20001710
 8009b54:	20005310 	.word	0x20005310
 8009b58:	20005318 	.word	0x20005318
 8009b5c:	20005320 	.word	0x20005320
 8009b60:	2000531c 	.word	0x2000531c
 8009b64:	2000532c 	.word	0x2000532c

08009b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b70:	4b28      	ldr	r3, [pc, #160]	; (8009c14 <prvInsertBlockIntoFreeList+0xac>)
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	e002      	b.n	8009b7c <prvInsertBlockIntoFreeList+0x14>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d8f7      	bhi.n	8009b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	4413      	add	r3, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d108      	bne.n	8009baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	441a      	add	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	441a      	add	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d118      	bne.n	8009bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <prvInsertBlockIntoFreeList+0xb0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d00d      	beq.n	8009be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	441a      	add	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	e008      	b.n	8009bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009be6:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <prvInsertBlockIntoFreeList+0xb0>)
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	e003      	b.n	8009bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d002      	beq.n	8009c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c06:	bf00      	nop
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20005310 	.word	0x20005310
 8009c18:	20005318 	.word	0x20005318

08009c1c <__errno>:
 8009c1c:	4b01      	ldr	r3, [pc, #4]	; (8009c24 <__errno+0x8>)
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20000018 	.word	0x20000018

08009c28 <std>:
 8009c28:	2300      	movs	r3, #0
 8009c2a:	b510      	push	{r4, lr}
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c36:	6083      	str	r3, [r0, #8]
 8009c38:	8181      	strh	r1, [r0, #12]
 8009c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c3c:	81c2      	strh	r2, [r0, #14]
 8009c3e:	6183      	str	r3, [r0, #24]
 8009c40:	4619      	mov	r1, r3
 8009c42:	2208      	movs	r2, #8
 8009c44:	305c      	adds	r0, #92	; 0x5c
 8009c46:	f000 f91a 	bl	8009e7e <memset>
 8009c4a:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <std+0x38>)
 8009c4c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c4e:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <std+0x3c>)
 8009c50:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <std+0x40>)
 8009c54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c56:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <std+0x44>)
 8009c58:	6224      	str	r4, [r4, #32]
 8009c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c5c:	bd10      	pop	{r4, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800a1c9 	.word	0x0800a1c9
 8009c64:	0800a1eb 	.word	0x0800a1eb
 8009c68:	0800a223 	.word	0x0800a223
 8009c6c:	0800a247 	.word	0x0800a247

08009c70 <_cleanup_r>:
 8009c70:	4901      	ldr	r1, [pc, #4]	; (8009c78 <_cleanup_r+0x8>)
 8009c72:	f000 b8af 	b.w	8009dd4 <_fwalk_reent>
 8009c76:	bf00      	nop
 8009c78:	0800a521 	.word	0x0800a521

08009c7c <__sfmoreglue>:
 8009c7c:	b570      	push	{r4, r5, r6, lr}
 8009c7e:	2268      	movs	r2, #104	; 0x68
 8009c80:	1e4d      	subs	r5, r1, #1
 8009c82:	4355      	muls	r5, r2
 8009c84:	460e      	mov	r6, r1
 8009c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c8a:	f000 f921 	bl	8009ed0 <_malloc_r>
 8009c8e:	4604      	mov	r4, r0
 8009c90:	b140      	cbz	r0, 8009ca4 <__sfmoreglue+0x28>
 8009c92:	2100      	movs	r1, #0
 8009c94:	e9c0 1600 	strd	r1, r6, [r0]
 8009c98:	300c      	adds	r0, #12
 8009c9a:	60a0      	str	r0, [r4, #8]
 8009c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ca0:	f000 f8ed 	bl	8009e7e <memset>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	bd70      	pop	{r4, r5, r6, pc}

08009ca8 <__sfp_lock_acquire>:
 8009ca8:	4801      	ldr	r0, [pc, #4]	; (8009cb0 <__sfp_lock_acquire+0x8>)
 8009caa:	f000 b8d8 	b.w	8009e5e <__retarget_lock_acquire_recursive>
 8009cae:	bf00      	nop
 8009cb0:	20005331 	.word	0x20005331

08009cb4 <__sfp_lock_release>:
 8009cb4:	4801      	ldr	r0, [pc, #4]	; (8009cbc <__sfp_lock_release+0x8>)
 8009cb6:	f000 b8d3 	b.w	8009e60 <__retarget_lock_release_recursive>
 8009cba:	bf00      	nop
 8009cbc:	20005331 	.word	0x20005331

08009cc0 <__sinit_lock_acquire>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	; (8009cc8 <__sinit_lock_acquire+0x8>)
 8009cc2:	f000 b8cc 	b.w	8009e5e <__retarget_lock_acquire_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	20005332 	.word	0x20005332

08009ccc <__sinit_lock_release>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	; (8009cd4 <__sinit_lock_release+0x8>)
 8009cce:	f000 b8c7 	b.w	8009e60 <__retarget_lock_release_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	20005332 	.word	0x20005332

08009cd8 <__sinit>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4604      	mov	r4, r0
 8009cdc:	f7ff fff0 	bl	8009cc0 <__sinit_lock_acquire>
 8009ce0:	69a3      	ldr	r3, [r4, #24]
 8009ce2:	b11b      	cbz	r3, 8009cec <__sinit+0x14>
 8009ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce8:	f7ff bff0 	b.w	8009ccc <__sinit_lock_release>
 8009cec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cf0:	6523      	str	r3, [r4, #80]	; 0x50
 8009cf2:	4b13      	ldr	r3, [pc, #76]	; (8009d40 <__sinit+0x68>)
 8009cf4:	4a13      	ldr	r2, [pc, #76]	; (8009d44 <__sinit+0x6c>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	bf04      	itt	eq
 8009cfe:	2301      	moveq	r3, #1
 8009d00:	61a3      	streq	r3, [r4, #24]
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 f820 	bl	8009d48 <__sfp>
 8009d08:	6060      	str	r0, [r4, #4]
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 f81c 	bl	8009d48 <__sfp>
 8009d10:	60a0      	str	r0, [r4, #8]
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 f818 	bl	8009d48 <__sfp>
 8009d18:	2200      	movs	r2, #0
 8009d1a:	60e0      	str	r0, [r4, #12]
 8009d1c:	2104      	movs	r1, #4
 8009d1e:	6860      	ldr	r0, [r4, #4]
 8009d20:	f7ff ff82 	bl	8009c28 <std>
 8009d24:	68a0      	ldr	r0, [r4, #8]
 8009d26:	2201      	movs	r2, #1
 8009d28:	2109      	movs	r1, #9
 8009d2a:	f7ff ff7d 	bl	8009c28 <std>
 8009d2e:	68e0      	ldr	r0, [r4, #12]
 8009d30:	2202      	movs	r2, #2
 8009d32:	2112      	movs	r1, #18
 8009d34:	f7ff ff78 	bl	8009c28 <std>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	61a3      	str	r3, [r4, #24]
 8009d3c:	e7d2      	b.n	8009ce4 <__sinit+0xc>
 8009d3e:	bf00      	nop
 8009d40:	0800b03c 	.word	0x0800b03c
 8009d44:	08009c71 	.word	0x08009c71

08009d48 <__sfp>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	f7ff ffac 	bl	8009ca8 <__sfp_lock_acquire>
 8009d50:	4b1e      	ldr	r3, [pc, #120]	; (8009dcc <__sfp+0x84>)
 8009d52:	681e      	ldr	r6, [r3, #0]
 8009d54:	69b3      	ldr	r3, [r6, #24]
 8009d56:	b913      	cbnz	r3, 8009d5e <__sfp+0x16>
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff ffbd 	bl	8009cd8 <__sinit>
 8009d5e:	3648      	adds	r6, #72	; 0x48
 8009d60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	d503      	bpl.n	8009d70 <__sfp+0x28>
 8009d68:	6833      	ldr	r3, [r6, #0]
 8009d6a:	b30b      	cbz	r3, 8009db0 <__sfp+0x68>
 8009d6c:	6836      	ldr	r6, [r6, #0]
 8009d6e:	e7f7      	b.n	8009d60 <__sfp+0x18>
 8009d70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d74:	b9d5      	cbnz	r5, 8009dac <__sfp+0x64>
 8009d76:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <__sfp+0x88>)
 8009d78:	60e3      	str	r3, [r4, #12]
 8009d7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d7e:	6665      	str	r5, [r4, #100]	; 0x64
 8009d80:	f000 f86c 	bl	8009e5c <__retarget_lock_init_recursive>
 8009d84:	f7ff ff96 	bl	8009cb4 <__sfp_lock_release>
 8009d88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d90:	6025      	str	r5, [r4, #0]
 8009d92:	61a5      	str	r5, [r4, #24]
 8009d94:	2208      	movs	r2, #8
 8009d96:	4629      	mov	r1, r5
 8009d98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d9c:	f000 f86f 	bl	8009e7e <memset>
 8009da0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009da4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009da8:	4620      	mov	r0, r4
 8009daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dac:	3468      	adds	r4, #104	; 0x68
 8009dae:	e7d9      	b.n	8009d64 <__sfp+0x1c>
 8009db0:	2104      	movs	r1, #4
 8009db2:	4638      	mov	r0, r7
 8009db4:	f7ff ff62 	bl	8009c7c <__sfmoreglue>
 8009db8:	4604      	mov	r4, r0
 8009dba:	6030      	str	r0, [r6, #0]
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d1d5      	bne.n	8009d6c <__sfp+0x24>
 8009dc0:	f7ff ff78 	bl	8009cb4 <__sfp_lock_release>
 8009dc4:	230c      	movs	r3, #12
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	e7ee      	b.n	8009da8 <__sfp+0x60>
 8009dca:	bf00      	nop
 8009dcc:	0800b03c 	.word	0x0800b03c
 8009dd0:	ffff0001 	.word	0xffff0001

08009dd4 <_fwalk_reent>:
 8009dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd8:	4606      	mov	r6, r0
 8009dda:	4688      	mov	r8, r1
 8009ddc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009de0:	2700      	movs	r7, #0
 8009de2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009de6:	f1b9 0901 	subs.w	r9, r9, #1
 8009dea:	d505      	bpl.n	8009df8 <_fwalk_reent+0x24>
 8009dec:	6824      	ldr	r4, [r4, #0]
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	d1f7      	bne.n	8009de2 <_fwalk_reent+0xe>
 8009df2:	4638      	mov	r0, r7
 8009df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df8:	89ab      	ldrh	r3, [r5, #12]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d907      	bls.n	8009e0e <_fwalk_reent+0x3a>
 8009dfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e02:	3301      	adds	r3, #1
 8009e04:	d003      	beq.n	8009e0e <_fwalk_reent+0x3a>
 8009e06:	4629      	mov	r1, r5
 8009e08:	4630      	mov	r0, r6
 8009e0a:	47c0      	blx	r8
 8009e0c:	4307      	orrs	r7, r0
 8009e0e:	3568      	adds	r5, #104	; 0x68
 8009e10:	e7e9      	b.n	8009de6 <_fwalk_reent+0x12>
	...

08009e14 <__libc_init_array>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4d0d      	ldr	r5, [pc, #52]	; (8009e4c <__libc_init_array+0x38>)
 8009e18:	4c0d      	ldr	r4, [pc, #52]	; (8009e50 <__libc_init_array+0x3c>)
 8009e1a:	1b64      	subs	r4, r4, r5
 8009e1c:	10a4      	asrs	r4, r4, #2
 8009e1e:	2600      	movs	r6, #0
 8009e20:	42a6      	cmp	r6, r4
 8009e22:	d109      	bne.n	8009e38 <__libc_init_array+0x24>
 8009e24:	4d0b      	ldr	r5, [pc, #44]	; (8009e54 <__libc_init_array+0x40>)
 8009e26:	4c0c      	ldr	r4, [pc, #48]	; (8009e58 <__libc_init_array+0x44>)
 8009e28:	f000 ffa8 	bl	800ad7c <_init>
 8009e2c:	1b64      	subs	r4, r4, r5
 8009e2e:	10a4      	asrs	r4, r4, #2
 8009e30:	2600      	movs	r6, #0
 8009e32:	42a6      	cmp	r6, r4
 8009e34:	d105      	bne.n	8009e42 <__libc_init_array+0x2e>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3c:	4798      	blx	r3
 8009e3e:	3601      	adds	r6, #1
 8009e40:	e7ee      	b.n	8009e20 <__libc_init_array+0xc>
 8009e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e46:	4798      	blx	r3
 8009e48:	3601      	adds	r6, #1
 8009e4a:	e7f2      	b.n	8009e32 <__libc_init_array+0x1e>
 8009e4c:	0800b07c 	.word	0x0800b07c
 8009e50:	0800b07c 	.word	0x0800b07c
 8009e54:	0800b07c 	.word	0x0800b07c
 8009e58:	0800b080 	.word	0x0800b080

08009e5c <__retarget_lock_init_recursive>:
 8009e5c:	4770      	bx	lr

08009e5e <__retarget_lock_acquire_recursive>:
 8009e5e:	4770      	bx	lr

08009e60 <__retarget_lock_release_recursive>:
 8009e60:	4770      	bx	lr

08009e62 <memcpy>:
 8009e62:	440a      	add	r2, r1
 8009e64:	4291      	cmp	r1, r2
 8009e66:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e6a:	d100      	bne.n	8009e6e <memcpy+0xc>
 8009e6c:	4770      	bx	lr
 8009e6e:	b510      	push	{r4, lr}
 8009e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e78:	4291      	cmp	r1, r2
 8009e7a:	d1f9      	bne.n	8009e70 <memcpy+0xe>
 8009e7c:	bd10      	pop	{r4, pc}

08009e7e <memset>:
 8009e7e:	4402      	add	r2, r0
 8009e80:	4603      	mov	r3, r0
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d100      	bne.n	8009e88 <memset+0xa>
 8009e86:	4770      	bx	lr
 8009e88:	f803 1b01 	strb.w	r1, [r3], #1
 8009e8c:	e7f9      	b.n	8009e82 <memset+0x4>
	...

08009e90 <sbrk_aligned>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	4e0e      	ldr	r6, [pc, #56]	; (8009ecc <sbrk_aligned+0x3c>)
 8009e94:	460c      	mov	r4, r1
 8009e96:	6831      	ldr	r1, [r6, #0]
 8009e98:	4605      	mov	r5, r0
 8009e9a:	b911      	cbnz	r1, 8009ea2 <sbrk_aligned+0x12>
 8009e9c:	f000 f984 	bl	800a1a8 <_sbrk_r>
 8009ea0:	6030      	str	r0, [r6, #0]
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f000 f97f 	bl	800a1a8 <_sbrk_r>
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	d00a      	beq.n	8009ec4 <sbrk_aligned+0x34>
 8009eae:	1cc4      	adds	r4, r0, #3
 8009eb0:	f024 0403 	bic.w	r4, r4, #3
 8009eb4:	42a0      	cmp	r0, r4
 8009eb6:	d007      	beq.n	8009ec8 <sbrk_aligned+0x38>
 8009eb8:	1a21      	subs	r1, r4, r0
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 f974 	bl	800a1a8 <_sbrk_r>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d101      	bne.n	8009ec8 <sbrk_aligned+0x38>
 8009ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ec8:	4620      	mov	r0, r4
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	20005338 	.word	0x20005338

08009ed0 <_malloc_r>:
 8009ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed4:	1ccd      	adds	r5, r1, #3
 8009ed6:	f025 0503 	bic.w	r5, r5, #3
 8009eda:	3508      	adds	r5, #8
 8009edc:	2d0c      	cmp	r5, #12
 8009ede:	bf38      	it	cc
 8009ee0:	250c      	movcc	r5, #12
 8009ee2:	2d00      	cmp	r5, #0
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	db01      	blt.n	8009eec <_malloc_r+0x1c>
 8009ee8:	42a9      	cmp	r1, r5
 8009eea:	d905      	bls.n	8009ef8 <_malloc_r+0x28>
 8009eec:	230c      	movs	r3, #12
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	2600      	movs	r6, #0
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef8:	4e2e      	ldr	r6, [pc, #184]	; (8009fb4 <_malloc_r+0xe4>)
 8009efa:	f000 fbc5 	bl	800a688 <__malloc_lock>
 8009efe:	6833      	ldr	r3, [r6, #0]
 8009f00:	461c      	mov	r4, r3
 8009f02:	bb34      	cbnz	r4, 8009f52 <_malloc_r+0x82>
 8009f04:	4629      	mov	r1, r5
 8009f06:	4638      	mov	r0, r7
 8009f08:	f7ff ffc2 	bl	8009e90 <sbrk_aligned>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	4604      	mov	r4, r0
 8009f10:	d14d      	bne.n	8009fae <_malloc_r+0xde>
 8009f12:	6834      	ldr	r4, [r6, #0]
 8009f14:	4626      	mov	r6, r4
 8009f16:	2e00      	cmp	r6, #0
 8009f18:	d140      	bne.n	8009f9c <_malloc_r+0xcc>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4638      	mov	r0, r7
 8009f20:	eb04 0803 	add.w	r8, r4, r3
 8009f24:	f000 f940 	bl	800a1a8 <_sbrk_r>
 8009f28:	4580      	cmp	r8, r0
 8009f2a:	d13a      	bne.n	8009fa2 <_malloc_r+0xd2>
 8009f2c:	6821      	ldr	r1, [r4, #0]
 8009f2e:	3503      	adds	r5, #3
 8009f30:	1a6d      	subs	r5, r5, r1
 8009f32:	f025 0503 	bic.w	r5, r5, #3
 8009f36:	3508      	adds	r5, #8
 8009f38:	2d0c      	cmp	r5, #12
 8009f3a:	bf38      	it	cc
 8009f3c:	250c      	movcc	r5, #12
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7ff ffa5 	bl	8009e90 <sbrk_aligned>
 8009f46:	3001      	adds	r0, #1
 8009f48:	d02b      	beq.n	8009fa2 <_malloc_r+0xd2>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	442b      	add	r3, r5
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	e00e      	b.n	8009f70 <_malloc_r+0xa0>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	1b52      	subs	r2, r2, r5
 8009f56:	d41e      	bmi.n	8009f96 <_malloc_r+0xc6>
 8009f58:	2a0b      	cmp	r2, #11
 8009f5a:	d916      	bls.n	8009f8a <_malloc_r+0xba>
 8009f5c:	1961      	adds	r1, r4, r5
 8009f5e:	42a3      	cmp	r3, r4
 8009f60:	6025      	str	r5, [r4, #0]
 8009f62:	bf18      	it	ne
 8009f64:	6059      	strne	r1, [r3, #4]
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	bf08      	it	eq
 8009f6a:	6031      	streq	r1, [r6, #0]
 8009f6c:	5162      	str	r2, [r4, r5]
 8009f6e:	604b      	str	r3, [r1, #4]
 8009f70:	4638      	mov	r0, r7
 8009f72:	f104 060b 	add.w	r6, r4, #11
 8009f76:	f000 fb8d 	bl	800a694 <__malloc_unlock>
 8009f7a:	f026 0607 	bic.w	r6, r6, #7
 8009f7e:	1d23      	adds	r3, r4, #4
 8009f80:	1af2      	subs	r2, r6, r3
 8009f82:	d0b6      	beq.n	8009ef2 <_malloc_r+0x22>
 8009f84:	1b9b      	subs	r3, r3, r6
 8009f86:	50a3      	str	r3, [r4, r2]
 8009f88:	e7b3      	b.n	8009ef2 <_malloc_r+0x22>
 8009f8a:	6862      	ldr	r2, [r4, #4]
 8009f8c:	42a3      	cmp	r3, r4
 8009f8e:	bf0c      	ite	eq
 8009f90:	6032      	streq	r2, [r6, #0]
 8009f92:	605a      	strne	r2, [r3, #4]
 8009f94:	e7ec      	b.n	8009f70 <_malloc_r+0xa0>
 8009f96:	4623      	mov	r3, r4
 8009f98:	6864      	ldr	r4, [r4, #4]
 8009f9a:	e7b2      	b.n	8009f02 <_malloc_r+0x32>
 8009f9c:	4634      	mov	r4, r6
 8009f9e:	6876      	ldr	r6, [r6, #4]
 8009fa0:	e7b9      	b.n	8009f16 <_malloc_r+0x46>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	603b      	str	r3, [r7, #0]
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	f000 fb74 	bl	800a694 <__malloc_unlock>
 8009fac:	e7a1      	b.n	8009ef2 <_malloc_r+0x22>
 8009fae:	6025      	str	r5, [r4, #0]
 8009fb0:	e7de      	b.n	8009f70 <_malloc_r+0xa0>
 8009fb2:	bf00      	nop
 8009fb4:	20005334 	.word	0x20005334

08009fb8 <iprintf>:
 8009fb8:	b40f      	push	{r0, r1, r2, r3}
 8009fba:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <iprintf+0x2c>)
 8009fbc:	b513      	push	{r0, r1, r4, lr}
 8009fbe:	681c      	ldr	r4, [r3, #0]
 8009fc0:	b124      	cbz	r4, 8009fcc <iprintf+0x14>
 8009fc2:	69a3      	ldr	r3, [r4, #24]
 8009fc4:	b913      	cbnz	r3, 8009fcc <iprintf+0x14>
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7ff fe86 	bl	8009cd8 <__sinit>
 8009fcc:	ab05      	add	r3, sp, #20
 8009fce:	9a04      	ldr	r2, [sp, #16]
 8009fd0:	68a1      	ldr	r1, [r4, #8]
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fbd9 	bl	800a78c <_vfiprintf_r>
 8009fda:	b002      	add	sp, #8
 8009fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe0:	b004      	add	sp, #16
 8009fe2:	4770      	bx	lr
 8009fe4:	20000018 	.word	0x20000018

08009fe8 <_puts_r>:
 8009fe8:	b570      	push	{r4, r5, r6, lr}
 8009fea:	460e      	mov	r6, r1
 8009fec:	4605      	mov	r5, r0
 8009fee:	b118      	cbz	r0, 8009ff8 <_puts_r+0x10>
 8009ff0:	6983      	ldr	r3, [r0, #24]
 8009ff2:	b90b      	cbnz	r3, 8009ff8 <_puts_r+0x10>
 8009ff4:	f7ff fe70 	bl	8009cd8 <__sinit>
 8009ff8:	69ab      	ldr	r3, [r5, #24]
 8009ffa:	68ac      	ldr	r4, [r5, #8]
 8009ffc:	b913      	cbnz	r3, 800a004 <_puts_r+0x1c>
 8009ffe:	4628      	mov	r0, r5
 800a000:	f7ff fe6a 	bl	8009cd8 <__sinit>
 800a004:	4b2c      	ldr	r3, [pc, #176]	; (800a0b8 <_puts_r+0xd0>)
 800a006:	429c      	cmp	r4, r3
 800a008:	d120      	bne.n	800a04c <_puts_r+0x64>
 800a00a:	686c      	ldr	r4, [r5, #4]
 800a00c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a00e:	07db      	lsls	r3, r3, #31
 800a010:	d405      	bmi.n	800a01e <_puts_r+0x36>
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	0598      	lsls	r0, r3, #22
 800a016:	d402      	bmi.n	800a01e <_puts_r+0x36>
 800a018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a01a:	f7ff ff20 	bl	8009e5e <__retarget_lock_acquire_recursive>
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	0719      	lsls	r1, r3, #28
 800a022:	d51d      	bpl.n	800a060 <_puts_r+0x78>
 800a024:	6923      	ldr	r3, [r4, #16]
 800a026:	b1db      	cbz	r3, 800a060 <_puts_r+0x78>
 800a028:	3e01      	subs	r6, #1
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a030:	3b01      	subs	r3, #1
 800a032:	60a3      	str	r3, [r4, #8]
 800a034:	bb39      	cbnz	r1, 800a086 <_puts_r+0x9e>
 800a036:	2b00      	cmp	r3, #0
 800a038:	da38      	bge.n	800a0ac <_puts_r+0xc4>
 800a03a:	4622      	mov	r2, r4
 800a03c:	210a      	movs	r1, #10
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 f906 	bl	800a250 <__swbuf_r>
 800a044:	3001      	adds	r0, #1
 800a046:	d011      	beq.n	800a06c <_puts_r+0x84>
 800a048:	250a      	movs	r5, #10
 800a04a:	e011      	b.n	800a070 <_puts_r+0x88>
 800a04c:	4b1b      	ldr	r3, [pc, #108]	; (800a0bc <_puts_r+0xd4>)
 800a04e:	429c      	cmp	r4, r3
 800a050:	d101      	bne.n	800a056 <_puts_r+0x6e>
 800a052:	68ac      	ldr	r4, [r5, #8]
 800a054:	e7da      	b.n	800a00c <_puts_r+0x24>
 800a056:	4b1a      	ldr	r3, [pc, #104]	; (800a0c0 <_puts_r+0xd8>)
 800a058:	429c      	cmp	r4, r3
 800a05a:	bf08      	it	eq
 800a05c:	68ec      	ldreq	r4, [r5, #12]
 800a05e:	e7d5      	b.n	800a00c <_puts_r+0x24>
 800a060:	4621      	mov	r1, r4
 800a062:	4628      	mov	r0, r5
 800a064:	f000 f958 	bl	800a318 <__swsetup_r>
 800a068:	2800      	cmp	r0, #0
 800a06a:	d0dd      	beq.n	800a028 <_puts_r+0x40>
 800a06c:	f04f 35ff 	mov.w	r5, #4294967295
 800a070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a072:	07da      	lsls	r2, r3, #31
 800a074:	d405      	bmi.n	800a082 <_puts_r+0x9a>
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	059b      	lsls	r3, r3, #22
 800a07a:	d402      	bmi.n	800a082 <_puts_r+0x9a>
 800a07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a07e:	f7ff feef 	bl	8009e60 <__retarget_lock_release_recursive>
 800a082:	4628      	mov	r0, r5
 800a084:	bd70      	pop	{r4, r5, r6, pc}
 800a086:	2b00      	cmp	r3, #0
 800a088:	da04      	bge.n	800a094 <_puts_r+0xac>
 800a08a:	69a2      	ldr	r2, [r4, #24]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	dc06      	bgt.n	800a09e <_puts_r+0xb6>
 800a090:	290a      	cmp	r1, #10
 800a092:	d004      	beq.n	800a09e <_puts_r+0xb6>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	6022      	str	r2, [r4, #0]
 800a09a:	7019      	strb	r1, [r3, #0]
 800a09c:	e7c5      	b.n	800a02a <_puts_r+0x42>
 800a09e:	4622      	mov	r2, r4
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	f000 f8d5 	bl	800a250 <__swbuf_r>
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	d1bf      	bne.n	800a02a <_puts_r+0x42>
 800a0aa:	e7df      	b.n	800a06c <_puts_r+0x84>
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	250a      	movs	r5, #10
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	701d      	strb	r5, [r3, #0]
 800a0b6:	e7db      	b.n	800a070 <_puts_r+0x88>
 800a0b8:	0800affc 	.word	0x0800affc
 800a0bc:	0800b01c 	.word	0x0800b01c
 800a0c0:	0800afdc 	.word	0x0800afdc

0800a0c4 <puts>:
 800a0c4:	4b02      	ldr	r3, [pc, #8]	; (800a0d0 <puts+0xc>)
 800a0c6:	4601      	mov	r1, r0
 800a0c8:	6818      	ldr	r0, [r3, #0]
 800a0ca:	f7ff bf8d 	b.w	8009fe8 <_puts_r>
 800a0ce:	bf00      	nop
 800a0d0:	20000018 	.word	0x20000018

0800a0d4 <cleanup_glue>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	6809      	ldr	r1, [r1, #0]
 800a0da:	4605      	mov	r5, r0
 800a0dc:	b109      	cbz	r1, 800a0e2 <cleanup_glue+0xe>
 800a0de:	f7ff fff9 	bl	800a0d4 <cleanup_glue>
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0ea:	f000 bad9 	b.w	800a6a0 <_free_r>
	...

0800a0f0 <_reclaim_reent>:
 800a0f0:	4b2c      	ldr	r3, [pc, #176]	; (800a1a4 <_reclaim_reent+0xb4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4283      	cmp	r3, r0
 800a0f6:	b570      	push	{r4, r5, r6, lr}
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	d051      	beq.n	800a1a0 <_reclaim_reent+0xb0>
 800a0fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a0fe:	b143      	cbz	r3, 800a112 <_reclaim_reent+0x22>
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d14a      	bne.n	800a19c <_reclaim_reent+0xac>
 800a106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a108:	6819      	ldr	r1, [r3, #0]
 800a10a:	b111      	cbz	r1, 800a112 <_reclaim_reent+0x22>
 800a10c:	4620      	mov	r0, r4
 800a10e:	f000 fac7 	bl	800a6a0 <_free_r>
 800a112:	6961      	ldr	r1, [r4, #20]
 800a114:	b111      	cbz	r1, 800a11c <_reclaim_reent+0x2c>
 800a116:	4620      	mov	r0, r4
 800a118:	f000 fac2 	bl	800a6a0 <_free_r>
 800a11c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a11e:	b111      	cbz	r1, 800a126 <_reclaim_reent+0x36>
 800a120:	4620      	mov	r0, r4
 800a122:	f000 fabd 	bl	800a6a0 <_free_r>
 800a126:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a128:	b111      	cbz	r1, 800a130 <_reclaim_reent+0x40>
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 fab8 	bl	800a6a0 <_free_r>
 800a130:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a132:	b111      	cbz	r1, 800a13a <_reclaim_reent+0x4a>
 800a134:	4620      	mov	r0, r4
 800a136:	f000 fab3 	bl	800a6a0 <_free_r>
 800a13a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a13c:	b111      	cbz	r1, 800a144 <_reclaim_reent+0x54>
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 faae 	bl	800a6a0 <_free_r>
 800a144:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a146:	b111      	cbz	r1, 800a14e <_reclaim_reent+0x5e>
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 faa9 	bl	800a6a0 <_free_r>
 800a14e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a150:	b111      	cbz	r1, 800a158 <_reclaim_reent+0x68>
 800a152:	4620      	mov	r0, r4
 800a154:	f000 faa4 	bl	800a6a0 <_free_r>
 800a158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a15a:	b111      	cbz	r1, 800a162 <_reclaim_reent+0x72>
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 fa9f 	bl	800a6a0 <_free_r>
 800a162:	69a3      	ldr	r3, [r4, #24]
 800a164:	b1e3      	cbz	r3, 800a1a0 <_reclaim_reent+0xb0>
 800a166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a168:	4620      	mov	r0, r4
 800a16a:	4798      	blx	r3
 800a16c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a16e:	b1b9      	cbz	r1, 800a1a0 <_reclaim_reent+0xb0>
 800a170:	4620      	mov	r0, r4
 800a172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a176:	f7ff bfad 	b.w	800a0d4 <cleanup_glue>
 800a17a:	5949      	ldr	r1, [r1, r5]
 800a17c:	b941      	cbnz	r1, 800a190 <_reclaim_reent+0xa0>
 800a17e:	3504      	adds	r5, #4
 800a180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a182:	2d80      	cmp	r5, #128	; 0x80
 800a184:	68d9      	ldr	r1, [r3, #12]
 800a186:	d1f8      	bne.n	800a17a <_reclaim_reent+0x8a>
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fa89 	bl	800a6a0 <_free_r>
 800a18e:	e7ba      	b.n	800a106 <_reclaim_reent+0x16>
 800a190:	680e      	ldr	r6, [r1, #0]
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fa84 	bl	800a6a0 <_free_r>
 800a198:	4631      	mov	r1, r6
 800a19a:	e7ef      	b.n	800a17c <_reclaim_reent+0x8c>
 800a19c:	2500      	movs	r5, #0
 800a19e:	e7ef      	b.n	800a180 <_reclaim_reent+0x90>
 800a1a0:	bd70      	pop	{r4, r5, r6, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000018 	.word	0x20000018

0800a1a8 <_sbrk_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	4d06      	ldr	r5, [pc, #24]	; (800a1c4 <_sbrk_r+0x1c>)
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4608      	mov	r0, r1
 800a1b2:	602b      	str	r3, [r5, #0]
 800a1b4:	f7f7 fdc0 	bl	8001d38 <_sbrk>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_sbrk_r+0x1a>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_sbrk_r+0x1a>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	2000533c 	.word	0x2000533c

0800a1c8 <__sread>:
 800a1c8:	b510      	push	{r4, lr}
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d0:	f000 fda0 	bl	800ad14 <_read_r>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	bfab      	itete	ge
 800a1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1da:	89a3      	ldrhlt	r3, [r4, #12]
 800a1dc:	181b      	addge	r3, r3, r0
 800a1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1e2:	bfac      	ite	ge
 800a1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1e6:	81a3      	strhlt	r3, [r4, #12]
 800a1e8:	bd10      	pop	{r4, pc}

0800a1ea <__swrite>:
 800a1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ee:	461f      	mov	r7, r3
 800a1f0:	898b      	ldrh	r3, [r1, #12]
 800a1f2:	05db      	lsls	r3, r3, #23
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	4616      	mov	r6, r2
 800a1fa:	d505      	bpl.n	800a208 <__swrite+0x1e>
 800a1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a200:	2302      	movs	r3, #2
 800a202:	2200      	movs	r2, #0
 800a204:	f000 f9c8 	bl	800a598 <_lseek_r>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a20e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a212:	81a3      	strh	r3, [r4, #12]
 800a214:	4632      	mov	r2, r6
 800a216:	463b      	mov	r3, r7
 800a218:	4628      	mov	r0, r5
 800a21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a21e:	f000 b869 	b.w	800a2f4 <_write_r>

0800a222 <__sseek>:
 800a222:	b510      	push	{r4, lr}
 800a224:	460c      	mov	r4, r1
 800a226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22a:	f000 f9b5 	bl	800a598 <_lseek_r>
 800a22e:	1c43      	adds	r3, r0, #1
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	bf15      	itete	ne
 800a234:	6560      	strne	r0, [r4, #84]	; 0x54
 800a236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a23a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a23e:	81a3      	strheq	r3, [r4, #12]
 800a240:	bf18      	it	ne
 800a242:	81a3      	strhne	r3, [r4, #12]
 800a244:	bd10      	pop	{r4, pc}

0800a246 <__sclose>:
 800a246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24a:	f000 b8d3 	b.w	800a3f4 <_close_r>
	...

0800a250 <__swbuf_r>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	460e      	mov	r6, r1
 800a254:	4614      	mov	r4, r2
 800a256:	4605      	mov	r5, r0
 800a258:	b118      	cbz	r0, 800a262 <__swbuf_r+0x12>
 800a25a:	6983      	ldr	r3, [r0, #24]
 800a25c:	b90b      	cbnz	r3, 800a262 <__swbuf_r+0x12>
 800a25e:	f7ff fd3b 	bl	8009cd8 <__sinit>
 800a262:	4b21      	ldr	r3, [pc, #132]	; (800a2e8 <__swbuf_r+0x98>)
 800a264:	429c      	cmp	r4, r3
 800a266:	d12b      	bne.n	800a2c0 <__swbuf_r+0x70>
 800a268:	686c      	ldr	r4, [r5, #4]
 800a26a:	69a3      	ldr	r3, [r4, #24]
 800a26c:	60a3      	str	r3, [r4, #8]
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	071a      	lsls	r2, r3, #28
 800a272:	d52f      	bpl.n	800a2d4 <__swbuf_r+0x84>
 800a274:	6923      	ldr	r3, [r4, #16]
 800a276:	b36b      	cbz	r3, 800a2d4 <__swbuf_r+0x84>
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	6820      	ldr	r0, [r4, #0]
 800a27c:	1ac0      	subs	r0, r0, r3
 800a27e:	6963      	ldr	r3, [r4, #20]
 800a280:	b2f6      	uxtb	r6, r6
 800a282:	4283      	cmp	r3, r0
 800a284:	4637      	mov	r7, r6
 800a286:	dc04      	bgt.n	800a292 <__swbuf_r+0x42>
 800a288:	4621      	mov	r1, r4
 800a28a:	4628      	mov	r0, r5
 800a28c:	f000 f948 	bl	800a520 <_fflush_r>
 800a290:	bb30      	cbnz	r0, 800a2e0 <__swbuf_r+0x90>
 800a292:	68a3      	ldr	r3, [r4, #8]
 800a294:	3b01      	subs	r3, #1
 800a296:	60a3      	str	r3, [r4, #8]
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	1c5a      	adds	r2, r3, #1
 800a29c:	6022      	str	r2, [r4, #0]
 800a29e:	701e      	strb	r6, [r3, #0]
 800a2a0:	6963      	ldr	r3, [r4, #20]
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	4283      	cmp	r3, r0
 800a2a6:	d004      	beq.n	800a2b2 <__swbuf_r+0x62>
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	07db      	lsls	r3, r3, #31
 800a2ac:	d506      	bpl.n	800a2bc <__swbuf_r+0x6c>
 800a2ae:	2e0a      	cmp	r6, #10
 800a2b0:	d104      	bne.n	800a2bc <__swbuf_r+0x6c>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f000 f933 	bl	800a520 <_fflush_r>
 800a2ba:	b988      	cbnz	r0, 800a2e0 <__swbuf_r+0x90>
 800a2bc:	4638      	mov	r0, r7
 800a2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <__swbuf_r+0x9c>)
 800a2c2:	429c      	cmp	r4, r3
 800a2c4:	d101      	bne.n	800a2ca <__swbuf_r+0x7a>
 800a2c6:	68ac      	ldr	r4, [r5, #8]
 800a2c8:	e7cf      	b.n	800a26a <__swbuf_r+0x1a>
 800a2ca:	4b09      	ldr	r3, [pc, #36]	; (800a2f0 <__swbuf_r+0xa0>)
 800a2cc:	429c      	cmp	r4, r3
 800a2ce:	bf08      	it	eq
 800a2d0:	68ec      	ldreq	r4, [r5, #12]
 800a2d2:	e7ca      	b.n	800a26a <__swbuf_r+0x1a>
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 f81e 	bl	800a318 <__swsetup_r>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d0cb      	beq.n	800a278 <__swbuf_r+0x28>
 800a2e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a2e4:	e7ea      	b.n	800a2bc <__swbuf_r+0x6c>
 800a2e6:	bf00      	nop
 800a2e8:	0800affc 	.word	0x0800affc
 800a2ec:	0800b01c 	.word	0x0800b01c
 800a2f0:	0800afdc 	.word	0x0800afdc

0800a2f4 <_write_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d07      	ldr	r5, [pc, #28]	; (800a314 <_write_r+0x20>)
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	4608      	mov	r0, r1
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	2200      	movs	r2, #0
 800a300:	602a      	str	r2, [r5, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	f7f7 fcc7 	bl	8001c96 <_write>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_write_r+0x1e>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_write_r+0x1e>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	2000533c 	.word	0x2000533c

0800a318 <__swsetup_r>:
 800a318:	4b32      	ldr	r3, [pc, #200]	; (800a3e4 <__swsetup_r+0xcc>)
 800a31a:	b570      	push	{r4, r5, r6, lr}
 800a31c:	681d      	ldr	r5, [r3, #0]
 800a31e:	4606      	mov	r6, r0
 800a320:	460c      	mov	r4, r1
 800a322:	b125      	cbz	r5, 800a32e <__swsetup_r+0x16>
 800a324:	69ab      	ldr	r3, [r5, #24]
 800a326:	b913      	cbnz	r3, 800a32e <__swsetup_r+0x16>
 800a328:	4628      	mov	r0, r5
 800a32a:	f7ff fcd5 	bl	8009cd8 <__sinit>
 800a32e:	4b2e      	ldr	r3, [pc, #184]	; (800a3e8 <__swsetup_r+0xd0>)
 800a330:	429c      	cmp	r4, r3
 800a332:	d10f      	bne.n	800a354 <__swsetup_r+0x3c>
 800a334:	686c      	ldr	r4, [r5, #4]
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a33c:	0719      	lsls	r1, r3, #28
 800a33e:	d42c      	bmi.n	800a39a <__swsetup_r+0x82>
 800a340:	06dd      	lsls	r5, r3, #27
 800a342:	d411      	bmi.n	800a368 <__swsetup_r+0x50>
 800a344:	2309      	movs	r3, #9
 800a346:	6033      	str	r3, [r6, #0]
 800a348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a34c:	81a3      	strh	r3, [r4, #12]
 800a34e:	f04f 30ff 	mov.w	r0, #4294967295
 800a352:	e03e      	b.n	800a3d2 <__swsetup_r+0xba>
 800a354:	4b25      	ldr	r3, [pc, #148]	; (800a3ec <__swsetup_r+0xd4>)
 800a356:	429c      	cmp	r4, r3
 800a358:	d101      	bne.n	800a35e <__swsetup_r+0x46>
 800a35a:	68ac      	ldr	r4, [r5, #8]
 800a35c:	e7eb      	b.n	800a336 <__swsetup_r+0x1e>
 800a35e:	4b24      	ldr	r3, [pc, #144]	; (800a3f0 <__swsetup_r+0xd8>)
 800a360:	429c      	cmp	r4, r3
 800a362:	bf08      	it	eq
 800a364:	68ec      	ldreq	r4, [r5, #12]
 800a366:	e7e6      	b.n	800a336 <__swsetup_r+0x1e>
 800a368:	0758      	lsls	r0, r3, #29
 800a36a:	d512      	bpl.n	800a392 <__swsetup_r+0x7a>
 800a36c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a36e:	b141      	cbz	r1, 800a382 <__swsetup_r+0x6a>
 800a370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a374:	4299      	cmp	r1, r3
 800a376:	d002      	beq.n	800a37e <__swsetup_r+0x66>
 800a378:	4630      	mov	r0, r6
 800a37a:	f000 f991 	bl	800a6a0 <_free_r>
 800a37e:	2300      	movs	r3, #0
 800a380:	6363      	str	r3, [r4, #52]	; 0x34
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	2300      	movs	r3, #0
 800a38c:	6063      	str	r3, [r4, #4]
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	89a3      	ldrh	r3, [r4, #12]
 800a394:	f043 0308 	orr.w	r3, r3, #8
 800a398:	81a3      	strh	r3, [r4, #12]
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	b94b      	cbnz	r3, 800a3b2 <__swsetup_r+0x9a>
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3a8:	d003      	beq.n	800a3b2 <__swsetup_r+0x9a>
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f000 f92b 	bl	800a608 <__smakebuf_r>
 800a3b2:	89a0      	ldrh	r0, [r4, #12]
 800a3b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3b8:	f010 0301 	ands.w	r3, r0, #1
 800a3bc:	d00a      	beq.n	800a3d4 <__swsetup_r+0xbc>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60a3      	str	r3, [r4, #8]
 800a3c2:	6963      	ldr	r3, [r4, #20]
 800a3c4:	425b      	negs	r3, r3
 800a3c6:	61a3      	str	r3, [r4, #24]
 800a3c8:	6923      	ldr	r3, [r4, #16]
 800a3ca:	b943      	cbnz	r3, 800a3de <__swsetup_r+0xc6>
 800a3cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3d0:	d1ba      	bne.n	800a348 <__swsetup_r+0x30>
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	0781      	lsls	r1, r0, #30
 800a3d6:	bf58      	it	pl
 800a3d8:	6963      	ldrpl	r3, [r4, #20]
 800a3da:	60a3      	str	r3, [r4, #8]
 800a3dc:	e7f4      	b.n	800a3c8 <__swsetup_r+0xb0>
 800a3de:	2000      	movs	r0, #0
 800a3e0:	e7f7      	b.n	800a3d2 <__swsetup_r+0xba>
 800a3e2:	bf00      	nop
 800a3e4:	20000018 	.word	0x20000018
 800a3e8:	0800affc 	.word	0x0800affc
 800a3ec:	0800b01c 	.word	0x0800b01c
 800a3f0:	0800afdc 	.word	0x0800afdc

0800a3f4 <_close_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d06      	ldr	r5, [pc, #24]	; (800a410 <_close_r+0x1c>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	f7f7 fc65 	bl	8001cce <_close>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_close_r+0x1a>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_close_r+0x1a>
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	2000533c 	.word	0x2000533c

0800a414 <__sflush_r>:
 800a414:	898a      	ldrh	r2, [r1, #12]
 800a416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41a:	4605      	mov	r5, r0
 800a41c:	0710      	lsls	r0, r2, #28
 800a41e:	460c      	mov	r4, r1
 800a420:	d458      	bmi.n	800a4d4 <__sflush_r+0xc0>
 800a422:	684b      	ldr	r3, [r1, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	dc05      	bgt.n	800a434 <__sflush_r+0x20>
 800a428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dc02      	bgt.n	800a434 <__sflush_r+0x20>
 800a42e:	2000      	movs	r0, #0
 800a430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a436:	2e00      	cmp	r6, #0
 800a438:	d0f9      	beq.n	800a42e <__sflush_r+0x1a>
 800a43a:	2300      	movs	r3, #0
 800a43c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a440:	682f      	ldr	r7, [r5, #0]
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	d032      	beq.n	800a4ac <__sflush_r+0x98>
 800a446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	075a      	lsls	r2, r3, #29
 800a44c:	d505      	bpl.n	800a45a <__sflush_r+0x46>
 800a44e:	6863      	ldr	r3, [r4, #4]
 800a450:	1ac0      	subs	r0, r0, r3
 800a452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a454:	b10b      	cbz	r3, 800a45a <__sflush_r+0x46>
 800a456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a458:	1ac0      	subs	r0, r0, r3
 800a45a:	2300      	movs	r3, #0
 800a45c:	4602      	mov	r2, r0
 800a45e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a460:	6a21      	ldr	r1, [r4, #32]
 800a462:	4628      	mov	r0, r5
 800a464:	47b0      	blx	r6
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	d106      	bne.n	800a47a <__sflush_r+0x66>
 800a46c:	6829      	ldr	r1, [r5, #0]
 800a46e:	291d      	cmp	r1, #29
 800a470:	d82c      	bhi.n	800a4cc <__sflush_r+0xb8>
 800a472:	4a2a      	ldr	r2, [pc, #168]	; (800a51c <__sflush_r+0x108>)
 800a474:	40ca      	lsrs	r2, r1
 800a476:	07d6      	lsls	r6, r2, #31
 800a478:	d528      	bpl.n	800a4cc <__sflush_r+0xb8>
 800a47a:	2200      	movs	r2, #0
 800a47c:	6062      	str	r2, [r4, #4]
 800a47e:	04d9      	lsls	r1, r3, #19
 800a480:	6922      	ldr	r2, [r4, #16]
 800a482:	6022      	str	r2, [r4, #0]
 800a484:	d504      	bpl.n	800a490 <__sflush_r+0x7c>
 800a486:	1c42      	adds	r2, r0, #1
 800a488:	d101      	bne.n	800a48e <__sflush_r+0x7a>
 800a48a:	682b      	ldr	r3, [r5, #0]
 800a48c:	b903      	cbnz	r3, 800a490 <__sflush_r+0x7c>
 800a48e:	6560      	str	r0, [r4, #84]	; 0x54
 800a490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a492:	602f      	str	r7, [r5, #0]
 800a494:	2900      	cmp	r1, #0
 800a496:	d0ca      	beq.n	800a42e <__sflush_r+0x1a>
 800a498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a49c:	4299      	cmp	r1, r3
 800a49e:	d002      	beq.n	800a4a6 <__sflush_r+0x92>
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	f000 f8fd 	bl	800a6a0 <_free_r>
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a4aa:	e7c1      	b.n	800a430 <__sflush_r+0x1c>
 800a4ac:	6a21      	ldr	r1, [r4, #32]
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	47b0      	blx	r6
 800a4b4:	1c41      	adds	r1, r0, #1
 800a4b6:	d1c7      	bne.n	800a448 <__sflush_r+0x34>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d0c4      	beq.n	800a448 <__sflush_r+0x34>
 800a4be:	2b1d      	cmp	r3, #29
 800a4c0:	d001      	beq.n	800a4c6 <__sflush_r+0xb2>
 800a4c2:	2b16      	cmp	r3, #22
 800a4c4:	d101      	bne.n	800a4ca <__sflush_r+0xb6>
 800a4c6:	602f      	str	r7, [r5, #0]
 800a4c8:	e7b1      	b.n	800a42e <__sflush_r+0x1a>
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d0:	81a3      	strh	r3, [r4, #12]
 800a4d2:	e7ad      	b.n	800a430 <__sflush_r+0x1c>
 800a4d4:	690f      	ldr	r7, [r1, #16]
 800a4d6:	2f00      	cmp	r7, #0
 800a4d8:	d0a9      	beq.n	800a42e <__sflush_r+0x1a>
 800a4da:	0793      	lsls	r3, r2, #30
 800a4dc:	680e      	ldr	r6, [r1, #0]
 800a4de:	bf08      	it	eq
 800a4e0:	694b      	ldreq	r3, [r1, #20]
 800a4e2:	600f      	str	r7, [r1, #0]
 800a4e4:	bf18      	it	ne
 800a4e6:	2300      	movne	r3, #0
 800a4e8:	eba6 0807 	sub.w	r8, r6, r7
 800a4ec:	608b      	str	r3, [r1, #8]
 800a4ee:	f1b8 0f00 	cmp.w	r8, #0
 800a4f2:	dd9c      	ble.n	800a42e <__sflush_r+0x1a>
 800a4f4:	6a21      	ldr	r1, [r4, #32]
 800a4f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4f8:	4643      	mov	r3, r8
 800a4fa:	463a      	mov	r2, r7
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b0      	blx	r6
 800a500:	2800      	cmp	r0, #0
 800a502:	dc06      	bgt.n	800a512 <__sflush_r+0xfe>
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a50a:	81a3      	strh	r3, [r4, #12]
 800a50c:	f04f 30ff 	mov.w	r0, #4294967295
 800a510:	e78e      	b.n	800a430 <__sflush_r+0x1c>
 800a512:	4407      	add	r7, r0
 800a514:	eba8 0800 	sub.w	r8, r8, r0
 800a518:	e7e9      	b.n	800a4ee <__sflush_r+0xda>
 800a51a:	bf00      	nop
 800a51c:	20400001 	.word	0x20400001

0800a520 <_fflush_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	690b      	ldr	r3, [r1, #16]
 800a524:	4605      	mov	r5, r0
 800a526:	460c      	mov	r4, r1
 800a528:	b913      	cbnz	r3, 800a530 <_fflush_r+0x10>
 800a52a:	2500      	movs	r5, #0
 800a52c:	4628      	mov	r0, r5
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	b118      	cbz	r0, 800a53a <_fflush_r+0x1a>
 800a532:	6983      	ldr	r3, [r0, #24]
 800a534:	b90b      	cbnz	r3, 800a53a <_fflush_r+0x1a>
 800a536:	f7ff fbcf 	bl	8009cd8 <__sinit>
 800a53a:	4b14      	ldr	r3, [pc, #80]	; (800a58c <_fflush_r+0x6c>)
 800a53c:	429c      	cmp	r4, r3
 800a53e:	d11b      	bne.n	800a578 <_fflush_r+0x58>
 800a540:	686c      	ldr	r4, [r5, #4]
 800a542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0ef      	beq.n	800a52a <_fflush_r+0xa>
 800a54a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a54c:	07d0      	lsls	r0, r2, #31
 800a54e:	d404      	bmi.n	800a55a <_fflush_r+0x3a>
 800a550:	0599      	lsls	r1, r3, #22
 800a552:	d402      	bmi.n	800a55a <_fflush_r+0x3a>
 800a554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a556:	f7ff fc82 	bl	8009e5e <__retarget_lock_acquire_recursive>
 800a55a:	4628      	mov	r0, r5
 800a55c:	4621      	mov	r1, r4
 800a55e:	f7ff ff59 	bl	800a414 <__sflush_r>
 800a562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a564:	07da      	lsls	r2, r3, #31
 800a566:	4605      	mov	r5, r0
 800a568:	d4e0      	bmi.n	800a52c <_fflush_r+0xc>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	059b      	lsls	r3, r3, #22
 800a56e:	d4dd      	bmi.n	800a52c <_fflush_r+0xc>
 800a570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a572:	f7ff fc75 	bl	8009e60 <__retarget_lock_release_recursive>
 800a576:	e7d9      	b.n	800a52c <_fflush_r+0xc>
 800a578:	4b05      	ldr	r3, [pc, #20]	; (800a590 <_fflush_r+0x70>)
 800a57a:	429c      	cmp	r4, r3
 800a57c:	d101      	bne.n	800a582 <_fflush_r+0x62>
 800a57e:	68ac      	ldr	r4, [r5, #8]
 800a580:	e7df      	b.n	800a542 <_fflush_r+0x22>
 800a582:	4b04      	ldr	r3, [pc, #16]	; (800a594 <_fflush_r+0x74>)
 800a584:	429c      	cmp	r4, r3
 800a586:	bf08      	it	eq
 800a588:	68ec      	ldreq	r4, [r5, #12]
 800a58a:	e7da      	b.n	800a542 <_fflush_r+0x22>
 800a58c:	0800affc 	.word	0x0800affc
 800a590:	0800b01c 	.word	0x0800b01c
 800a594:	0800afdc 	.word	0x0800afdc

0800a598 <_lseek_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4d07      	ldr	r5, [pc, #28]	; (800a5b8 <_lseek_r+0x20>)
 800a59c:	4604      	mov	r4, r0
 800a59e:	4608      	mov	r0, r1
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	602a      	str	r2, [r5, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f7f7 fbb8 	bl	8001d1c <_lseek>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_lseek_r+0x1e>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_lseek_r+0x1e>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	2000533c 	.word	0x2000533c

0800a5bc <__swhatbuf_r>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	460e      	mov	r6, r1
 800a5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c4:	2900      	cmp	r1, #0
 800a5c6:	b096      	sub	sp, #88	; 0x58
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	461d      	mov	r5, r3
 800a5cc:	da08      	bge.n	800a5e0 <__swhatbuf_r+0x24>
 800a5ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	061a      	lsls	r2, r3, #24
 800a5d8:	d410      	bmi.n	800a5fc <__swhatbuf_r+0x40>
 800a5da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5de:	e00e      	b.n	800a5fe <__swhatbuf_r+0x42>
 800a5e0:	466a      	mov	r2, sp
 800a5e2:	f000 fba9 	bl	800ad38 <_fstat_r>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	dbf1      	blt.n	800a5ce <__swhatbuf_r+0x12>
 800a5ea:	9a01      	ldr	r2, [sp, #4]
 800a5ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5f4:	425a      	negs	r2, r3
 800a5f6:	415a      	adcs	r2, r3
 800a5f8:	602a      	str	r2, [r5, #0]
 800a5fa:	e7ee      	b.n	800a5da <__swhatbuf_r+0x1e>
 800a5fc:	2340      	movs	r3, #64	; 0x40
 800a5fe:	2000      	movs	r0, #0
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	b016      	add	sp, #88	; 0x58
 800a604:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a608 <__smakebuf_r>:
 800a608:	898b      	ldrh	r3, [r1, #12]
 800a60a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a60c:	079d      	lsls	r5, r3, #30
 800a60e:	4606      	mov	r6, r0
 800a610:	460c      	mov	r4, r1
 800a612:	d507      	bpl.n	800a624 <__smakebuf_r+0x1c>
 800a614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	6123      	str	r3, [r4, #16]
 800a61c:	2301      	movs	r3, #1
 800a61e:	6163      	str	r3, [r4, #20]
 800a620:	b002      	add	sp, #8
 800a622:	bd70      	pop	{r4, r5, r6, pc}
 800a624:	ab01      	add	r3, sp, #4
 800a626:	466a      	mov	r2, sp
 800a628:	f7ff ffc8 	bl	800a5bc <__swhatbuf_r>
 800a62c:	9900      	ldr	r1, [sp, #0]
 800a62e:	4605      	mov	r5, r0
 800a630:	4630      	mov	r0, r6
 800a632:	f7ff fc4d 	bl	8009ed0 <_malloc_r>
 800a636:	b948      	cbnz	r0, 800a64c <__smakebuf_r+0x44>
 800a638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63c:	059a      	lsls	r2, r3, #22
 800a63e:	d4ef      	bmi.n	800a620 <__smakebuf_r+0x18>
 800a640:	f023 0303 	bic.w	r3, r3, #3
 800a644:	f043 0302 	orr.w	r3, r3, #2
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	e7e3      	b.n	800a614 <__smakebuf_r+0xc>
 800a64c:	4b0d      	ldr	r3, [pc, #52]	; (800a684 <__smakebuf_r+0x7c>)
 800a64e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a650:	89a3      	ldrh	r3, [r4, #12]
 800a652:	6020      	str	r0, [r4, #0]
 800a654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a658:	81a3      	strh	r3, [r4, #12]
 800a65a:	9b00      	ldr	r3, [sp, #0]
 800a65c:	6163      	str	r3, [r4, #20]
 800a65e:	9b01      	ldr	r3, [sp, #4]
 800a660:	6120      	str	r0, [r4, #16]
 800a662:	b15b      	cbz	r3, 800a67c <__smakebuf_r+0x74>
 800a664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a668:	4630      	mov	r0, r6
 800a66a:	f000 fb77 	bl	800ad5c <_isatty_r>
 800a66e:	b128      	cbz	r0, 800a67c <__smakebuf_r+0x74>
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	f023 0303 	bic.w	r3, r3, #3
 800a676:	f043 0301 	orr.w	r3, r3, #1
 800a67a:	81a3      	strh	r3, [r4, #12]
 800a67c:	89a0      	ldrh	r0, [r4, #12]
 800a67e:	4305      	orrs	r5, r0
 800a680:	81a5      	strh	r5, [r4, #12]
 800a682:	e7cd      	b.n	800a620 <__smakebuf_r+0x18>
 800a684:	08009c71 	.word	0x08009c71

0800a688 <__malloc_lock>:
 800a688:	4801      	ldr	r0, [pc, #4]	; (800a690 <__malloc_lock+0x8>)
 800a68a:	f7ff bbe8 	b.w	8009e5e <__retarget_lock_acquire_recursive>
 800a68e:	bf00      	nop
 800a690:	20005330 	.word	0x20005330

0800a694 <__malloc_unlock>:
 800a694:	4801      	ldr	r0, [pc, #4]	; (800a69c <__malloc_unlock+0x8>)
 800a696:	f7ff bbe3 	b.w	8009e60 <__retarget_lock_release_recursive>
 800a69a:	bf00      	nop
 800a69c:	20005330 	.word	0x20005330

0800a6a0 <_free_r>:
 800a6a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	d044      	beq.n	800a730 <_free_r+0x90>
 800a6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6aa:	9001      	str	r0, [sp, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a6b2:	bfb8      	it	lt
 800a6b4:	18e4      	addlt	r4, r4, r3
 800a6b6:	f7ff ffe7 	bl	800a688 <__malloc_lock>
 800a6ba:	4a1e      	ldr	r2, [pc, #120]	; (800a734 <_free_r+0x94>)
 800a6bc:	9801      	ldr	r0, [sp, #4]
 800a6be:	6813      	ldr	r3, [r2, #0]
 800a6c0:	b933      	cbnz	r3, 800a6d0 <_free_r+0x30>
 800a6c2:	6063      	str	r3, [r4, #4]
 800a6c4:	6014      	str	r4, [r2, #0]
 800a6c6:	b003      	add	sp, #12
 800a6c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6cc:	f7ff bfe2 	b.w	800a694 <__malloc_unlock>
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	d908      	bls.n	800a6e6 <_free_r+0x46>
 800a6d4:	6825      	ldr	r5, [r4, #0]
 800a6d6:	1961      	adds	r1, r4, r5
 800a6d8:	428b      	cmp	r3, r1
 800a6da:	bf01      	itttt	eq
 800a6dc:	6819      	ldreq	r1, [r3, #0]
 800a6de:	685b      	ldreq	r3, [r3, #4]
 800a6e0:	1949      	addeq	r1, r1, r5
 800a6e2:	6021      	streq	r1, [r4, #0]
 800a6e4:	e7ed      	b.n	800a6c2 <_free_r+0x22>
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	b10b      	cbz	r3, 800a6f0 <_free_r+0x50>
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	d9fa      	bls.n	800a6e6 <_free_r+0x46>
 800a6f0:	6811      	ldr	r1, [r2, #0]
 800a6f2:	1855      	adds	r5, r2, r1
 800a6f4:	42a5      	cmp	r5, r4
 800a6f6:	d10b      	bne.n	800a710 <_free_r+0x70>
 800a6f8:	6824      	ldr	r4, [r4, #0]
 800a6fa:	4421      	add	r1, r4
 800a6fc:	1854      	adds	r4, r2, r1
 800a6fe:	42a3      	cmp	r3, r4
 800a700:	6011      	str	r1, [r2, #0]
 800a702:	d1e0      	bne.n	800a6c6 <_free_r+0x26>
 800a704:	681c      	ldr	r4, [r3, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	6053      	str	r3, [r2, #4]
 800a70a:	4421      	add	r1, r4
 800a70c:	6011      	str	r1, [r2, #0]
 800a70e:	e7da      	b.n	800a6c6 <_free_r+0x26>
 800a710:	d902      	bls.n	800a718 <_free_r+0x78>
 800a712:	230c      	movs	r3, #12
 800a714:	6003      	str	r3, [r0, #0]
 800a716:	e7d6      	b.n	800a6c6 <_free_r+0x26>
 800a718:	6825      	ldr	r5, [r4, #0]
 800a71a:	1961      	adds	r1, r4, r5
 800a71c:	428b      	cmp	r3, r1
 800a71e:	bf04      	itt	eq
 800a720:	6819      	ldreq	r1, [r3, #0]
 800a722:	685b      	ldreq	r3, [r3, #4]
 800a724:	6063      	str	r3, [r4, #4]
 800a726:	bf04      	itt	eq
 800a728:	1949      	addeq	r1, r1, r5
 800a72a:	6021      	streq	r1, [r4, #0]
 800a72c:	6054      	str	r4, [r2, #4]
 800a72e:	e7ca      	b.n	800a6c6 <_free_r+0x26>
 800a730:	b003      	add	sp, #12
 800a732:	bd30      	pop	{r4, r5, pc}
 800a734:	20005334 	.word	0x20005334

0800a738 <__sfputc_r>:
 800a738:	6893      	ldr	r3, [r2, #8]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	b410      	push	{r4}
 800a740:	6093      	str	r3, [r2, #8]
 800a742:	da08      	bge.n	800a756 <__sfputc_r+0x1e>
 800a744:	6994      	ldr	r4, [r2, #24]
 800a746:	42a3      	cmp	r3, r4
 800a748:	db01      	blt.n	800a74e <__sfputc_r+0x16>
 800a74a:	290a      	cmp	r1, #10
 800a74c:	d103      	bne.n	800a756 <__sfputc_r+0x1e>
 800a74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a752:	f7ff bd7d 	b.w	800a250 <__swbuf_r>
 800a756:	6813      	ldr	r3, [r2, #0]
 800a758:	1c58      	adds	r0, r3, #1
 800a75a:	6010      	str	r0, [r2, #0]
 800a75c:	7019      	strb	r1, [r3, #0]
 800a75e:	4608      	mov	r0, r1
 800a760:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <__sfputs_r>:
 800a766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a768:	4606      	mov	r6, r0
 800a76a:	460f      	mov	r7, r1
 800a76c:	4614      	mov	r4, r2
 800a76e:	18d5      	adds	r5, r2, r3
 800a770:	42ac      	cmp	r4, r5
 800a772:	d101      	bne.n	800a778 <__sfputs_r+0x12>
 800a774:	2000      	movs	r0, #0
 800a776:	e007      	b.n	800a788 <__sfputs_r+0x22>
 800a778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77c:	463a      	mov	r2, r7
 800a77e:	4630      	mov	r0, r6
 800a780:	f7ff ffda 	bl	800a738 <__sfputc_r>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d1f3      	bne.n	800a770 <__sfputs_r+0xa>
 800a788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a78c <_vfiprintf_r>:
 800a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a790:	460d      	mov	r5, r1
 800a792:	b09d      	sub	sp, #116	; 0x74
 800a794:	4614      	mov	r4, r2
 800a796:	4698      	mov	r8, r3
 800a798:	4606      	mov	r6, r0
 800a79a:	b118      	cbz	r0, 800a7a4 <_vfiprintf_r+0x18>
 800a79c:	6983      	ldr	r3, [r0, #24]
 800a79e:	b90b      	cbnz	r3, 800a7a4 <_vfiprintf_r+0x18>
 800a7a0:	f7ff fa9a 	bl	8009cd8 <__sinit>
 800a7a4:	4b89      	ldr	r3, [pc, #548]	; (800a9cc <_vfiprintf_r+0x240>)
 800a7a6:	429d      	cmp	r5, r3
 800a7a8:	d11b      	bne.n	800a7e2 <_vfiprintf_r+0x56>
 800a7aa:	6875      	ldr	r5, [r6, #4]
 800a7ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ae:	07d9      	lsls	r1, r3, #31
 800a7b0:	d405      	bmi.n	800a7be <_vfiprintf_r+0x32>
 800a7b2:	89ab      	ldrh	r3, [r5, #12]
 800a7b4:	059a      	lsls	r2, r3, #22
 800a7b6:	d402      	bmi.n	800a7be <_vfiprintf_r+0x32>
 800a7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ba:	f7ff fb50 	bl	8009e5e <__retarget_lock_acquire_recursive>
 800a7be:	89ab      	ldrh	r3, [r5, #12]
 800a7c0:	071b      	lsls	r3, r3, #28
 800a7c2:	d501      	bpl.n	800a7c8 <_vfiprintf_r+0x3c>
 800a7c4:	692b      	ldr	r3, [r5, #16]
 800a7c6:	b9eb      	cbnz	r3, 800a804 <_vfiprintf_r+0x78>
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7ff fda4 	bl	800a318 <__swsetup_r>
 800a7d0:	b1c0      	cbz	r0, 800a804 <_vfiprintf_r+0x78>
 800a7d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7d4:	07dc      	lsls	r4, r3, #31
 800a7d6:	d50e      	bpl.n	800a7f6 <_vfiprintf_r+0x6a>
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	b01d      	add	sp, #116	; 0x74
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	4b7b      	ldr	r3, [pc, #492]	; (800a9d0 <_vfiprintf_r+0x244>)
 800a7e4:	429d      	cmp	r5, r3
 800a7e6:	d101      	bne.n	800a7ec <_vfiprintf_r+0x60>
 800a7e8:	68b5      	ldr	r5, [r6, #8]
 800a7ea:	e7df      	b.n	800a7ac <_vfiprintf_r+0x20>
 800a7ec:	4b79      	ldr	r3, [pc, #484]	; (800a9d4 <_vfiprintf_r+0x248>)
 800a7ee:	429d      	cmp	r5, r3
 800a7f0:	bf08      	it	eq
 800a7f2:	68f5      	ldreq	r5, [r6, #12]
 800a7f4:	e7da      	b.n	800a7ac <_vfiprintf_r+0x20>
 800a7f6:	89ab      	ldrh	r3, [r5, #12]
 800a7f8:	0598      	lsls	r0, r3, #22
 800a7fa:	d4ed      	bmi.n	800a7d8 <_vfiprintf_r+0x4c>
 800a7fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7fe:	f7ff fb2f 	bl	8009e60 <__retarget_lock_release_recursive>
 800a802:	e7e9      	b.n	800a7d8 <_vfiprintf_r+0x4c>
 800a804:	2300      	movs	r3, #0
 800a806:	9309      	str	r3, [sp, #36]	; 0x24
 800a808:	2320      	movs	r3, #32
 800a80a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a812:	2330      	movs	r3, #48	; 0x30
 800a814:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9d8 <_vfiprintf_r+0x24c>
 800a818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a81c:	f04f 0901 	mov.w	r9, #1
 800a820:	4623      	mov	r3, r4
 800a822:	469a      	mov	sl, r3
 800a824:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a828:	b10a      	cbz	r2, 800a82e <_vfiprintf_r+0xa2>
 800a82a:	2a25      	cmp	r2, #37	; 0x25
 800a82c:	d1f9      	bne.n	800a822 <_vfiprintf_r+0x96>
 800a82e:	ebba 0b04 	subs.w	fp, sl, r4
 800a832:	d00b      	beq.n	800a84c <_vfiprintf_r+0xc0>
 800a834:	465b      	mov	r3, fp
 800a836:	4622      	mov	r2, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7ff ff93 	bl	800a766 <__sfputs_r>
 800a840:	3001      	adds	r0, #1
 800a842:	f000 80aa 	beq.w	800a99a <_vfiprintf_r+0x20e>
 800a846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a848:	445a      	add	r2, fp
 800a84a:	9209      	str	r2, [sp, #36]	; 0x24
 800a84c:	f89a 3000 	ldrb.w	r3, [sl]
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 80a2 	beq.w	800a99a <_vfiprintf_r+0x20e>
 800a856:	2300      	movs	r3, #0
 800a858:	f04f 32ff 	mov.w	r2, #4294967295
 800a85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a860:	f10a 0a01 	add.w	sl, sl, #1
 800a864:	9304      	str	r3, [sp, #16]
 800a866:	9307      	str	r3, [sp, #28]
 800a868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a86c:	931a      	str	r3, [sp, #104]	; 0x68
 800a86e:	4654      	mov	r4, sl
 800a870:	2205      	movs	r2, #5
 800a872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a876:	4858      	ldr	r0, [pc, #352]	; (800a9d8 <_vfiprintf_r+0x24c>)
 800a878:	f7f5 fcb2 	bl	80001e0 <memchr>
 800a87c:	9a04      	ldr	r2, [sp, #16]
 800a87e:	b9d8      	cbnz	r0, 800a8b8 <_vfiprintf_r+0x12c>
 800a880:	06d1      	lsls	r1, r2, #27
 800a882:	bf44      	itt	mi
 800a884:	2320      	movmi	r3, #32
 800a886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a88a:	0713      	lsls	r3, r2, #28
 800a88c:	bf44      	itt	mi
 800a88e:	232b      	movmi	r3, #43	; 0x2b
 800a890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a894:	f89a 3000 	ldrb.w	r3, [sl]
 800a898:	2b2a      	cmp	r3, #42	; 0x2a
 800a89a:	d015      	beq.n	800a8c8 <_vfiprintf_r+0x13c>
 800a89c:	9a07      	ldr	r2, [sp, #28]
 800a89e:	4654      	mov	r4, sl
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	f04f 0c0a 	mov.w	ip, #10
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ac:	3b30      	subs	r3, #48	; 0x30
 800a8ae:	2b09      	cmp	r3, #9
 800a8b0:	d94e      	bls.n	800a950 <_vfiprintf_r+0x1c4>
 800a8b2:	b1b0      	cbz	r0, 800a8e2 <_vfiprintf_r+0x156>
 800a8b4:	9207      	str	r2, [sp, #28]
 800a8b6:	e014      	b.n	800a8e2 <_vfiprintf_r+0x156>
 800a8b8:	eba0 0308 	sub.w	r3, r0, r8
 800a8bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	46a2      	mov	sl, r4
 800a8c6:	e7d2      	b.n	800a86e <_vfiprintf_r+0xe2>
 800a8c8:	9b03      	ldr	r3, [sp, #12]
 800a8ca:	1d19      	adds	r1, r3, #4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	9103      	str	r1, [sp, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	bfbb      	ittet	lt
 800a8d4:	425b      	neglt	r3, r3
 800a8d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8da:	9307      	strge	r3, [sp, #28]
 800a8dc:	9307      	strlt	r3, [sp, #28]
 800a8de:	bfb8      	it	lt
 800a8e0:	9204      	strlt	r2, [sp, #16]
 800a8e2:	7823      	ldrb	r3, [r4, #0]
 800a8e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a8e6:	d10c      	bne.n	800a902 <_vfiprintf_r+0x176>
 800a8e8:	7863      	ldrb	r3, [r4, #1]
 800a8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ec:	d135      	bne.n	800a95a <_vfiprintf_r+0x1ce>
 800a8ee:	9b03      	ldr	r3, [sp, #12]
 800a8f0:	1d1a      	adds	r2, r3, #4
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	9203      	str	r2, [sp, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	bfb8      	it	lt
 800a8fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8fe:	3402      	adds	r4, #2
 800a900:	9305      	str	r3, [sp, #20]
 800a902:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9e8 <_vfiprintf_r+0x25c>
 800a906:	7821      	ldrb	r1, [r4, #0]
 800a908:	2203      	movs	r2, #3
 800a90a:	4650      	mov	r0, sl
 800a90c:	f7f5 fc68 	bl	80001e0 <memchr>
 800a910:	b140      	cbz	r0, 800a924 <_vfiprintf_r+0x198>
 800a912:	2340      	movs	r3, #64	; 0x40
 800a914:	eba0 000a 	sub.w	r0, r0, sl
 800a918:	fa03 f000 	lsl.w	r0, r3, r0
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	4303      	orrs	r3, r0
 800a920:	3401      	adds	r4, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a928:	482c      	ldr	r0, [pc, #176]	; (800a9dc <_vfiprintf_r+0x250>)
 800a92a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a92e:	2206      	movs	r2, #6
 800a930:	f7f5 fc56 	bl	80001e0 <memchr>
 800a934:	2800      	cmp	r0, #0
 800a936:	d03f      	beq.n	800a9b8 <_vfiprintf_r+0x22c>
 800a938:	4b29      	ldr	r3, [pc, #164]	; (800a9e0 <_vfiprintf_r+0x254>)
 800a93a:	bb1b      	cbnz	r3, 800a984 <_vfiprintf_r+0x1f8>
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	3307      	adds	r3, #7
 800a940:	f023 0307 	bic.w	r3, r3, #7
 800a944:	3308      	adds	r3, #8
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94a:	443b      	add	r3, r7
 800a94c:	9309      	str	r3, [sp, #36]	; 0x24
 800a94e:	e767      	b.n	800a820 <_vfiprintf_r+0x94>
 800a950:	fb0c 3202 	mla	r2, ip, r2, r3
 800a954:	460c      	mov	r4, r1
 800a956:	2001      	movs	r0, #1
 800a958:	e7a5      	b.n	800a8a6 <_vfiprintf_r+0x11a>
 800a95a:	2300      	movs	r3, #0
 800a95c:	3401      	adds	r4, #1
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	4619      	mov	r1, r3
 800a962:	f04f 0c0a 	mov.w	ip, #10
 800a966:	4620      	mov	r0, r4
 800a968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a96c:	3a30      	subs	r2, #48	; 0x30
 800a96e:	2a09      	cmp	r2, #9
 800a970:	d903      	bls.n	800a97a <_vfiprintf_r+0x1ee>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0c5      	beq.n	800a902 <_vfiprintf_r+0x176>
 800a976:	9105      	str	r1, [sp, #20]
 800a978:	e7c3      	b.n	800a902 <_vfiprintf_r+0x176>
 800a97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a97e:	4604      	mov	r4, r0
 800a980:	2301      	movs	r3, #1
 800a982:	e7f0      	b.n	800a966 <_vfiprintf_r+0x1da>
 800a984:	ab03      	add	r3, sp, #12
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	462a      	mov	r2, r5
 800a98a:	4b16      	ldr	r3, [pc, #88]	; (800a9e4 <_vfiprintf_r+0x258>)
 800a98c:	a904      	add	r1, sp, #16
 800a98e:	4630      	mov	r0, r6
 800a990:	f3af 8000 	nop.w
 800a994:	4607      	mov	r7, r0
 800a996:	1c78      	adds	r0, r7, #1
 800a998:	d1d6      	bne.n	800a948 <_vfiprintf_r+0x1bc>
 800a99a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a99c:	07d9      	lsls	r1, r3, #31
 800a99e:	d405      	bmi.n	800a9ac <_vfiprintf_r+0x220>
 800a9a0:	89ab      	ldrh	r3, [r5, #12]
 800a9a2:	059a      	lsls	r2, r3, #22
 800a9a4:	d402      	bmi.n	800a9ac <_vfiprintf_r+0x220>
 800a9a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9a8:	f7ff fa5a 	bl	8009e60 <__retarget_lock_release_recursive>
 800a9ac:	89ab      	ldrh	r3, [r5, #12]
 800a9ae:	065b      	lsls	r3, r3, #25
 800a9b0:	f53f af12 	bmi.w	800a7d8 <_vfiprintf_r+0x4c>
 800a9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9b6:	e711      	b.n	800a7dc <_vfiprintf_r+0x50>
 800a9b8:	ab03      	add	r3, sp, #12
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	462a      	mov	r2, r5
 800a9be:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <_vfiprintf_r+0x258>)
 800a9c0:	a904      	add	r1, sp, #16
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f000 f880 	bl	800aac8 <_printf_i>
 800a9c8:	e7e4      	b.n	800a994 <_vfiprintf_r+0x208>
 800a9ca:	bf00      	nop
 800a9cc:	0800affc 	.word	0x0800affc
 800a9d0:	0800b01c 	.word	0x0800b01c
 800a9d4:	0800afdc 	.word	0x0800afdc
 800a9d8:	0800b040 	.word	0x0800b040
 800a9dc:	0800b04a 	.word	0x0800b04a
 800a9e0:	00000000 	.word	0x00000000
 800a9e4:	0800a767 	.word	0x0800a767
 800a9e8:	0800b046 	.word	0x0800b046

0800a9ec <_printf_common>:
 800a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f0:	4616      	mov	r6, r2
 800a9f2:	4699      	mov	r9, r3
 800a9f4:	688a      	ldr	r2, [r1, #8]
 800a9f6:	690b      	ldr	r3, [r1, #16]
 800a9f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	bfb8      	it	lt
 800aa00:	4613      	movlt	r3, r2
 800aa02:	6033      	str	r3, [r6, #0]
 800aa04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa08:	4607      	mov	r7, r0
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	b10a      	cbz	r2, 800aa12 <_printf_common+0x26>
 800aa0e:	3301      	adds	r3, #1
 800aa10:	6033      	str	r3, [r6, #0]
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	0699      	lsls	r1, r3, #26
 800aa16:	bf42      	ittt	mi
 800aa18:	6833      	ldrmi	r3, [r6, #0]
 800aa1a:	3302      	addmi	r3, #2
 800aa1c:	6033      	strmi	r3, [r6, #0]
 800aa1e:	6825      	ldr	r5, [r4, #0]
 800aa20:	f015 0506 	ands.w	r5, r5, #6
 800aa24:	d106      	bne.n	800aa34 <_printf_common+0x48>
 800aa26:	f104 0a19 	add.w	sl, r4, #25
 800aa2a:	68e3      	ldr	r3, [r4, #12]
 800aa2c:	6832      	ldr	r2, [r6, #0]
 800aa2e:	1a9b      	subs	r3, r3, r2
 800aa30:	42ab      	cmp	r3, r5
 800aa32:	dc26      	bgt.n	800aa82 <_printf_common+0x96>
 800aa34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa38:	1e13      	subs	r3, r2, #0
 800aa3a:	6822      	ldr	r2, [r4, #0]
 800aa3c:	bf18      	it	ne
 800aa3e:	2301      	movne	r3, #1
 800aa40:	0692      	lsls	r2, r2, #26
 800aa42:	d42b      	bmi.n	800aa9c <_printf_common+0xb0>
 800aa44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	47c0      	blx	r8
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d01e      	beq.n	800aa90 <_printf_common+0xa4>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	68e5      	ldr	r5, [r4, #12]
 800aa56:	6832      	ldr	r2, [r6, #0]
 800aa58:	f003 0306 	and.w	r3, r3, #6
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	bf08      	it	eq
 800aa60:	1aad      	subeq	r5, r5, r2
 800aa62:	68a3      	ldr	r3, [r4, #8]
 800aa64:	6922      	ldr	r2, [r4, #16]
 800aa66:	bf0c      	ite	eq
 800aa68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa6c:	2500      	movne	r5, #0
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	bfc4      	itt	gt
 800aa72:	1a9b      	subgt	r3, r3, r2
 800aa74:	18ed      	addgt	r5, r5, r3
 800aa76:	2600      	movs	r6, #0
 800aa78:	341a      	adds	r4, #26
 800aa7a:	42b5      	cmp	r5, r6
 800aa7c:	d11a      	bne.n	800aab4 <_printf_common+0xc8>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e008      	b.n	800aa94 <_printf_common+0xa8>
 800aa82:	2301      	movs	r3, #1
 800aa84:	4652      	mov	r2, sl
 800aa86:	4649      	mov	r1, r9
 800aa88:	4638      	mov	r0, r7
 800aa8a:	47c0      	blx	r8
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d103      	bne.n	800aa98 <_printf_common+0xac>
 800aa90:	f04f 30ff 	mov.w	r0, #4294967295
 800aa94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa98:	3501      	adds	r5, #1
 800aa9a:	e7c6      	b.n	800aa2a <_printf_common+0x3e>
 800aa9c:	18e1      	adds	r1, r4, r3
 800aa9e:	1c5a      	adds	r2, r3, #1
 800aaa0:	2030      	movs	r0, #48	; 0x30
 800aaa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaa6:	4422      	add	r2, r4
 800aaa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aab0:	3302      	adds	r3, #2
 800aab2:	e7c7      	b.n	800aa44 <_printf_common+0x58>
 800aab4:	2301      	movs	r3, #1
 800aab6:	4622      	mov	r2, r4
 800aab8:	4649      	mov	r1, r9
 800aaba:	4638      	mov	r0, r7
 800aabc:	47c0      	blx	r8
 800aabe:	3001      	adds	r0, #1
 800aac0:	d0e6      	beq.n	800aa90 <_printf_common+0xa4>
 800aac2:	3601      	adds	r6, #1
 800aac4:	e7d9      	b.n	800aa7a <_printf_common+0x8e>
	...

0800aac8 <_printf_i>:
 800aac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aacc:	7e0f      	ldrb	r7, [r1, #24]
 800aace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aad0:	2f78      	cmp	r7, #120	; 0x78
 800aad2:	4691      	mov	r9, r2
 800aad4:	4680      	mov	r8, r0
 800aad6:	460c      	mov	r4, r1
 800aad8:	469a      	mov	sl, r3
 800aada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aade:	d807      	bhi.n	800aaf0 <_printf_i+0x28>
 800aae0:	2f62      	cmp	r7, #98	; 0x62
 800aae2:	d80a      	bhi.n	800aafa <_printf_i+0x32>
 800aae4:	2f00      	cmp	r7, #0
 800aae6:	f000 80d8 	beq.w	800ac9a <_printf_i+0x1d2>
 800aaea:	2f58      	cmp	r7, #88	; 0x58
 800aaec:	f000 80a3 	beq.w	800ac36 <_printf_i+0x16e>
 800aaf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aaf8:	e03a      	b.n	800ab70 <_printf_i+0xa8>
 800aafa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aafe:	2b15      	cmp	r3, #21
 800ab00:	d8f6      	bhi.n	800aaf0 <_printf_i+0x28>
 800ab02:	a101      	add	r1, pc, #4	; (adr r1, 800ab08 <_printf_i+0x40>)
 800ab04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab08:	0800ab61 	.word	0x0800ab61
 800ab0c:	0800ab75 	.word	0x0800ab75
 800ab10:	0800aaf1 	.word	0x0800aaf1
 800ab14:	0800aaf1 	.word	0x0800aaf1
 800ab18:	0800aaf1 	.word	0x0800aaf1
 800ab1c:	0800aaf1 	.word	0x0800aaf1
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800aaf1 	.word	0x0800aaf1
 800ab28:	0800aaf1 	.word	0x0800aaf1
 800ab2c:	0800aaf1 	.word	0x0800aaf1
 800ab30:	0800aaf1 	.word	0x0800aaf1
 800ab34:	0800ac81 	.word	0x0800ac81
 800ab38:	0800aba5 	.word	0x0800aba5
 800ab3c:	0800ac63 	.word	0x0800ac63
 800ab40:	0800aaf1 	.word	0x0800aaf1
 800ab44:	0800aaf1 	.word	0x0800aaf1
 800ab48:	0800aca3 	.word	0x0800aca3
 800ab4c:	0800aaf1 	.word	0x0800aaf1
 800ab50:	0800aba5 	.word	0x0800aba5
 800ab54:	0800aaf1 	.word	0x0800aaf1
 800ab58:	0800aaf1 	.word	0x0800aaf1
 800ab5c:	0800ac6b 	.word	0x0800ac6b
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	1d1a      	adds	r2, r3, #4
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	602a      	str	r2, [r5, #0]
 800ab68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab70:	2301      	movs	r3, #1
 800ab72:	e0a3      	b.n	800acbc <_printf_i+0x1f4>
 800ab74:	6820      	ldr	r0, [r4, #0]
 800ab76:	6829      	ldr	r1, [r5, #0]
 800ab78:	0606      	lsls	r6, r0, #24
 800ab7a:	f101 0304 	add.w	r3, r1, #4
 800ab7e:	d50a      	bpl.n	800ab96 <_printf_i+0xce>
 800ab80:	680e      	ldr	r6, [r1, #0]
 800ab82:	602b      	str	r3, [r5, #0]
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	da03      	bge.n	800ab90 <_printf_i+0xc8>
 800ab88:	232d      	movs	r3, #45	; 0x2d
 800ab8a:	4276      	negs	r6, r6
 800ab8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab90:	485e      	ldr	r0, [pc, #376]	; (800ad0c <_printf_i+0x244>)
 800ab92:	230a      	movs	r3, #10
 800ab94:	e019      	b.n	800abca <_printf_i+0x102>
 800ab96:	680e      	ldr	r6, [r1, #0]
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab9e:	bf18      	it	ne
 800aba0:	b236      	sxthne	r6, r6
 800aba2:	e7ef      	b.n	800ab84 <_printf_i+0xbc>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	6820      	ldr	r0, [r4, #0]
 800aba8:	1d19      	adds	r1, r3, #4
 800abaa:	6029      	str	r1, [r5, #0]
 800abac:	0601      	lsls	r1, r0, #24
 800abae:	d501      	bpl.n	800abb4 <_printf_i+0xec>
 800abb0:	681e      	ldr	r6, [r3, #0]
 800abb2:	e002      	b.n	800abba <_printf_i+0xf2>
 800abb4:	0646      	lsls	r6, r0, #25
 800abb6:	d5fb      	bpl.n	800abb0 <_printf_i+0xe8>
 800abb8:	881e      	ldrh	r6, [r3, #0]
 800abba:	4854      	ldr	r0, [pc, #336]	; (800ad0c <_printf_i+0x244>)
 800abbc:	2f6f      	cmp	r7, #111	; 0x6f
 800abbe:	bf0c      	ite	eq
 800abc0:	2308      	moveq	r3, #8
 800abc2:	230a      	movne	r3, #10
 800abc4:	2100      	movs	r1, #0
 800abc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abca:	6865      	ldr	r5, [r4, #4]
 800abcc:	60a5      	str	r5, [r4, #8]
 800abce:	2d00      	cmp	r5, #0
 800abd0:	bfa2      	ittt	ge
 800abd2:	6821      	ldrge	r1, [r4, #0]
 800abd4:	f021 0104 	bicge.w	r1, r1, #4
 800abd8:	6021      	strge	r1, [r4, #0]
 800abda:	b90e      	cbnz	r6, 800abe0 <_printf_i+0x118>
 800abdc:	2d00      	cmp	r5, #0
 800abde:	d04d      	beq.n	800ac7c <_printf_i+0x1b4>
 800abe0:	4615      	mov	r5, r2
 800abe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800abe6:	fb03 6711 	mls	r7, r3, r1, r6
 800abea:	5dc7      	ldrb	r7, [r0, r7]
 800abec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abf0:	4637      	mov	r7, r6
 800abf2:	42bb      	cmp	r3, r7
 800abf4:	460e      	mov	r6, r1
 800abf6:	d9f4      	bls.n	800abe2 <_printf_i+0x11a>
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	d10b      	bne.n	800ac14 <_printf_i+0x14c>
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	07de      	lsls	r6, r3, #31
 800ac00:	d508      	bpl.n	800ac14 <_printf_i+0x14c>
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	6861      	ldr	r1, [r4, #4]
 800ac06:	4299      	cmp	r1, r3
 800ac08:	bfde      	ittt	le
 800ac0a:	2330      	movle	r3, #48	; 0x30
 800ac0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac14:	1b52      	subs	r2, r2, r5
 800ac16:	6122      	str	r2, [r4, #16]
 800ac18:	f8cd a000 	str.w	sl, [sp]
 800ac1c:	464b      	mov	r3, r9
 800ac1e:	aa03      	add	r2, sp, #12
 800ac20:	4621      	mov	r1, r4
 800ac22:	4640      	mov	r0, r8
 800ac24:	f7ff fee2 	bl	800a9ec <_printf_common>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d14c      	bne.n	800acc6 <_printf_i+0x1fe>
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	b004      	add	sp, #16
 800ac32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac36:	4835      	ldr	r0, [pc, #212]	; (800ad0c <_printf_i+0x244>)
 800ac38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac3c:	6829      	ldr	r1, [r5, #0]
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac44:	6029      	str	r1, [r5, #0]
 800ac46:	061d      	lsls	r5, r3, #24
 800ac48:	d514      	bpl.n	800ac74 <_printf_i+0x1ac>
 800ac4a:	07df      	lsls	r7, r3, #31
 800ac4c:	bf44      	itt	mi
 800ac4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac52:	6023      	strmi	r3, [r4, #0]
 800ac54:	b91e      	cbnz	r6, 800ac5e <_printf_i+0x196>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	f023 0320 	bic.w	r3, r3, #32
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	2310      	movs	r3, #16
 800ac60:	e7b0      	b.n	800abc4 <_printf_i+0xfc>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	f043 0320 	orr.w	r3, r3, #32
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	2378      	movs	r3, #120	; 0x78
 800ac6c:	4828      	ldr	r0, [pc, #160]	; (800ad10 <_printf_i+0x248>)
 800ac6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac72:	e7e3      	b.n	800ac3c <_printf_i+0x174>
 800ac74:	0659      	lsls	r1, r3, #25
 800ac76:	bf48      	it	mi
 800ac78:	b2b6      	uxthmi	r6, r6
 800ac7a:	e7e6      	b.n	800ac4a <_printf_i+0x182>
 800ac7c:	4615      	mov	r5, r2
 800ac7e:	e7bb      	b.n	800abf8 <_printf_i+0x130>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	6826      	ldr	r6, [r4, #0]
 800ac84:	6961      	ldr	r1, [r4, #20]
 800ac86:	1d18      	adds	r0, r3, #4
 800ac88:	6028      	str	r0, [r5, #0]
 800ac8a:	0635      	lsls	r5, r6, #24
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	d501      	bpl.n	800ac94 <_printf_i+0x1cc>
 800ac90:	6019      	str	r1, [r3, #0]
 800ac92:	e002      	b.n	800ac9a <_printf_i+0x1d2>
 800ac94:	0670      	lsls	r0, r6, #25
 800ac96:	d5fb      	bpl.n	800ac90 <_printf_i+0x1c8>
 800ac98:	8019      	strh	r1, [r3, #0]
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	6123      	str	r3, [r4, #16]
 800ac9e:	4615      	mov	r5, r2
 800aca0:	e7ba      	b.n	800ac18 <_printf_i+0x150>
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	1d1a      	adds	r2, r3, #4
 800aca6:	602a      	str	r2, [r5, #0]
 800aca8:	681d      	ldr	r5, [r3, #0]
 800acaa:	6862      	ldr	r2, [r4, #4]
 800acac:	2100      	movs	r1, #0
 800acae:	4628      	mov	r0, r5
 800acb0:	f7f5 fa96 	bl	80001e0 <memchr>
 800acb4:	b108      	cbz	r0, 800acba <_printf_i+0x1f2>
 800acb6:	1b40      	subs	r0, r0, r5
 800acb8:	6060      	str	r0, [r4, #4]
 800acba:	6863      	ldr	r3, [r4, #4]
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	2300      	movs	r3, #0
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc4:	e7a8      	b.n	800ac18 <_printf_i+0x150>
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	462a      	mov	r2, r5
 800acca:	4649      	mov	r1, r9
 800accc:	4640      	mov	r0, r8
 800acce:	47d0      	blx	sl
 800acd0:	3001      	adds	r0, #1
 800acd2:	d0ab      	beq.n	800ac2c <_printf_i+0x164>
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	079b      	lsls	r3, r3, #30
 800acd8:	d413      	bmi.n	800ad02 <_printf_i+0x23a>
 800acda:	68e0      	ldr	r0, [r4, #12]
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	4298      	cmp	r0, r3
 800ace0:	bfb8      	it	lt
 800ace2:	4618      	movlt	r0, r3
 800ace4:	e7a4      	b.n	800ac30 <_printf_i+0x168>
 800ace6:	2301      	movs	r3, #1
 800ace8:	4632      	mov	r2, r6
 800acea:	4649      	mov	r1, r9
 800acec:	4640      	mov	r0, r8
 800acee:	47d0      	blx	sl
 800acf0:	3001      	adds	r0, #1
 800acf2:	d09b      	beq.n	800ac2c <_printf_i+0x164>
 800acf4:	3501      	adds	r5, #1
 800acf6:	68e3      	ldr	r3, [r4, #12]
 800acf8:	9903      	ldr	r1, [sp, #12]
 800acfa:	1a5b      	subs	r3, r3, r1
 800acfc:	42ab      	cmp	r3, r5
 800acfe:	dcf2      	bgt.n	800ace6 <_printf_i+0x21e>
 800ad00:	e7eb      	b.n	800acda <_printf_i+0x212>
 800ad02:	2500      	movs	r5, #0
 800ad04:	f104 0619 	add.w	r6, r4, #25
 800ad08:	e7f5      	b.n	800acf6 <_printf_i+0x22e>
 800ad0a:	bf00      	nop
 800ad0c:	0800b051 	.word	0x0800b051
 800ad10:	0800b062 	.word	0x0800b062

0800ad14 <_read_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	; (800ad34 <_read_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7f6 ff9a 	bl	8001c5c <_read>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_read_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_read_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	2000533c 	.word	0x2000533c

0800ad38 <_fstat_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	; (800ad58 <_fstat_r+0x20>)
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	4611      	mov	r1, r2
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	f7f6 ffce 	bl	8001ce6 <_fstat>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d102      	bne.n	800ad54 <_fstat_r+0x1c>
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	b103      	cbz	r3, 800ad54 <_fstat_r+0x1c>
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	2000533c 	.word	0x2000533c

0800ad5c <_isatty_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d06      	ldr	r5, [pc, #24]	; (800ad78 <_isatty_r+0x1c>)
 800ad60:	2300      	movs	r3, #0
 800ad62:	4604      	mov	r4, r0
 800ad64:	4608      	mov	r0, r1
 800ad66:	602b      	str	r3, [r5, #0]
 800ad68:	f7f6 ffcd 	bl	8001d06 <_isatty>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_isatty_r+0x1a>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_isatty_r+0x1a>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	2000533c 	.word	0x2000533c

0800ad7c <_init>:
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	bf00      	nop
 800ad80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad82:	bc08      	pop	{r3}
 800ad84:	469e      	mov	lr, r3
 800ad86:	4770      	bx	lr

0800ad88 <_fini>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr
